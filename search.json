[
  {
    "objectID": "lf/S1-V23/index.html",
    "href": "lf/S1-V23/index.html",
    "title": "Eksamen V23 S1",
    "section": "",
    "text": "Her er eit forslag til l√∏ysing av v√•reksamen i S1 2023. I del 2 er oppg√•vene stort sett Python brukt som hjelpemiddel.\nEg kan ikkje lova at l√∏ysinga er feilfri‚Ä¶ üòä Gje meg gjerne ein lyd i kommentarfeltet eller her om du ser feil üîç\nSist oppdatert: 24.mai\n\nMiniatyrbilete: Exam icons created by Freepik - Flaticon\nEksamenssettet finn du hos UDIR: Finn eksamensoppgaver"
  },
  {
    "objectID": "lf/S1-V23/index.html#oppg√•ve-1",
    "href": "lf/S1-V23/index.html#oppg√•ve-1",
    "title": "Eksamen V23 S1",
    "section": "Oppg√•ve 1",
    "text": "Oppg√•ve 1\nSkriv s√• enkelt som mogleg\n\\[ \\begin{align*}\n\\frac{\\left(2ab^{-1}\\right)^3 \\cdot \\left( a^2 b^{-2}\\right)^{-1}}{4 a^2 b^{-3}}\n    &= \\frac{2^3 a^3 b^{-1\\cdot 3} a^{2 \\cdot (-1)} b^{-2 \\cdot -1}}{2^2 a^2 b^{-3}} \\\\\n    &= \\frac{2^3 a^3 b^{-3} a^{-2} b^{2}}{2^2 a^2 b^{-3}} \\\\\n    &= 2^{3-2} a^{3-2-2} b^{-3+2-(-3)} \\\\\n    &= 2 a^{-1} b^2 \\\\\n    &= \\frac{2b^2}{a}\n\\end{align*}\\]"
  },
  {
    "objectID": "lf/S1-V23/index.html#oppg√•ve-2",
    "href": "lf/S1-V23/index.html#oppg√•ve-2",
    "title": "Eksamen V23 S1",
    "section": "Oppg√•ve 2",
    "text": "Oppg√•ve 2\nSkal derivera funksjonen \\(f\\) gitt ved \\[f(x)=x\\cdot \\ln(x)\\]\nSer at \\(f\\) er eit produkt av funksjonane \\(x\\) og \\(\\ln(x)\\).\nLar \\(u=x\\) og \\(v=\\ln(x)\\). D√• er \\(u' = 1\\) og \\(v'=\\frac{1}{x}\\).\nProduktregelen for derivasjon gjev oss \\[\\begin{align*}\nf(x) &= u\\cdot v \\\\\nf'(x) &= u'\\cdot v + u\\cdot v' \\\\\n&= 1\\cdot \\ln(x) + x \\cdot \\frac{1}{x} \\\\\n&= \\ln(x) + 1\n\\end{align*}\n\\]"
  },
  {
    "objectID": "lf/S1-V23/index.html#oppg√•ve-3",
    "href": "lf/S1-V23/index.html#oppg√•ve-3",
    "title": "Eksamen V23 S1",
    "section": "Oppg√•ve 3",
    "text": "Oppg√•ve 3\nBestem grenseverdien\n\\[\\lim_{x\\rightarrow 2} \\frac{x^3-8}{x^2-4}\\]\nSer at om me set inn \\(x=2\\) i uttrykket vert b√•de teljar og nemnar 0\n\\[\\frac{2^3-8}{2^2-4} = \\frac{8-8}{4-4} = \\frac{0}{0}\\]\nDermed kan me bruka L‚ÄôH√¥pitals regel, og deriverer teljar og nemnar for seg\n\\[\\lim_{x\\rightarrow 2} \\frac{x^3-8}{x^2-4} = \\lim_{x\\rightarrow 2} \\frac{3x^2}{2x} = \\frac{3\\cdot 2^2}{2\\cdot 2}=3\\]"
  },
  {
    "objectID": "lf/S1-V23/index.html#oppg√•ve-4",
    "href": "lf/S1-V23/index.html#oppg√•ve-4",
    "title": "Eksamen V23 S1",
    "section": "Oppg√•ve 4",
    "text": "Oppg√•ve 4\nTre svarte og fire kvite kuler i ei krukke, trekk tre kuler uten tilbakelegging.\n\na) To av tre er svarte\nHer har me ein todelt populasjon (kulene i krukka) og gjer eit utval som ogs√• er todelt. Me kan dermed sj√• p√• dete som eit hypergeometrisk fors√∏k.\nLa tal svarte kuler i utvalet vera \\(X\\). Me vil d√• finna \\(P(X=2)\\).\n\\[P(X=2)= \\frac{\\left(3 \\atop 2\\right) \\left( 4\\atop 1\\right)}{\\left(7 \\atop 3\\right)} = \\frac{3\\cdot 4}{35}= \\frac{12}{35}\\]\n\n\n\n\n\n\nBinomialkoeffesientane\n\n\n\n\n\\(\\left(3 \\atop 2\\right) = \\frac{3\\cdot 2}{2\\cdot 1} = 3\\)\n\\(\\left(4 \\atop 1\\right) = \\frac{4}{1} = 4\\)\n\\(\\left(7 \\atop 3\\right) = \\frac{7\\cdot 6 \\cdot 5}{3\\cdot 2\\cdot 1} = 35\\)\n\n\n\n\n\nb) Minst to kvite\nViss me skal trekka minst to kvite kuler, s√• vert det i eit utval p√• 3 dei utfalla som gjev to kvite kuler eller tre kvite kuler.\nLar \\(Y\\) vera tal kvite kuler i utvalet. Vil no finna \\(P(Y\\geq 2) = P(Y=2) + P(Y=3)\\)\nFinn f√∏rst \\(P(Y=2)\\):\n\\[P(Y=2)= \\frac{\\left(4 \\atop 2\\right) \\left( 3\\atop 1\\right)}{\\left(7 \\atop 3\\right)} = \\frac{6\\cdot 3}{35}= \\frac{18}{35}\\]\nog deretter \\(P(Y=3)\\):\n\\[P(Y=3)= \\frac{\\left(4 \\atop 3\\right) \\left( 3\\atop 0\\right)}{\\left(7 \\atop 3\\right)} = \\frac{4\\cdot 1}{35}= \\frac{4}{35}\\]\nDermed f√•r me\n\\[P(Y\\geq 2) = P(Y=2) + P(Y=3) = \\frac{18}{35} + \\frac{4}{35} = \\frac{22}{35}\\]\n\n\nAlternativ l√∏ysing p√• b)\nMe kan bruka resultatet fr√• a). Der fann me sannsynet for at to kuler var svarte. Om me i tillegg finn sannsynet for at tre av tre kuler er svarte, s√• kan me bruka at\n\\[P(Y\\geq 2) = 1 - P(X=2) - P(X=3)\\]\nMe finn \\(P(X=3)\\): \\[P(X=3)= \\frac{\\left(3 \\atop 3\\right) \\left( 4\\atop 0\\right)}{\\left(7 \\atop 3\\right)} = \\frac{1\\cdot 1}{35}= \\frac{1}{35}\\]\nDermed f√•r me \\[P(Y\\geq 2) = 1 - P(X=2) - P(X=3) = 1 - \\frac{12}{35} -\\frac{1}{35} = \\frac{22}{35}\\]"
  },
  {
    "objectID": "lf/S1-V23/index.html#oppg√•ve-5",
    "href": "lf/S1-V23/index.html#oppg√•ve-5",
    "title": "Eksamen V23 S1",
    "section": "Oppg√•ve 5",
    "text": "Oppg√•ve 5\nKostnad \\(K\\) ved produksjon av \\(x\\) einingar per veke gitt ved \\[K(X)=0,2x^2+140x+7000\\]\nBedrifta har laga programmet:\n\ndef K(x):\n    return 0.2*x**2 + 140*x + 7000\n\nv = 260\nh = 0.0001\nx = 0\n\nwhile (K(x+h)-K(x))/h &lt; v:\n    x = x + 1\n\nprint(x)\n\nMe kjenner att K(x + h) - K(x))/h som definisjonen til den deriverte av \\(K\\). Programmet finn dermed ut kva tid den deriverte til \\(K\\), grensekostnaden (kompetansem√•l i S2), blir st√∏rre enn/passerer v = 260.\nResultatet n√•r ein k√∏yrer programmet vert d√• den siste x-verdien (heiltal) som gjer \\(K'(x) \\leq 260\\).\nL√∏yser likninga \\(K'(x)=260\\):\n\\[\\begin{align*}\nK'(x) &= 260 \\\\\n0,4x + 140 &= 260 \\\\\n0,4x &= 260 - 140 \\\\\nx &= \\frac{120}{0,4} = 300\n\\end{align*} \\]\nDermed er \\(K'(300) = 260\\) som vil seie at programmet skriv ut 300 n√•r det k√∏yrer, sidan \\(K'(301)\\) vil vera st√∏rre enn vilk√•ret i while-l√∏kka i rad 8. (sidan \\(K'(x)\\) er ein line√¶r funksjon med positivt stigningstal).\nDette fortel bedrifta at om ein aukar produksjonen fr√• 300 til 301 einingar per veke s√• vil kostnadane auka med omlag 260 kr."
  },
  {
    "objectID": "lf/S1-V23/index.html#oppg√•ve-1-1",
    "href": "lf/S1-V23/index.html#oppg√•ve-1-1",
    "title": "Eksamen V23 S1",
    "section": "Oppg√•ve 1",
    "text": "Oppg√•ve 1\nTabellen nedanfor viser timel√∏nna til ei yrkesgruppe.\n\n\n\n√Ör\nTimel√∏n\n\n\n\n\n2008\n272,55\n\n\n2010\n285,50\n\n\n2013\n307,30\n\n\n2015\n314,00\n\n\n2019\n327,60\n\n\n2022\n340,10\n\n\n\n\na) Prosentvis vekst\nGjennomsnittleg √•rleg prosentvis vekst fr√• 2008 til 2022. Det er snakk om \\(2022-2008=14\\) √•r. L√∏yser likninga\n\\[272,55 \\cdot x^{14} = 340,10\\] for √• finna vekstfaktoren\n\nfrom sympy import Symbol, diff, Eq, Reals, solveset\n\n# definerer x\nx = Symbol(\"x\")\n\n# definerer vs og hs av likninga\nvs = 272.55 * x**14\nhs = 340.10\n\n# set opp likninga, og l√∏yser ho\nlikning = Eq(vs, hs)\nl√∏ysing = solveset(likning, x, domain=Reals)\n\n# skriv ut svaret\nprint(f\"x = {l√∏ysing.evalf(4)}\")\n\nx = {-1.016, 1.016}\n\n\nSer at vekstfaktoren her er 1.016 som tilsvarar ein √•rleg gjennomsnittleg prosentvis auke p√• 1,6%.\n\n\nb) Eksponentialfunksjon\nFinn passande eksponentialfunksjon med curve_fit i Scipy/Python.\n\nfrom scipy.optimize import curve_fit\n\n# generell eksponentialfunksjon\ndef g(x, a, b):\n    return a*b**x\n\n# data fr√• oppg√•va\n√•r = [0, 2, 5, 7, 11, 14]\nl√∏nn = [272.55, 285.50, 307.30, 314.00, 327.60, 340.10]\n\n# finn funksjonen\nK, E = curve_fit(g, √•r, l√∏nn)\n\n# hentar ut koeff.\na, b = K\n\n# skriv ut funksjonsuttrykket\nprint(f\"g(x) = {a:.1f} * {b:.4f}^x\")\n\ng(x) = 278.5 * 1.0151^x\n\n\nEin modell for timel√∏na til yrkesgruppa \\(x\\) √•r etter 2008 er \\[g(x) = 278,5 \\cdot 1,015^x\\]\n\n\nc) Samla l√∏n\nAmalie har hatt l√∏nnsauke med 2,3 % kvart √•r, og starta med timel√∏nn p√• 272,55 kroner i 2008. Ho har jobba 1700 timar per √•r. L√∏yser denne i python med ei for-l√∏kke\n\nsamla_l√∏n = 0\nvf = 1.023\ntimel√∏n = 272.55\n\n# i fr√• og med 0 til og med 14\n# finn ny √•rsl√∏n og legg til samla l√∏n dei 15 √•ra\nfor i in range(15):\n    samla_l√∏n += 1700 * timel√∏n*vf**i\n\nprint(f\"Samla l√∏n, Amalie: {samla_l√∏n:.2f}\")\n\nSamla l√∏n, Amalie: 8188601.24\n\n\nSamla l√∏n Per kan me finna p√• ulike m√•tar.\nDersom me g√•r ut fr√• at Per f√∏l tabellen n√∏yaktig, dvs. 272,55 kr pr. time i 2008 og 2009, 285,50 kr pr. time i 2010, 2011, 2012 osv. vert den samla l√∏na hans:\n\ndef periodel√∏n(tal_√•r, timel√∏n):\n    return tal_√•r * 1700 * timel√∏n\n\n# l√∏n kvar periode\np1 = periodel√∏n(2010-2008, 272.55)\np2 = periodel√∏n(2013-2010, 285.50)\np3 = periodel√∏n(2015-2013, 307.30)\np4 = periodel√∏n(2019-2015, 314.00)\np5 = periodel√∏n(2022-2019, 327.60)\np6 = periodel√∏n(2023-2022, 340.10)\n\nsamla_l√∏n = p1 + p2 + p3 + p4 + p5 + p6\n\nprint(f\"Samla l√∏n, Per: {samla_l√∏n:.2f}\")\n\nSamla l√∏n, Per: 7811670.00\n\n\nOm me p√• den andre sida bruker modellen for timel√∏n som me fann i b) s√• kan me bruka den:\n\nsamla_l√∏n = 0\n\n# modell for timel√∏n\ndef g(x):\n    return 278.5 * 1.0151**x\n\n# i fr√• og med 0 til og med 14\n# finn ny √•rsl√∏n og legg til samla l√∏n dei 15 √•ra\nfor i in range(15):\n    samla_l√∏n += 1700 * g(i)\n\nprint(f\"Samla l√∏n, Per: {samla_l√∏n:.2f}\")\n\nSamla l√∏n, Per: 7903823.68\n\n\nSer at skilnaden p√• dei to strategiane er rundt 92 000 kr i l√∏pet av dei 15 √•ra (f.o.m. 2008, t.o.m. 2022).\n\n\nd) L√∏nnskrav\nI 2022 har Per timel√∏n 340,10 kr og Amalie timel√∏n \\(272.55 \\cdot 1.023^{14} \\approx 374,72\\) Viss Per skal ha same timel√∏n som Amalie i 2025 (om 3 √•r) m√•\n\\[340,10 \\cdot x^3 = 374,72 \\cdot 1,023^3\\]\nL√∏yser likninga i Python:\n\nfrom sympy import Symbol, diff, Eq, Reals, solveset\n\n# definerer x\nx = Symbol(\"x\")\n\n# definerer vs og hs av likninga\nvs = 340.10 * x**3\nhs = 374.72 * 1.023**3\n\n# set opp likninga, og l√∏yser ho\nlikning = Eq(vs, hs)\nl√∏ysing = solveset(likning, x, domain=Reals)\n\n# skriv ut svaret\nprint(f\"x = {l√∏ysing.evalf(4)}\")\n\nx = {1.057}\n\n\nDersom kravet skal bli innfridd m√• L√∏na til Per stiga med 5,7% kvart √•r dei neste 3 √•ra."
  },
  {
    "objectID": "lf/S1-V23/index.html#oppg√•ve-2-1",
    "href": "lf/S1-V23/index.html#oppg√•ve-2-1",
    "title": "Eksamen V23 S1",
    "section": "Oppg√•ve 2",
    "text": "Oppg√•ve 2\n\na) P√•stand 1 - logaritmar\nLa \\(x=e\\). D√• er \\(x&gt;0\\) og \\(\\ln(x)=\\ln(e)=1\\). Dermed f√•r me\n\\[\n\\begin{align*}\n    (\\ln(x))^4 &= 4\\ln(x) \\\\\n    1^4 &\\neq 4\\cdot 1\n\\end{align*}\n\\]\nP√•standen er usann\n\n\nb) P√•stand 2 - fjerdegradsfunksjonar\nTalet p√• ekstremalpunkt til ein funksjon er knytt saman med talet p√• nullpunkt til den deriverte til funksjonen.\nDen deriverte til ein fjerdegradsfunksjon er ein tredjegradsfunksjon. Alle tredjegradsfunksjonar har minst eitt nullpunkt.\nSidan alle tredjegradsfunksjonar har minst eitt nullpunkt har alle fjerdegradsfunksjonar minst eitt ekstremalpunkt.\nP√•standen er sann\n\n\nc) P√•stand 3 - Lotto\nKan sj√• p√• dette som hypergeometrisk sannsyn, der populasjon og utval er delt i to grupper, mindre enn 18 og ikkje mindre enn 18.\nDet er 17 av tala som er mindre enn 18, \\(0\\rightarrow 17\\), og 17 tala som er ikkje mindre enn 18, \\(18\\rightarrow 34\\).\nLa \\(X\\) vera antall kuler mindre enn 18. D√• er\n\\[P(X=7) = \\frac{\\left(17 \\atop 7 \\right) \\left(17 \\atop 0 \\right)}{\\left(34 \\atop 7\\right)}\\]\nog samtidig er\n\\[P(X=0) = \\frac{\\left(17 \\atop 0 \\right) \\left(17 \\atop 7 \\right)}{\\left(34 \\atop 7\\right)}\\]\nDermed ser me at \\(P(X=7) = P(X=0)\\).\nP√•standen er sann"
  },
  {
    "objectID": "lf/S1-V23/index.html#oppg√•ve-3-1",
    "href": "lf/S1-V23/index.html#oppg√•ve-3-1",
    "title": "Eksamen V23 S1",
    "section": "Oppg√•ve 3",
    "text": "Oppg√•ve 3\nEit spel med to terningar. Mona finn sannsyn med programmet\n\ng = 0\nfor i in range(1, 7):\n    for j in range(1, 7):\n        if i+j &gt;= 8:\n            g = g + 1\n\nprint(g/36)\n\n0.4166666666666667\n\n\n\na) Sannsyn i programkoden\nMed dette programmet tel Mona opp kor mange av dei moglege utfalla (summen av to terningar) som blir 8 eller st√∏rre. L√∏kka g√•r gjennom alle kombinasjonar av dei to terningane i=1, j=1, i=1, j=2, ‚Ä¶, i=2, j=1 osb.\n\n\nb) Nytt program - tre terningar\nEit anna spel med tre terningar. Gevinst om summen av auge er 7 eller 11. Kan utvida programmet fr√• a). Endrar nemnaren til 216 (\\(6\\cdot 6 \\cdot 6\\)) i siste linja.\n\ng = 0\nfor i in range(1, 7):\n    for j in range(1, 7):\n        for k in range(1, 7):\n            if (i+j+k == 7) or (i+j+k == 11):\n                g = g + 1\n\nprint(g/216)\n\n0.19444444444444445\n\n\nSannsynet for √• vinna dette spelet er \\(0,194\\)."
  },
  {
    "objectID": "lf/S1-V23/index.html#oppg√•ve-4-1",
    "href": "lf/S1-V23/index.html#oppg√•ve-4-1",
    "title": "Eksamen V23 S1",
    "section": "Oppg√•ve 4",
    "text": "Oppg√•ve 4\n\na) Pris 40 kr\nViss \\(p=40\\) les me av grafen at \\(e=2100\\).\nDet vil seie at ein sel 2100 einingar til 40 kr pr. stk.\nDaglege inntekter p√• \\(2100 \\cdot 40 kr = 84 000 kr\\).\n\n\nb) Inntekt 75 000 kr\nSer av grafen at \\(e(p)\\) har konstantledd 4500 og stigningstal -60. (Nedgang fr√• 4500 til 3900 p√• y-aksen n√•r ein g√•r fr√• 0 til 10 p√• x-aksen)\nDvs. \\(e(p) = 4500 - 60p\\).\nDaglege inntekter er tal eiingar gange prisen, \\(e(p)\\cdot p\\).\nL√∏yser likninga \\(e(p)\\cdot p = 75000\\).\n\nfrom sympy import Symbol, diff, Eq, Reals, solveset\n\n# definerer p\np = Symbol(\"p\")\n\n# definerer vs og hs av likninga\nvs = (4500 - 60*p)*p\nhs = 75000\n\n# set opp likninga, og l√∏yser ho\nlikning = Eq(vs, hs)\nl√∏ysing = solveset(likning, p, domain=Reals)\n\n# skriv ut svaret\nprint(f\"p = {l√∏ysing.evalf(4)}\")\n\np = {25.0, 50.0}\n\n\nSer at om prisen er 25 kr eller 50 kr s√• vil dei daglege inntektene bli 75000 kr.\n\n\nc) St√∏rst inntekt\nSidan funksjonen for daglege inntekter er ein konkav andregradsfunksjon (\\((4500-60p)p = -60p^2+45000\\)) er ekstremalpunktet eit toppunkt. Av symmetri i andregradsfunksjonar f√∏lgjer det at toppunktet ligg midt mellom 25 kr og 50 kr.\nPris p√• $(25 kr + 50 kr)/2 = 37,5 kr $ gjev st√∏rst inntekt."
  },
  {
    "objectID": "lf/S1-V23/index.html#oppg√•ve-5-1",
    "href": "lf/S1-V23/index.html#oppg√•ve-5-1",
    "title": "Eksamen V23 S1",
    "section": "Oppg√•ve 5",
    "text": "Oppg√•ve 5\n\na) Bestem sannsyn\nHer kan me g√• ut fr√• at det binomisk sannsyn sidan me har - to utfall i kvart delfors√∏k, kvar bilett (brukt/ikkje brukt) - likt sannsyn for at billetten vert brukt (0,45) i kvart delfors√∏k - uavhengige delfors√∏k (viss me g√•r ut fr√• at dei som f√•r gratisbillettane ikkje p√•verkar kvarande med om dei bruker eller ikkje bruker billetten‚Ä¶)\nLar \\(X\\) vera tal billettar som vert brukt.\nFinn \\(P(X\\geq 600)\\) ved simulering\n\nimport numpy as np\nrng = np.random.default_rng()\n\nN = 10000000 # tal simuleringar\np = 0.45     # P(brukt billett)\nn = 1300     # tal gratisbillettar\n\n# simulerer \nbrukte_billettar = rng.binomial(n, p, size=N)\n\n# finn sannsynet\ngunstige = sum(brukte_billettar &gt;= 600)\nsannsyn = gunstige / N\nprint(f\"P(X ‚â• 600) = {sannsyn:.4f}\")\n\nP(X ‚â• 600) = 0.2097\n\n\nSannynet for at minst 600 av billettane vert brukt er omlag 0,21.\n\n\nb) Finn tal gratisbilettar\nVil finna ut kor mange gratisbillettar dei m√• dela ut dersom sannsynet for at minst 600 blir brukt skal vera over 95 %.\nGjer simuleringa fr√• a) til ein funksjon og testar med fleire og fleire gratisbillettar til sannsynet for at minst 600 blir brukt passerer 95 %.\n\n# sannsynsfunksjon\ndef sannsyn(n):\n    N = 1000000\n    p = 0.45\n\n    # simulerer \n    brukte_billettar = rng.binomial(n, p, size=N)\n\n    # finn sannsynet\n    gunstige = sum(brukte_billettar &gt;= 600)\n    sannsyn = gunstige / N\n\n    return sannsyn\n\nn = 1300\n\n# aukar tal gratisbillettar til sannsynet er 95% eller meir\nwhile sannsyn(n) &lt; 0.95:\n    n += 1\n\nprint(n)\n\n1401\n\n\nDvs. om dei deler ut 1400 bilettar vil det vera over 95 % sannsynleg at minst 600 av dei vert brukt."
  },
  {
    "objectID": "lf/S1-V23/index.html#oppg√•ve-6",
    "href": "lf/S1-V23/index.html#oppg√•ve-6",
    "title": "Eksamen V23 S1",
    "section": "Oppg√•ve 6",
    "text": "Oppg√•ve 6\nSamanhengen mellom lydstyrken \\(L\\) (m√•lt i \\(dB\\)) og lydintensiteten \\(I\\) (m√•lt i \\(W/m^2\\)) er gitt ved\n\\[L = 120 + 10\\cdot \\lg(I)\\]\nSmertegrense for menneske p√• kring 130 \\(dB\\)\n\na) Bestem lydintensitet\nSet inn \\(L=130\\) og l√∏yser likninga for \\(I\\).\n\nfrom sympy import Symbol, diff, Eq, Reals, solveset, log\n\n# definerer I\nI = Symbol(\"I\")\n\n# definerer vs og hs av likninga\nvs = 130\nhs = 120 + 10*log(I, 10)\n\n# set opp likninga, og l√∏yser ho\nlikning = Eq(vs, hs)\nl√∏ysing = solveset(likning, I, domain=Reals)\n\n# skriv ut svaret\nprint(f\"I = {l√∏ysing.evalf(4)}\")\n\nI = {10.0}\n\n\nLydintensiteten er \\(10 W/m^2\\) n√•r lydstyrken er \\(130dB\\).\n\n\nb) Auke i intensitet\nFinn intensiten ved \\(132dB\\).\n\n# definerer vs og hs av likninga\nvs = 132\nhs = 120 + 10*log(I, 10)\n\n# set opp likninga, og l√∏yser ho\nlikning = Eq(vs, hs)\nl√∏ysing = solveset(likning, I, domain=Reals)\n\n# skriv ut svaret\nprint(f\"I = {l√∏ysing.evalf(4)}\")\n\nI = {15.85}\n\n\nLydinsiteten har auka fr√• 10 til 15,85. Det gir oss vekstfaktor \\(15,85 / 10 = 1,581\\).\nAuken i lydintensitet er omlag 58,1 % n√•r ein aukar lydstyrken med \\(2 dB\\).\n\n\nc) Minste avstand til flyet\nEffekten til lyd fr√• lydkjelde, \\(E\\), vil gje lydintensitet \\(I\\) i ein avstand \\(r\\) (m√•lt i \\(m\\)) fr√• lydkjelda vera \\[I = \\frac{E}{4\\pi \\cdot r^2}\\].\nLydstyrke fr√• eit fly er \\(140 dB\\) n√•r ein er \\(50 m\\) fr√• flyet.\nBestem den minste avstanden til flyet der lydstyrken er mindre enn \\(130dB\\).\nFinn intensiteten ved \\(140 dB\\):\n\n# definerer vs og hs av likninga\nvs = 140\nhs = 120 + 10*log(I, 10)\n\n# set opp likninga, og l√∏yser ho\nlikning = Eq(vs, hs)\nl√∏ysing = solveset(likning, I, domain=Reals)\n\n# skriv ut svaret\nprint(f\"I = {l√∏ysing.evalf(4)}\")\n\nI = {100.0}\n\n\nVidare bruker me at \\(I=100\\) for √• finna E. \\[\\begin{align*}\nI &= \\frac{E}{4\\pi\\cdot r^2} \\\\\n100 &= \\frac{E}{4\\pi\\cdot 50^2} \\\\\nE &= 100 \\cdot 4\\pi\\cdot 50^2\n\\end{align*} \\]\nDette gjev oss likninga\n\\[\\begin{align*}\nL &= 120 + 10\\lg(I) \\\\\n&= 120 + 10\\lg\\left(\\frac{E}{4\\pi\\cdot r^2}\\right) \\\\\n&= 120 + 10\\lg\\left(\\frac{100 \\cdot 4\\pi\\cdot 50^2}{4\\pi\\cdot r^2}\\right) \\\\\n&= 120 + 10\\lg\\left(\\frac{100 \\cdot50^2}{r^2}\\right)\n\\end{align*} \\]\nL√∏yser likninga for \\(r\\) n√•r \\(L=130\\).\n\n# definerer r\nr = Symbol(\"r\")\n\n# definerer vs og hs av likninga\nvs = 130\nhs = 120 + 10*log((100*50**2)/(r**2), 10)\n\n# set opp likninga, og l√∏yser ho\nlikning = Eq(vs, hs)\nl√∏ysing = solveset(likning, r, domain=Reals)\n\n# skriv ut svaret\nprint(f\"r = {l√∏ysing.evalf(4)}\")\n\nr = {-158.1, 158.1}\n\n\nDen minste avstanden er 158 meter."
  },
  {
    "objectID": "lf/S1-V22/index.html",
    "href": "lf/S1-V22/index.html",
    "title": "Eksamen V22 S1",
    "section": "",
    "text": "Her er eit forslag til l√∏ysing av v√•reksamen i S1 2022. I del 2 er oppg√•vene stort sett l√∏yst i Python eller CAS.\nEg kan ikkje lova at l√∏ysinga er feilfri‚Ä¶ üòä Gje meg gjerne ein lyd om du ser feil.\n\nMiniatyrbilete: Exam icons created by Freepik - Flaticon\nEksamenssettet finn du hos UDIR: Finn eksamensoppgaver"
  },
  {
    "objectID": "lf/S1-V22/index.html#oppg√•ve-1",
    "href": "lf/S1-V22/index.html#oppg√•ve-1",
    "title": "Eksamen V22 S1",
    "section": "Oppg√•ve 1",
    "text": "Oppg√•ve 1\nSkriv s√• enkelt som r√•d\n\\[ \\begin{align*}\n\\left(2a\\right)^{-1}\\cdot \\left(\\frac{b}{2}\\right)^{-3}\\cdot \\left(a\\cdot b\\right)^3 &= \\frac{1}{2a}\\cdot \\frac{2^3}{b^3}\\cdot a^3 \\cdot b^3 \\\\\n&= \\frac{2^3 \\cdot a^3 \\cdot b^3}{2\\cdot a \\cdot b^3} \\\\\n&= 2^2 \\cdot a \\\\ &= 4a\n\\end{align*}\\]"
  },
  {
    "objectID": "lf/S1-V22/index.html#oppg√•ve-2",
    "href": "lf/S1-V22/index.html#oppg√•ve-2",
    "title": "Eksamen V22 S1",
    "section": "Oppg√•ve 2",
    "text": "Oppg√•ve 2\nDagleg produksjonskostnad for \\(x\\) luer gitt ved \\[E(x)=0,2x+40+\\frac{20000}{x}\\]\nDeriverer \\(E(x)\\)\n\\[E'(x) = 0,2 + 0 + 20000\\cdot \\frac{-1}{x^2} = 0,2 - \\frac{20000}{x^2}\\]\nDermed f√•r me\n\\[E'(100)=0,2-\\frac{20000}{10000} = 0,2-2 = -1,8\\]\nDette betyr at ved 100 produserte einingar vil endringa i produksjonskostnaden vera \\(-1,8\\). Alts√• vil det bli om lag 1,8 kr billegare √• produsere kvar lue om ein aukar produksjonen fr√• 100 til 101."
  },
  {
    "objectID": "lf/S1-V22/index.html#oppg√•ve-3",
    "href": "lf/S1-V22/index.html#oppg√•ve-3",
    "title": "Eksamen V22 S1",
    "section": "Oppg√•ve 3",
    "text": "Oppg√•ve 3\n\\[\n\\begin{align*}\n    \\lim_{x\\rightarrow 3} \\frac{x-3}{x^2+x-12} &= \\lim_{x\\rightarrow 3} \\frac{x-3}{(x+4)(x-3)} \\\\\n    &= \\lim_{x\\rightarrow 3} \\frac{1}{x+4} \\\\\n    &= \\frac{1}{3+4} \\\\\n    &= \\frac{1}{7}\n\\end{align*}\n\\]"
  },
  {
    "objectID": "lf/S1-V22/index.html#oppg√•ve-4",
    "href": "lf/S1-V22/index.html#oppg√•ve-4",
    "title": "Eksamen V22 S1",
    "section": "Oppg√•ve 4",
    "text": "Oppg√•ve 4\nSkal l√∏ysa likninga \\(e^{2x}-e^x=2\\). Bruker at \\(e^{2x}=\\left(e^x\\right)^2\\). Dermed f√•r me \\[\\left(e^x\\right)^2 - e^x = 2\\]\nBytter ut \\(e^x\\) med \\(u\\) og l√∏yser andregradslikninga for \\(u\\)\n\\[\n\\begin{align*}\n    u^2 - u &= 2 \\\\\n    u^2 - u - 2 &= 0 \\\\\n    (u+1)(u-2)&= 0 \\\\\n    u=-1 &\\vee u = 2 \\\\\n    \\text{Som vil seie at} \\\\\n    e^x = -1 &\\vee e^x =2 \\\\\n\\end{align*}\n\\]\nTar logarimten av begge sider for √• f√• \\(x\\) for √• finna \\(x\\). F√•r kun ei l√∏ysing, \\(x = \\ln(2)\\), sidan den naturlege logaritmen kun er definert for positive tal."
  },
  {
    "objectID": "lf/S1-V22/index.html#oppg√•ve-5",
    "href": "lf/S1-V22/index.html#oppg√•ve-5",
    "title": "Eksamen V22 S1",
    "section": "Oppg√•ve 5",
    "text": "Oppg√•ve 5\nSet inn \\(x=7\\) i likninga \\[ \\begin{align*}\n    \\lg(x+3) + \\lg (x) &= \\lg(a) \\\\\n    \\lg(10) + \\lg(7) &= \\lg(a) \\\\\n    \\lg(10\\cdot 7) &= \\lg(a)\n\\end{align*} \\]\nDermed er \\(a=70\\)."
  },
  {
    "objectID": "lf/S1-V22/index.html#oppg√•ve-6",
    "href": "lf/S1-V22/index.html#oppg√•ve-6",
    "title": "Eksamen V22 S1",
    "section": "Oppg√•ve 6",
    "text": "Oppg√•ve 6\n\na) programkode\nN√•r programmet k√∏yrer vil det bli trilla to terningar 1000000 gongar (N). Ein tel opp kor mange av desse kasta summen av terningane blir 9 (gunstige). Til slutt skriv ein ut den relative frekvensen (gunstige/N).\nEleven √∏nsker √• finna ut kva sannsynet for at eit terningkast med to terningar gir summen 9 (eller ein terning kasta to gongar).\n\n\nb) sannsynsrekning\nTel opp antall gunstige utfall (her er det lurt √• teikne t.d. tabell eller valtre).\nDet er \\(4\\) utfall som gjev \\(9\\) som sum. (\\(3+6\\), \\(4+5\\), \\(5+4\\) og \\(6+3\\)).\nVidare er det \\(6\\cdot 6 = 36\\) moglege utfall.\n\\[P(\\text{summen er 9}) = \\frac{\\text{gunstige}}{\\text{moglege}} = \\frac{4}{36}=\\frac{1}{9}\\]"
  },
  {
    "objectID": "lf/S1-V22/index.html#oppg√•ve-1-1",
    "href": "lf/S1-V22/index.html#oppg√•ve-1-1",
    "title": "Eksamen V22 S1",
    "section": "Oppg√•ve 1",
    "text": "Oppg√•ve 1\nTabellen nedanfor viser talet p√• gardsbruk i Noreg for nokre gitte √•rstal.\n\n\n\n√Ör\nTal gardsbruk\n\n\n\n\n1969\n154 977\n\n\n1989\n99 382\n\n\n1999\n68 539\n\n\n2009\n47 688\n\n\n2020\n38 633\n\n\n\n\na) modell for framtida\nPlottar f√∏rst datapunkta for √• f√• ei oversikt over korleis det ser ut\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n√•r = [0, 20, 30, 40, 51]\ng√•rdar = [154977, 99382, 68539, 47688, 38633]\n\nplt.plot(√•r, g√•rdar, \"ro\")\nplt.show()\n\n\n\n\n\n\n\n\nDet kan sj√• ut som om nedgangen vert mindre og mindre. Ser om det kan passa med ein modell for prosentvis nedgang (eksponentiell modell).\nBruker curve_fit for √• finna ein funksjon p√• forma \\(f(x)=a \\cdot b^x\\)\n\nfrom scipy.optimize import curve_fit\n\ndef f(x, a, b):\n    return a*b**x\n\nK, E = curve_fit(f, √•r, g√•rdar)\n\na, b = K\n\nx_verdiar = np.linspace(0, 65, 1000)\n\nplt.plot(x_verdiar, f(x_verdiar, a, b))\nplt.plot(√•r, g√•rdar, \"ro\")\nplt.ylim([0, 160000])\nplt.show()\nprint(f\"f(x)={a:.1f}*{b:.3f}^x\")\n\n\n\n\n\n\n\n\nf(x)=157256.2*0.973^x\n\n\nDet kan sj√• ut som modellen \\[f(x)=157256 \\cdot 0,973^x\\] passar fint med datapunkta.\nI tillegg er det naturleg √• tenka at talet p√• gardsbruk vil ha ein prosentvis nedgang som den i modellen over. P√• 60-70-talet var det mange sm√• g√•rdsbruk som har blitt slukt av st√∏rre g√•rdar. Med tanke p√• at me framleis held p√• med matproduksjon og landbruk, vil denne nedgangen i sm√• gardsbruk (og auken i store) bli mindre og mindre over tid.\n\n\nb) framtida\nReknar ut \\(f(2060-1969)\\):\n\nx = 2060-1969\nframtid = f(x, a, b)\nprint(f\"G√•rdar i 2060: \\nf({x}) = {framtid:.0f}\")\n\nG√•rdar i 2060: \nf(91) = 13248\n\n\nDet er vanskeleg √• seie mykje om dette svaret utan meir bakgrunnskunnskap og andre data. Likevel tenker eg at det er eit rimeleg svar, dersom t.d. automatisering og liknande effektiviserer landbruket, slik at det trengs f√¶rre b√∏nder (og gjerne f√¶rre g√•rdar). P√• den andre sida kan det tenkast at ustabile globale tilh√∏ve p√• matforsyning gjer at talet p√• g√•rdsbruk vert h√∏gare. Som sagt, vanskeleg √• seie noko om.\n\n\nc) nedgang med 1000\nHer kunne me jo l√∏yst likninga \\(f'(x)=-1000\\), men me pr√∏ver oss p√• ein annan framgongsm√•te i Python.\nLagar ei while-l√∏kke som ser p√• skilnaden mellom eit √•r og det neste. Av grafen veit/ser me at i starten er nedgangen mykje st√∏rre enn 1000 i √•ret (ca. 56 000 f√¶rre fr√• 1969 til 1989). Held difor p√• s√• lenge skilnaden p√• to p√•f√∏lgjande √•r er st√∏rre enn 1000 (bruker absoluttverdi)\n\nx = 0\n\nf0 = f(x, a, b)\nf1 = f(x+1, a, b)\n\nwhile abs(f1-f0) &gt;= 1000:\n    x +=1 \n    f0 = f(x, a, b)\n    f1 = f(x+1, a, b)\n\nprint(f\"x = {x}\")\nprint(f\"f({x}) = {f0:.1f}\")\nprint(f\"f({x+1}) = {f1:.1f}\")\nprint(f\"Endring: {(f1-f0):.1f}\")\n\nx = 53\nf(53) = 37224.1\nf(54) = 36225.7\nEndring: -998.4\n\n\nSer at n√•r \\(x=53\\) er nedgangen ca. 1000 g√•rdsbruk. Dvs. kring √•r 2022.\n\n\n\n\n\n\nL√∏yse symbolsk i sympy\n\n\n\nMe kan l√∏ysa likninga \\(f'(x)=-1000\\) med sympy/CAS\n\n\nVis koden\n# importerer aktuelle funksjonar fr√• sympy\nfrom sympy import Symbol, diff, Eq, Reals, solveset\n\n# definerer x\nx = Symbol(\"x\")\n\n# definerer funksjonen og deriverer\nf = a * b**x\ndf = diff(f, x)\n\n# set opp likninga, og l√∏yser den\nlikning = Eq(df, -1000)\nl√∏ysing = solveset(likning, x, domain=Reals)\n\n# skriv ut svaret\nprint(f\"x = {l√∏ysing.evalf(3)}\")\n\n\nx = {53.4}"
  },
  {
    "objectID": "lf/S1-V22/index.html#oppg√•ve-2-1",
    "href": "lf/S1-V22/index.html#oppg√•ve-2-1",
    "title": "Eksamen V22 S1",
    "section": "Oppg√•ve 2",
    "text": "Oppg√•ve 2\n\na) binomisk fors√∏k?\nDersomm dette skal vera eit binomisk fors√∏k m√• me g√• ut fr√• at sannsynet for at kvar av dei best√•r er det same (74 %) og at oppk√∏yringa til kvar av elevane er uavhengige ‚Äúdelfors√∏k‚Äù. Dvs. at om ein elev stryk (eller best√•r) oppk√∏yringa s√• p√•verkar ikkje det resultatet til dei andre. I tillegg er det her slik at kvar delfors√∏k kun har to utfall, best√• og ikkje best√•.\nI praksis vil nok ikkje sannynet vera det samme for kvar elev. Ein har ulike f√∏resetnader, er ulikt f√∏rebudd, vert ulikt p√•verka av nerver/stress osb. I tillegg kan ein tenka seg at om ein av dei stryk (og dei andre f√•r h√∏yra det) s√• kan det p√•verka oppk√∏yringa til nestemann.\n\n\nb) sannsyn for at 8 av 12 best√•r\nFor √• finna dette sannsynet kan me simulera dei 12 oppk√∏yringane mange gongar og telja opp kor mange av dei minst 8 best√•r. Me antar at dette kan sj√•ast p√• som eit binomisk fors√∏k.\n\nimport numpy as np\nrng = np.random.default_rng()\n\nN = 1000000 # tal simuleringar\nn = 12      # tal elevar\np = 0.74    # sannynet for suksess (best√•)\nX = 8       # minst X suksess\n\n# simulerer\noppk√∏yringar = rng.binomial(n, p, size = N)\n\n# tel opp\ngunstige = sum(oppk√∏yringar &gt;= X)\n\n# finn og skriv ut sannsynet\nsannsyn = gunstige/N\nprint(f\"P(X &gt;= 8) = {sannsyn:.4f}\")\n\nP(X &gt;= 8) = 0.8211\n\n\n\n\nc) akkurat 5 gutar og 4 jenter\nSer p√• gutane og jentene for seg. Multipliserer saman sannsyna sidan dei to hendingane er uavhengige.\n\nN = 1000000 # tal simuleringar\nn_g = 7     # tal gutar\nX_g = 5     # gutar som best√•r\nn_j = 5     # tal jenter\nX_j = 4     # jenter som best√•r\np = 0.74    # sannynet for suksess (best√•)\n\n# simulerer\ngutar = rng.binomial(n_g, p, size=N)\njenter = rng.binomial(n_j, p, size=N)\n\n# tel opp\ngunstige_g = sum(gutar == X_g)\ngunstige_j = sum(jenter == X_j)\n\n# finn og skriv ut sannsynet\nsannsyn_g = gunstige_g/N\nsannsyn_j = gunstige_j/N\n\n# hendingane er uavhengige, dermed f√•r me:\nsannsyn = sannsyn_g * sannsyn_j\nprint(f\"P(5 gutar og 4 jenter) = {sannsyn:.4f}\")\n\nP(5 gutar og 4 jenter) = 0.1232"
  },
  {
    "objectID": "lf/S1-V22/index.html#oppg√•ve-3-1",
    "href": "lf/S1-V22/index.html#oppg√•ve-3-1",
    "title": "Eksamen V22 S1",
    "section": "Oppg√•ve 3",
    "text": "Oppg√•ve 3\n70 000 kr p√• konto, med fast m√•nadleg rentesats \\[B(x) = 70000\\cdot 1,003^x\\]\n\na) √•rleg rentesats\n\nprint(1.003**12)\n\n1.03659998028813\n\n\nKnut har ein √•rleg rentesats p√• ca. 3,7 prosent.\n\n\nb) 80 000 kroner\nL√∏yser likninga \\(B(x)=80000\\).\n\nfrom sympy import Symbol, Eq, solveset, Reals\n\nx = Symbol(\"x\")\n\nlikning = Eq(70000*1.003**x, 80000)\nl√∏ysing = solveset(likning, x, domain=Reals)\nprint(l√∏ysing.evalf(3))\n\n{44.6}\n\n\n\nprint(45 // 12)\nprint(45 % 12)\n\n3\n9\n\n\nDet tek 45 m√•nader, 3 √•r og 9 m√•nader, f√∏r bel√∏pet har passert 80000 kr.\n\n\nc) kontinuerleg?\nAksjefond: 2000 kroner inn kvar m√•nad (0,7 prosent avkasting per mnd.)  Konto: 0.3% renter.\n\\(T(x)\\) er den totale verdien av aksjefond og sparekonto.\nSidan han set inn 2000 kroner kvar m√•nad vil funksjonen gjera eit hopp p√• desse tidspunkta, og ikkje vera kontinuerleg.\n\n\nd) meir enn 200 000 kroner?\nPr√∏ver oss fram i Python.\n\n# etter n√∏yaktig 24 m√•nader\nkonto = 70000*1.003**24\nfond = 2000\ntotal = konto + fond\nmnd = 0\n\nwhile total &lt; 200000:\n    konto *= 1.003\n    fond = fond*1.007 + 2000\n    total = konto + fond\n    mnd += 1\n    \nprint(f\"Etter {mnd} m√•nader er det {total:.2f} kr\")\n\nEtter 47 m√•nader er det 200218.45 kr"
  },
  {
    "objectID": "lf/S1-V22/index.html#oppg√•ve-4-1",
    "href": "lf/S1-V22/index.html#oppg√•ve-4-1",
    "title": "Eksamen V22 S1",
    "section": "Oppg√•ve 4",
    "text": "Oppg√•ve 4\nSimulerer i Python.\n\nimport numpy as np\nrng = np.random.default_rng()\n\n# antall kast\nN = 1000000\n\n# dei tre terningane N kast\nt1 = rng.integers(1, 7, N)\nt2 = rng.integers(1, 7, N)\nt3 = rng.integers(1, 7, N)\n\n# produktet av terningane, per kast\nprod = t1 * t2 * t3\n\n# tel opp gunstige utfall\ngunstige = sum(prod &gt; 100)\n\n# finn sannsynet\nsannsyn = gunstige / N\nprint(f\"Sannsynet for √• vinna er {sannsyn:.4f}\")\n\nSannsynet for √• vinna er 0.0924\n\n\nK√∏yrer programmet eit par gongar og ser at resultatet vert ganske likt. Sannsynet for √• vinna er ca. 0,092"
  },
  {
    "objectID": "lf/S1-V22/index.html#oppg√•ve-5-1",
    "href": "lf/S1-V22/index.html#oppg√•ve-5-1",
    "title": "Eksamen V22 S1",
    "section": "Oppg√•ve 5",
    "text": "Oppg√•ve 5\nBreidda p√• rektangelet er \\(2\\cdot a\\) medan h√∏gda er \\(b\\), som er \\(y\\)-verdien til skj√¶ringspunktet mellom linja fr√• \\((0, 2)\\) til \\((2, 0)\\) og \\(x=a\\).\nLinja har stigningstal \\(-1\\) og konstantledd \\(2\\). Dvs. \\(f(x)=2-x\\).\nDermed er h√∏gda til rektangelet \\(2-a\\). Arealet vert d√• \\[T = 2 \\cdot a \\cdot b = 2\\cdot a \\cdot(2-a) = 4a - 2a^2\\]\nDefinerer \\(T(a)\\) som funksjon, deriverer og finn den \\(a\\)-verdien som gjev st√∏rst \\(T\\). (st√∏rst sidan \\(T\\) er ein konkav/‚Äúsur‚Äù parabel).\n\nfrom sympy import Symbol, diff, Eq, solveset, Reals\na = Symbol(\"a\")\n\nT = 4*a - 2*a**2\ndT = diff(T, a)\n\nlikning = Eq(dT, 0)\nl√∏ysing = solveset(likning, a, domain=Reals)\nprint(l√∏ysing)\n\n{1}\n\n\nDet vil seie at \\(a=1\\) gir st√∏rst areal. D√• er \\[T(1)=4\\cdot 1 - 2\\cdot 1^2 = 2\\]\n\\(2\\) er den st√∏rste verdien \\(T\\) kan ha."
  },
  {
    "objectID": "lf/S1-V22/index.html#oppg√•ve-6-1",
    "href": "lf/S1-V22/index.html#oppg√•ve-6-1",
    "title": "Eksamen V22 S1",
    "section": "Oppg√•ve 6",
    "text": "Oppg√•ve 6\nTemperaturen \\(T\\) etter \\(t\\) min er\n\\[\\ln(T-T_0)=-k\\cdot t + r\\]\nder \\(T_0\\) er romtepmeratur og \\(k\\) og \\(r\\) konstantar.\nF√•r oppgitt at - \\(T_0=22\\) - \\(T=82\\) n√•r \\(t=0\\) - \\(T=66\\) n√•r \\(t=2\\)\nDermed har me likningane\n\\[\\begin{align*}\n    \\ln(82-22) &= -k\\cdot 0 + r &&=r \\\\\n    \\ln(66-22) &= -k\\cdot 2 + r &&= r-2k\n\\end{align*} \\]\n\nfrom sympy import Symbol, Eq, nsolve, solveset, Reals, log\n\n# definerer r og k\nr = Symbol(\"r\")\nk = Symbol(\"k\")\n\n# definerer likningane\nl1 = Eq(log(82-22), r)\nl2 = Eq(log(66-22), r-2*k)\n\n# finn numerisk verdi for r og k\nl√∏ysing = nsolve([l1, l2], [r, k], [1,1])\n\n# definerer t og ny likning med verdiar for r og k\nt = Symbol(\"t\")\nr_n = l√∏ysing[0]\nk_n = l√∏ysing[1]\nl_temp = Eq(log(40-22), -k_n * t + r_n)\n\n# l√∏yser for t og skriv ut. \nny_t = solveset(l_temp, t)\nprint(f\"t = {ny_t.evalf(3)}\")\n\nt = {7.76}\n\n\nDet tar rett over 7 min og 45 sek f√∏r temperaturen n√•r 40 grader."
  },
  {
    "objectID": "lf/S1-V22/index.html#oppg√•ve-7",
    "href": "lf/S1-V22/index.html#oppg√•ve-7",
    "title": "Eksamen V22 S1",
    "section": "Oppg√•ve 7",
    "text": "Oppg√•ve 7\nSer p√• dei ulike grafane og ser at\n\nA har\n\nekstremalpunkt i \\(x\\approx -1\\) og \\(x\\approx 1\\)\n\nvoksande f√∏r det f√∏rste ekstremalpunktet (toppunkt)\nsynkande mellom ekstremalpunkta\nvoksande etter det siste ekstremalpunktet (botnpunkt)\n\nnullpunkt (og vendepunkt) i origo\n\ngrafen s√∏kk og brattast her\n\n\nD har\n\nnullpunkt i \\(x\\approx -1\\) og \\(x\\approx 1\\)\nekstremalpunkt i origo (botnpunkt)\n\n\nDermed er A grafen til \\(f\\) og D er grafen til \\(f'\\).\nSer vidare at\n\nB har\n\nnullpunkt i \\(x\\approx 1,5\\)\npositiv f√∏r nullpunktet\nnegativ etter nullpunktet\n\nC har\n\nekstremalpunkt (toppunkt) i \\(x\\approx 1,5\\)\n\n\nDermed er C grafen til \\(g\\) og B er grafen til \\(g'\\)."
  },
  {
    "objectID": "lf/S1-H22/index.html",
    "href": "lf/S1-H22/index.html",
    "title": "Eksamen H22 S1",
    "section": "",
    "text": "Her er eit forslag til l√∏ysing av hausteksamen i S1 2022. I del 2 er oppg√•vene stort sett l√∏yst i Python eller CAS.\nEg kan ikkje lova at l√∏ysinga er feilfri‚Ä¶ üòä Gje meg gjerne ein lyd om du ser feil.\n\nMiniatyrbilete: Exam icons created by Freepik - Flaticon\nEksamenssettet finn du hos UDIR: Finn eksamensoppgaver\n\n\n\n\nSkriv s√• enkelt som r√•d\n\\[ \\begin{align*}\n\\left(2a^{-2}b\\right)^{-1} \\cdot \\left(\\frac{b^2}{a}\\right)^2 &= \\frac{a^2}{2b} \\cdot \\left(\\frac{b^2}{a}\\right)^2 \\\\\n&= \\frac{a^2}{2b} \\cdot \\frac{b^4}{a^2} \\\\\n&= \\frac{b^3}{2}\n\\end{align*}\\]\n\n\n\nFunksjonen \\(O\\) gitt ved \\[O(x)=‚àí0,05x^2 +100x‚àí10 000\\] er ein god modell for overskotet i kroner som ei bedrift har kvar veke, dersom ho produserer og sel \\(x\\) einingar av ei vare.\na) Bestem \\(O'(500)\\). Gi ei tolking av svaret i denne situasjonen\nDeriverer \\(O\\) og finn \\[ O'(x)=-0,1x+100 \\] Dermed er \\[O'(500)=-0,1 \\cdot 500 + 100 = 50\\]\nDette betyr at om ein aukar produksjonen (\\(x\\)) med ei vare, s√• vil overskotet auka med ca. 50 kr.\nb) Kva er det maksimale overskotet denne bedrifta kan ha kvar veke?\nL√∏yser likninga \\(O'(x)=0\\) \\[\\begin{align*} -0,1x+100&=0 \\\\ 0,1x &= 100 \\\\ x &= 1000 \\end{align*} \\]\nDette betyr at overskotet er st√∏rst (\\(O(x)\\) er ein konkav andregradsfunksjon \\(\\Rightarrow\\) toppunkt) n√•r det vert produsert 1000 einingar. Finn overskotet:\n\\[\\begin{align*} O(1000)&=-0,05\\cdot 1000^2 + 100\\cdot 1000 - 10 000 \\\\  &= -50000+100000-10000 \\\\ &= 40000 \\end{align*}\\]\nDet st√∏rste overskotet kvar veke er 40 000 kr.\n\n\n\nL√∏ys likninga \\[ \\begin{align*}\n\\lg(x-3)+\\lg(x) &= 1 \\\\\n\\lg((x-3)x) &= 1 \\qquad \\leftarrow  \\lg(a) + \\lg(b) = \\lg(ab) \\\\\n(x-3)x &= 10^1 \\\\\nx^2 -3x - 10 &= 0 \\\\\n(x+2)(x-5) &= 0 \\qquad \\leftarrow 2-5 = -3 \\text{ og } 2\\cdot -5 = -10 \\\\\nx=-2 &\\vee x = 5\n\\end{align*} \\]\nMen kun \\(x=5\\) er gyldig l√∏ysing, pga. \\(\\lg(x)\\) i den opphavlege likninga.\n\n\n\nBestem grenseverdien \\[\\lim_{h\\rightarrow 0} \\frac{\\left(4+h\\right)^2-4^2}{h}\\]\nDenne kan l√∏ysast ved grenserekning (faktorisering eller L‚ÄôH√¥pital) men‚Ä¶\nSer av uttrykket at dette er definisjonen av den deriverte til \\(x^2\\) n√•r \\(x=4\\). Dermed f√•r me \\[\\begin{align*}\nf(x)&=x^2 \\\\ f'(x) &= 2x \\\\ f'(4) &= 2\\cdot 4 = 8 \\end{align*} \\]\n\n\n\nI ei krukke er det 2 kvite og 6 svarte kuler. Du skal tilfeldig trekkje 2 kuler utan tilbakelegging.\na) Bestem sannsynet for at minst √©i av kulene er kvit.\nTrekk 2 kuler. Utfalla me kan f√• er SS, SK, KS, KK. Viss me lar \\(X\\) vera tal kvite kuler trekt har me d√•\n\\[P(X\\geq 1) = 1 - P(X=0)\\]\nder \\[P(X=0) = \\frac{6}{8}\\cdot\\frac{5}{7}=\\frac{30}{56}=\\frac{15}{28}\\]\ndermed f√•r me \\[P(X\\geq 1)= 1 - \\frac{15}{28} = \\frac{13}{28}\\]\nI ei anna krukke ligg det eit ukjent tal kuler. Her er 2 av kulene kvite, mens resten av kulene er svarte. Du skal tilfeldig trekkje 2 kuler utan tilbakelegging. Du √∏nskjer at sannsynet for at du trekkjer 2 svarte kuler, skal v√¶re minst 50 prosent.\nb) Lag ein algoritme som du kan bruke for √• bestemme det minste talet p√• svarte kuler som det da m√• vere i krukka. Ta med n√∏dvendige formlar som du m√• bruke for √• f√∏lgje algoritmen.\nLa \\(s\\) vera talet svarte kuler og \\(k\\) talet kvite kuler.\n\n\\(k=2\\) og \\(s=2\\) (sidan me m√• minst ha to svarte kuler i krukka) \nfinn sannsynet for √• trekka 2 svarte kuler \\(P(\\text{to svarte}) = \\frac{s}{s+k}\\cdot\\frac{s-1}{s-1+k}\\)\nViss \\(P(\\text{to svarte}) &lt;50%\\) legg til ei svart kule og gjenta 2 og 3. Viss ikkje - g√• til 4. \n\\(s\\) er no det minste talet svarte kuler.\n\n\n\n\n\n\n\n\nUnders√∏kingar viser at 70 prosent av kundane til ein butikk er turistar. Ein dag hadde butikken til saman 145 kundar. Legg n√∏dvendige f√∏resetnader til grunn, og bestem sannsynet for at minst 100 av desse kundane var turistar.\n\nHer er det naturleg √• legga til grunn at - sannsynet for at kvar kunde som kjem er turist eller ikkje er likt for alle kundane (70%) - Om ein kunde er turist eller ikkje er uavhengig om neste kunde er turist eller ikkje\n\\(T\\): kunden er turist\nDermed har me ein situasjon med - delfors√∏k med to utfall (\\(T\\) eller \\(\\bar{T}\\)) - likt sannsyn i alle delfors√∏ka (\\(P(T)=0,7\\) og \\(P(\\bar{T})=1-0,7=0,3\\)) - uavhengige delfors√∏k\nDette er ganske forenkla og i r√∏ynda vil nok ikkje dette vera uavhengige delfors√∏k, sidan turistar ofte opptrer i flokk üòÑ\nBruker f√∏rst simulering for √• bestemma sannsynet. Sjekkar opp mot sannsynskalkulatoren i GeoGebra etterp√•.\n\n\n\n\n\n\nTips\n\n\n\nTa gjerne ein kikk p√• dette innlegget om du treng meir info om grunnleggande simulering med NumPy\n\n\n\nimport numpy as np\nrng = np.random.default_rng()\n\nN = 1000000 # tal simuleringar\n\nn = 145     # tal kundar\np = 0.7     # sannsyn for turist\n\n# trekk kundar\nkundar = rng.binomial(n=n, p=p, size=N)\n\n# finn sannsynet\ngunstige = sum(kundar &gt;= 100)\nsannsyn = gunstige / N\n\nprint(f\"Sannsynet for at det var minst 100 turistar innom er {sannsyn:.4f}\")\n\nSannsynet for at det var minst 100 turistar innom er 0.6454\n\n\nI GeoGebra\nSer at svaret vert det samme i GG:\n\n\n\nüì∑ Sannsynskalkulatoren i GeoGebra Classic 6\n\n\n\n\n\nHar f√•tt oppgitt funksjonen\n\\[f(x)=1-x^2, \\qquad D_f=[0, 1]\\]\nLa \\(a\\in\\langle 0, 1\\rangle\\) og \\(O\\) v√¶re origo. Tangenten til grafen til \\(f\\) i punktet \\(P(a, f(a))\\) skjer \\(x\\)-aksen i punktet \\(A\\) og \\(y\\)-aksen i punktet \\(B\\).\n\nBestem arealet av \\(\\triangle OAB\\) n√•r \\(P\\left(\\frac{1}{2}, \\frac{3}{4}\\right)\\)\n\nBruker CAS og finn arealet av trekanten\n\n\n\nüì∑ Skjermbilete fr√• CAS\n\n\nArealet av trekanten er \\(\\frac{25}{32}\\)\n\nBestem det minste arealet \\(\\triangle OAB\\) kan ha\n\nGjer det samme som i (a) men med \\(a\\) som \\(x\\)-verdien til tangeringspunktet. Finn ein funksjon for arealet, og finn ekstremalpunktet til denne. Viser ved andrederiverttesten at det er eit botnpunkt.\n\n\n\nüì∑ Skjermbilete fr√• CAS\n\n\nDet minste arealet trekanten kan ha er \\(\\frac{4}{9}\\sqrt{3}\\)\n\n\n\n\nTabellen nedanfor viser verdien av den totale vareeksporten fr√• Noreg for nokre √•r i perioden 1980‚Äì2018.\n\nOppg√•va ber f√∏rst om to ulike modellar ein kan bruka for √• seie noko om framtida. Det er litt krevjande med s√• f√• datapunkt og lite kunnskap om kva faktorar som spelar inn her.\nPr√∏ver heller √• finna modellar som kan passa til dei datapunkta me har.\nStartar med √• legga inn punkta og plotta dei for √• f√• oversikt.\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = [0, 10, 20, 30, 38]                 # √•r etter 1980\nv = [91.7, 211.6, 529.8, 788.1, 1000.3] # verdi i mrd. kr.append\n\nplt.plot(x, v, \"ro\")\nplt.show()\n\n\n\n\n\n\n\n\nLagar ein line√¶r funksjon f√∏rst.\n\na_lin, b_lin = np.polyfit(x, v, 1)\nx_verdier = np.linspace(0, 40, 1000)\n\ndef lin(x):\n    return a_lin*x + b_lin\n\nplt.plot(x, v, \"ro\")\nplt.plot(x_verdier, lin(x_verdier))\nplt.show()\n\n# Skriv ut funksjoneuttrykket\nprint(f\"f_lin(x) = {a_lin:.2f}x + {b_lin:.2f}\")\n\n\n\n\n\n\n\n\nf_lin(x) = 24.90x + 36.32\n\n\nPr√∏ver vidare √• laga ein eksponentialfunksjon p√• forma \\(g(x) = a\\cdot b^x\\) for √• sj√• om det kan passa med prosentvis auke.\n\nfrom scipy.optimize import curve_fit\n\ndef eksp(x, a, b):\n    return a * b**x\n\n# finn passande funksjon\nK, E = curve_fit(eksp, x, v)\na_eksp, b_eksp = K\n\nplt.plot(x, v, \"ro\")\nplt.plot(x_verdier, eksp(x_verdier, a_eksp, b_eksp))\nplt.show()\n\n# Skriv ut funksjoneuttrykket\nprint(f\"f_eksp(x) = {a_eksp:.2f} + {b_eksp:.2f}^x\")\n\n\n\n\n\n\n\n\nf_eksp(x) = 173.29 + 1.05^x\n\n\nPlottar begge modellane med datapunkta i samme figur for √• samanlikna.\n\nplt.plot(x, v, \"ko\")\nplt.plot(x_verdier, lin(x_verdier), \"r\", label=\"f_lin\")\nplt.plot(x_verdier, eksp(x_verdier, a_eksp, b_eksp), \"b\", label=\"f_eksp\")\n\nplt.xlabel(\"√Ör etter 1980\")\nplt.ylabel(\"Verdi vareeksport i mrd. kr.\")\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\nDet ser ut som om den line√¶re funksjonen passar best. Kallar denne for \\(g\\). \\[ g(x) = 24.90x + 36.32\\]\nVidare er me ute etter den gjennomsnittlege √•rlege veksten mellom 2015 og 2025 for dei to modellane.\n\nsnitt_lin = (lin(45)-lin(35))/10\nsnitt_eksp = (eksp(45, a_eksp, b_eksp)-eksp(35, a_eksp, b_eksp))/10\n\nprint(f\"snitt lin:  {snitt_lin:.2f} mrd.kr. pr. √•r\\nsnitt eksp: {snitt_eksp:.2f} mrd.kr. pr. √•r\")\n\nsnitt lin:  24.90 mrd.kr. pr. √•r\nsnitt eksp: 55.35 mrd.kr. pr. √•r\n\n\n\nFunksjonen \\(f\\) gitt ved \\[f(x)=91\\cdot 1,057^x\\] er ein modell for verdien av den totale vareimporten til Noreg i milliardar kroner, \\(x\\) √•r etter 1980 . N√•r vil verdien av vareimporten til Noreg vere 10 gonger st√∏rre enn det han var i 1980?\n\nHer m√• me l√∏ysa likninga \\[1,057^x = 10\\]\nBruker CAS i Python üòé\n\nfrom sympy import *\nx = Symbol(\"x\")\n\n# definerer likning (vs, hs) og l√∏yser\neq = Eq(1.057**x, 10)\nl√∏ysing = solve(eq)\n\nprint(f\"x = {l√∏ysing[0]:.2f}\")\n\nx = 41.54\n\n\nI 2022, 42 √•r etter 1980, er vareimporten (litt st√∏rre enn) 10 gongar s√• stor som i 1980.\n\nDersom verdien av vareeksporten i eit land er st√∏rre enn verdien av vareimporten, seier vi at landet har eit handelsoverskot.\n\nSkal no finna ut kva tid det er handelsoverkot.\n\n# definerer funksjonane\ndef imprt(x):\n    return 91 * 1.057**x\n\ndef eksprt(x): \n    return 24.90*x + 36.32\n\n# lagar x-verdiar\nx = np.linspace(0, 50, 1000)\n\n# ser ca. kor dei kryssar kvarandre \nplt.plot(x, imprt(x), \"r\", label=\"import\")\nplt.plot(x, eksprt(x), \"g\", label=\"eksport\")\nplt.grid()\n\n# ca. verdi for det f√∏rste skj√¶ringspunktet, x1\nx_1 = 2\n\n# finn x1\nwhile imprt(x_1) &gt; eksprt(x_1):\n    x_1 += 0.1\n\n# plottar linja og skriv ut\nplt.axvline(x_1)\nprint(f\"Skj√¶ringspunkt 1: {x_1:.1f}\")\n\n# ca. verdi for det andre skj√¶ringspunktet, x2\nx_2 = 45\n\n# finn x2\nwhile imprt(x_2) &lt; eksprt(x_2):\n    x_2 += 0.1\n\n# plottar linja og skriv ut\nplt.axvline(x_2)\nprint(f\"Skj√¶ringspunkt 2: {x_2:.1f}\")\n\nplt.legend()\nplt.show()\n\nSkj√¶ringspunkt 1: 2.9\nSkj√¶ringspunkt 2: 46.5\n\n\n\n\n\n\n\n\n\nDvs. det er handelsoverskot ca. fr√• starten av 1983 til midt i 2026 ut fr√• modellane.\n\n\n\n\nTenk deg at du har ein terning med n sider der talet p√• auge p√• sidene er \\(1, 2, ... , n\\). N√•r du kastar terningen, er alle utfalla like sannsynlege. Du kastar terningen to gonger. La \\(X\\) vere produktet av talet p√• auge i dei to kasta. Dersom til d√∏mes f√∏rste kast gir 7 og andre kast gir 3, blir \\(X\\) lik \\(3\\cdot 7 = 21\\).\n\nStartar med √• la \\(n=10\\) og pr√∏ver √• finna \\(P(X &gt; 60)\\)\n\nimport numpy as np\nrng = np.random.default_rng()\n\nN = 1000000\nn = 10\n\n# triller ternignar\nt1 = rng.integers(1, n+1, size=N)\nt2 = rng.integers(1, n+1, size=N)\n\n# finn produktet av dei to kasta\nprod = t1 * t2\n\n# finn gunstige utfall og sannsynet\ngunstige = sum(prod &gt; 60)\nsannsyn = gunstige / N\n\nprint(f\"N√•r n = 10: \\nP(X &gt; 60) = {sannsyn:.4f}\")\n\nN√•r n = 10: \nP(X &gt; 60) = 0.1302\n\n\nS√• vil me finna ut kva den minste verdien av \\(n\\) som gjer at \\(P(X&gt;60) &gt; 0.5\\) er. Bruker koden vidare, men gjer han om til ein funksjon med input n og output sannsyn. D√• kan ein pr√∏va seg fram med ei while-l√∏kke.\n\ndef trilling(n):\n    N = 1000000\n\n    # triller ternignar\n    t1 = rng.integers(1, n+1, size=N)\n    t2 = rng.integers(1, n+1, size=N)\n\n    # finn produktet av dei to kasta\n    prod = t1 * t2\n\n    # finn gunstige utfall og sannsynet\n    gunstige = sum(prod &gt; 60)\n    sannsyn = gunstige / N\n\n    return sannsyn\n\n# Pr√∏ver oss fram\nn = 10\n\nwhile trilling(n) &lt; 0.5:\n    n += 1\n\nprint(f\"n = {n}: \\nP(X &gt; 60) = {trilling(n):.4f}\")\n\nn = 17: \nP(X &gt; 60) = 0.5062\n\n\n17 er alts√• den minste verdien \\(n\\) kan ha for at \\(P(X&gt;60) &gt; 0.5\\).\n\n\n\n\nArnt har f√•tt ein sjukdom og m√• ta ein tablett som inneheld 100 mg av eit verkestoff. Funksjonen \\(f\\) gitt ved \\[f(t)=100\\cdot e^{‚àí0,012t}\\] er ein modell for kor mykje av verkestoffet til tabletten som er igjen i kroppen \\(t\\) timar etter at han tok den.\n\nF√∏rst skal me finna ut kor mykje stoff som er i kroppen 24 timar etter at han har tatt ein tabelett.\nStartar med √• definera funksjonen.\n\nimport numpy as np\n\ndef f(t):\n    return 100 * np.exp(-0.012*t)\n\netter24 = f(24)\n\nprint(f\"Verkestoff etter 24 timar: {etter24:.2f} mg\")\n\nVerkestoff etter 24 timar: 74.98 mg\n\n\nVidare f√•r me opplyst at\n\nArnt tek ein tablett kvar morgon klokka √•tte. La \\(g\\) vere ein funksjon som beskriv mengda verkestoff han har i kroppen \\(t\\) timar etter at han tok den f√∏rste tabletten.\n\nDet skal argumenterast for om \\(g\\) er ein kontinuerlig funksjon eller ikkje.\nAt den nye tabeletten skal bli tatt opp umiddelbart (at niv√• verkestoff i kroppen gjer eit hopp med 100 mg) er litt vanskeleg √• sj√• for seg om ein tenker at ‚Äúi kroppen‚Äù = ‚Äúi blodet‚Äù. Om ein tenker at ‚Äúi kroppen‚Äù er innafor munnen, s√• kan ein argumentera for at funksjonen er diskontinuerleg med eit slikt hopp‚Ä¶\nS√• skal me finna ut kor mykje verkestoff Arnt har i kroppen like f√∏r den 6. tabletten. Bruker funksjonen fr√• tidlegare. Hugs at \\(t\\) er timar her og ikkje d√∏gn. Startar p√• 1 sidan den ‚Äúnyaste‚Äù tabeletten (nr. 5) har vore eitt d√∏gn i kroppen.\n\nverkestoff = 0\n\nfor i in range(1, 6):\n    verkestoff += f(i*24)\n\nprint(f\"Rett f√∏r tab.nr. 6 er det {verkestoff:.2f} mg i kroppen\")\n\nRett f√∏r tab.nr. 6 er det 228.63 mg i kroppen\n\n\nTil slutt skal me finna ut kor mykje verkestoff Arnt vil ha i kroppen om han tek ein tablett i d√∏gnet over eit lengre tidsrom. Bruker funksjonen og l√∏kka fr√• tidlegare. Startar p√• 0 no sidan me ikkje lenger ser p√• ‚Äúrett f√∏r‚Äù ein tablett. Pr√∏ver meg fram for √• finna ut kor langt fram me m√• sj√• for √• finna taket.\n\nverkestoff = 0\n\nfor i in range(0, 25):\n    verkestoff += f(i*24)\n    print(f\"Dag {i+1:2n}: {verkestoff:.2f} mg\")\n\nDag  1: 100.00 mg\nDag  2: 174.98 mg\nDag  3: 231.19 mg\nDag  4: 273.34 mg\nDag  5: 304.94 mg\nDag  6: 328.63 mg\nDag  7: 346.39 mg\nDag  8: 359.71 mg\nDag  9: 369.70 mg\nDag 10: 377.19 mg\nDag 11: 382.80 mg\nDag 12: 387.01 mg\nDag 13: 390.16 mg\nDag 14: 392.53 mg\nDag 15: 394.30 mg\nDag 16: 395.63 mg\nDag 17: 396.63 mg\nDag 18: 397.38 mg\nDag 19: 397.94 mg\nDag 20: 398.36 mg\nDag 21: 398.67 mg\nDag 22: 398.91 mg\nDag 23: 399.09 mg\nDag 24: 399.22 mg\nDag 25: 399.32 mg\n\n\nDet ser ut som Arnt ikkje vil overstiga 400 mg verkestoff i kroppen p√• lang sikt.\n\n\n\nEin funksjon \\(f\\) er gitt ved \\[f(x)=2x+5+\\frac{1}{x-1}\\]\nL√∏yser oppg√•va i CAS.\na) For kva verdiar av \\(k\\) har likninga \\(f'(x)=k\\) l√∏ysing?\n\n\n\nüì∑ Skjermbilete av CAS\n\n\nL√∏yser liknigna. Ser at \\(k=2\\) gir \\(0\\) i nemnar.\nLikninga har l√∏ysing for \\(k&lt;2\\)\nb) Vel ulike verdiar av \\(k\\), og beskriv symmetrien i l√∏ysingane av likninga \\(f'(x)=k\\) for kvar av desse verdiane\nPr√∏ver tre ulike verdiar for \\(k\\) og ser at alle er symmetriske om linja \\(x=1\\).\n\n\n\nüì∑ Skjermbilete av CAS\n\n\nLa \\(g\\) vere ein funksjon som kan skrivast p√• forma \\[g(x)=a\\cdot x + b + \\frac{1}{x+d}\\]\nc) For kva verdiar av \\(a\\) har likninga \\(g'(x)=4\\) l√∏ysing?\nL√∏yser likninga og ser at likninga har l√∏ysing n√•r \\(a&gt;4\\).\n\n\n\nüì∑ Skjermbilete av CAS\n\n\nLa no \\(a=3\\).\nd) Utforsk og beskriv l√∏ysingane til likninga \\(g'(x)=k\\) for ulike verdiar av \\(k\\).\nSer at no er l√∏ysingane symmetriske om \\(x=-d\\).\n\n\n\nüì∑ Skjermbilete av CAS\n\n\ne) Bestem \\(b\\) og \\(d\\) slik at \\(g'(-1)=g'(5)\\) og \\(g(1)=7\\).\nDersom \\(g'(-1)=g'(5)\\) m√• l√∏ysingane til likninga \\(g'(x)=k\\) vera symmetrisk om \\(x=\\frac{-1+5}{2}=2\\).  Dvs. \\(-d=2 \\Rightarrow d = -2\\).\nD√• er \\[g(x) = 3x + b + \\frac{1}{x-2}\\] og vidare finn me \\(b\\) ved √• l√∏ysa likninga \\(g(1)=7\\)\n\n\n\nüì∑ Skjermbilete av CAS\n\n\nOg me st√•r att med \\[g(x) = 3x + 5 + \\frac{1}{x-2}\\]"
  },
  {
    "objectID": "lf/S1-H22/index.html#del-1",
    "href": "lf/S1-H22/index.html#del-1",
    "title": "Eksamen H22 S1",
    "section": "",
    "text": "Skriv s√• enkelt som r√•d\n\\[ \\begin{align*}\n\\left(2a^{-2}b\\right)^{-1} \\cdot \\left(\\frac{b^2}{a}\\right)^2 &= \\frac{a^2}{2b} \\cdot \\left(\\frac{b^2}{a}\\right)^2 \\\\\n&= \\frac{a^2}{2b} \\cdot \\frac{b^4}{a^2} \\\\\n&= \\frac{b^3}{2}\n\\end{align*}\\]\n\n\n\nFunksjonen \\(O\\) gitt ved \\[O(x)=‚àí0,05x^2 +100x‚àí10 000\\] er ein god modell for overskotet i kroner som ei bedrift har kvar veke, dersom ho produserer og sel \\(x\\) einingar av ei vare.\na) Bestem \\(O'(500)\\). Gi ei tolking av svaret i denne situasjonen\nDeriverer \\(O\\) og finn \\[ O'(x)=-0,1x+100 \\] Dermed er \\[O'(500)=-0,1 \\cdot 500 + 100 = 50\\]\nDette betyr at om ein aukar produksjonen (\\(x\\)) med ei vare, s√• vil overskotet auka med ca. 50 kr.\nb) Kva er det maksimale overskotet denne bedrifta kan ha kvar veke?\nL√∏yser likninga \\(O'(x)=0\\) \\[\\begin{align*} -0,1x+100&=0 \\\\ 0,1x &= 100 \\\\ x &= 1000 \\end{align*} \\]\nDette betyr at overskotet er st√∏rst (\\(O(x)\\) er ein konkav andregradsfunksjon \\(\\Rightarrow\\) toppunkt) n√•r det vert produsert 1000 einingar. Finn overskotet:\n\\[\\begin{align*} O(1000)&=-0,05\\cdot 1000^2 + 100\\cdot 1000 - 10 000 \\\\  &= -50000+100000-10000 \\\\ &= 40000 \\end{align*}\\]\nDet st√∏rste overskotet kvar veke er 40 000 kr.\n\n\n\nL√∏ys likninga \\[ \\begin{align*}\n\\lg(x-3)+\\lg(x) &= 1 \\\\\n\\lg((x-3)x) &= 1 \\qquad \\leftarrow  \\lg(a) + \\lg(b) = \\lg(ab) \\\\\n(x-3)x &= 10^1 \\\\\nx^2 -3x - 10 &= 0 \\\\\n(x+2)(x-5) &= 0 \\qquad \\leftarrow 2-5 = -3 \\text{ og } 2\\cdot -5 = -10 \\\\\nx=-2 &\\vee x = 5\n\\end{align*} \\]\nMen kun \\(x=5\\) er gyldig l√∏ysing, pga. \\(\\lg(x)\\) i den opphavlege likninga.\n\n\n\nBestem grenseverdien \\[\\lim_{h\\rightarrow 0} \\frac{\\left(4+h\\right)^2-4^2}{h}\\]\nDenne kan l√∏ysast ved grenserekning (faktorisering eller L‚ÄôH√¥pital) men‚Ä¶\nSer av uttrykket at dette er definisjonen av den deriverte til \\(x^2\\) n√•r \\(x=4\\). Dermed f√•r me \\[\\begin{align*}\nf(x)&=x^2 \\\\ f'(x) &= 2x \\\\ f'(4) &= 2\\cdot 4 = 8 \\end{align*} \\]\n\n\n\nI ei krukke er det 2 kvite og 6 svarte kuler. Du skal tilfeldig trekkje 2 kuler utan tilbakelegging.\na) Bestem sannsynet for at minst √©i av kulene er kvit.\nTrekk 2 kuler. Utfalla me kan f√• er SS, SK, KS, KK. Viss me lar \\(X\\) vera tal kvite kuler trekt har me d√•\n\\[P(X\\geq 1) = 1 - P(X=0)\\]\nder \\[P(X=0) = \\frac{6}{8}\\cdot\\frac{5}{7}=\\frac{30}{56}=\\frac{15}{28}\\]\ndermed f√•r me \\[P(X\\geq 1)= 1 - \\frac{15}{28} = \\frac{13}{28}\\]\nI ei anna krukke ligg det eit ukjent tal kuler. Her er 2 av kulene kvite, mens resten av kulene er svarte. Du skal tilfeldig trekkje 2 kuler utan tilbakelegging. Du √∏nskjer at sannsynet for at du trekkjer 2 svarte kuler, skal v√¶re minst 50 prosent.\nb) Lag ein algoritme som du kan bruke for √• bestemme det minste talet p√• svarte kuler som det da m√• vere i krukka. Ta med n√∏dvendige formlar som du m√• bruke for √• f√∏lgje algoritmen.\nLa \\(s\\) vera talet svarte kuler og \\(k\\) talet kvite kuler.\n\n\\(k=2\\) og \\(s=2\\) (sidan me m√• minst ha to svarte kuler i krukka) \nfinn sannsynet for √• trekka 2 svarte kuler \\(P(\\text{to svarte}) = \\frac{s}{s+k}\\cdot\\frac{s-1}{s-1+k}\\)\nViss \\(P(\\text{to svarte}) &lt;50%\\) legg til ei svart kule og gjenta 2 og 3. Viss ikkje - g√• til 4. \n\\(s\\) er no det minste talet svarte kuler."
  },
  {
    "objectID": "lf/S1-H22/index.html#del-2",
    "href": "lf/S1-H22/index.html#del-2",
    "title": "Eksamen H22 S1",
    "section": "",
    "text": "Unders√∏kingar viser at 70 prosent av kundane til ein butikk er turistar. Ein dag hadde butikken til saman 145 kundar. Legg n√∏dvendige f√∏resetnader til grunn, og bestem sannsynet for at minst 100 av desse kundane var turistar.\n\nHer er det naturleg √• legga til grunn at - sannsynet for at kvar kunde som kjem er turist eller ikkje er likt for alle kundane (70%) - Om ein kunde er turist eller ikkje er uavhengig om neste kunde er turist eller ikkje\n\\(T\\): kunden er turist\nDermed har me ein situasjon med - delfors√∏k med to utfall (\\(T\\) eller \\(\\bar{T}\\)) - likt sannsyn i alle delfors√∏ka (\\(P(T)=0,7\\) og \\(P(\\bar{T})=1-0,7=0,3\\)) - uavhengige delfors√∏k\nDette er ganske forenkla og i r√∏ynda vil nok ikkje dette vera uavhengige delfors√∏k, sidan turistar ofte opptrer i flokk üòÑ\nBruker f√∏rst simulering for √• bestemma sannsynet. Sjekkar opp mot sannsynskalkulatoren i GeoGebra etterp√•.\n\n\n\n\n\n\nTips\n\n\n\nTa gjerne ein kikk p√• dette innlegget om du treng meir info om grunnleggande simulering med NumPy\n\n\n\nimport numpy as np\nrng = np.random.default_rng()\n\nN = 1000000 # tal simuleringar\n\nn = 145     # tal kundar\np = 0.7     # sannsyn for turist\n\n# trekk kundar\nkundar = rng.binomial(n=n, p=p, size=N)\n\n# finn sannsynet\ngunstige = sum(kundar &gt;= 100)\nsannsyn = gunstige / N\n\nprint(f\"Sannsynet for at det var minst 100 turistar innom er {sannsyn:.4f}\")\n\nSannsynet for at det var minst 100 turistar innom er 0.6454\n\n\nI GeoGebra\nSer at svaret vert det samme i GG:\n\n\n\nüì∑ Sannsynskalkulatoren i GeoGebra Classic 6\n\n\n\n\n\nHar f√•tt oppgitt funksjonen\n\\[f(x)=1-x^2, \\qquad D_f=[0, 1]\\]\nLa \\(a\\in\\langle 0, 1\\rangle\\) og \\(O\\) v√¶re origo. Tangenten til grafen til \\(f\\) i punktet \\(P(a, f(a))\\) skjer \\(x\\)-aksen i punktet \\(A\\) og \\(y\\)-aksen i punktet \\(B\\).\n\nBestem arealet av \\(\\triangle OAB\\) n√•r \\(P\\left(\\frac{1}{2}, \\frac{3}{4}\\right)\\)\n\nBruker CAS og finn arealet av trekanten\n\n\n\nüì∑ Skjermbilete fr√• CAS\n\n\nArealet av trekanten er \\(\\frac{25}{32}\\)\n\nBestem det minste arealet \\(\\triangle OAB\\) kan ha\n\nGjer det samme som i (a) men med \\(a\\) som \\(x\\)-verdien til tangeringspunktet. Finn ein funksjon for arealet, og finn ekstremalpunktet til denne. Viser ved andrederiverttesten at det er eit botnpunkt.\n\n\n\nüì∑ Skjermbilete fr√• CAS\n\n\nDet minste arealet trekanten kan ha er \\(\\frac{4}{9}\\sqrt{3}\\)\n\n\n\n\nTabellen nedanfor viser verdien av den totale vareeksporten fr√• Noreg for nokre √•r i perioden 1980‚Äì2018.\n\nOppg√•va ber f√∏rst om to ulike modellar ein kan bruka for √• seie noko om framtida. Det er litt krevjande med s√• f√• datapunkt og lite kunnskap om kva faktorar som spelar inn her.\nPr√∏ver heller √• finna modellar som kan passa til dei datapunkta me har.\nStartar med √• legga inn punkta og plotta dei for √• f√• oversikt.\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = [0, 10, 20, 30, 38]                 # √•r etter 1980\nv = [91.7, 211.6, 529.8, 788.1, 1000.3] # verdi i mrd. kr.append\n\nplt.plot(x, v, \"ro\")\nplt.show()\n\n\n\n\n\n\n\n\nLagar ein line√¶r funksjon f√∏rst.\n\na_lin, b_lin = np.polyfit(x, v, 1)\nx_verdier = np.linspace(0, 40, 1000)\n\ndef lin(x):\n    return a_lin*x + b_lin\n\nplt.plot(x, v, \"ro\")\nplt.plot(x_verdier, lin(x_verdier))\nplt.show()\n\n# Skriv ut funksjoneuttrykket\nprint(f\"f_lin(x) = {a_lin:.2f}x + {b_lin:.2f}\")\n\n\n\n\n\n\n\n\nf_lin(x) = 24.90x + 36.32\n\n\nPr√∏ver vidare √• laga ein eksponentialfunksjon p√• forma \\(g(x) = a\\cdot b^x\\) for √• sj√• om det kan passa med prosentvis auke.\n\nfrom scipy.optimize import curve_fit\n\ndef eksp(x, a, b):\n    return a * b**x\n\n# finn passande funksjon\nK, E = curve_fit(eksp, x, v)\na_eksp, b_eksp = K\n\nplt.plot(x, v, \"ro\")\nplt.plot(x_verdier, eksp(x_verdier, a_eksp, b_eksp))\nplt.show()\n\n# Skriv ut funksjoneuttrykket\nprint(f\"f_eksp(x) = {a_eksp:.2f} + {b_eksp:.2f}^x\")\n\n\n\n\n\n\n\n\nf_eksp(x) = 173.29 + 1.05^x\n\n\nPlottar begge modellane med datapunkta i samme figur for √• samanlikna.\n\nplt.plot(x, v, \"ko\")\nplt.plot(x_verdier, lin(x_verdier), \"r\", label=\"f_lin\")\nplt.plot(x_verdier, eksp(x_verdier, a_eksp, b_eksp), \"b\", label=\"f_eksp\")\n\nplt.xlabel(\"√Ör etter 1980\")\nplt.ylabel(\"Verdi vareeksport i mrd. kr.\")\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\nDet ser ut som om den line√¶re funksjonen passar best. Kallar denne for \\(g\\). \\[ g(x) = 24.90x + 36.32\\]\nVidare er me ute etter den gjennomsnittlege √•rlege veksten mellom 2015 og 2025 for dei to modellane.\n\nsnitt_lin = (lin(45)-lin(35))/10\nsnitt_eksp = (eksp(45, a_eksp, b_eksp)-eksp(35, a_eksp, b_eksp))/10\n\nprint(f\"snitt lin:  {snitt_lin:.2f} mrd.kr. pr. √•r\\nsnitt eksp: {snitt_eksp:.2f} mrd.kr. pr. √•r\")\n\nsnitt lin:  24.90 mrd.kr. pr. √•r\nsnitt eksp: 55.35 mrd.kr. pr. √•r\n\n\n\nFunksjonen \\(f\\) gitt ved \\[f(x)=91\\cdot 1,057^x\\] er ein modell for verdien av den totale vareimporten til Noreg i milliardar kroner, \\(x\\) √•r etter 1980 . N√•r vil verdien av vareimporten til Noreg vere 10 gonger st√∏rre enn det han var i 1980?\n\nHer m√• me l√∏ysa likninga \\[1,057^x = 10\\]\nBruker CAS i Python üòé\n\nfrom sympy import *\nx = Symbol(\"x\")\n\n# definerer likning (vs, hs) og l√∏yser\neq = Eq(1.057**x, 10)\nl√∏ysing = solve(eq)\n\nprint(f\"x = {l√∏ysing[0]:.2f}\")\n\nx = 41.54\n\n\nI 2022, 42 √•r etter 1980, er vareimporten (litt st√∏rre enn) 10 gongar s√• stor som i 1980.\n\nDersom verdien av vareeksporten i eit land er st√∏rre enn verdien av vareimporten, seier vi at landet har eit handelsoverskot.\n\nSkal no finna ut kva tid det er handelsoverkot.\n\n# definerer funksjonane\ndef imprt(x):\n    return 91 * 1.057**x\n\ndef eksprt(x): \n    return 24.90*x + 36.32\n\n# lagar x-verdiar\nx = np.linspace(0, 50, 1000)\n\n# ser ca. kor dei kryssar kvarandre \nplt.plot(x, imprt(x), \"r\", label=\"import\")\nplt.plot(x, eksprt(x), \"g\", label=\"eksport\")\nplt.grid()\n\n# ca. verdi for det f√∏rste skj√¶ringspunktet, x1\nx_1 = 2\n\n# finn x1\nwhile imprt(x_1) &gt; eksprt(x_1):\n    x_1 += 0.1\n\n# plottar linja og skriv ut\nplt.axvline(x_1)\nprint(f\"Skj√¶ringspunkt 1: {x_1:.1f}\")\n\n# ca. verdi for det andre skj√¶ringspunktet, x2\nx_2 = 45\n\n# finn x2\nwhile imprt(x_2) &lt; eksprt(x_2):\n    x_2 += 0.1\n\n# plottar linja og skriv ut\nplt.axvline(x_2)\nprint(f\"Skj√¶ringspunkt 2: {x_2:.1f}\")\n\nplt.legend()\nplt.show()\n\nSkj√¶ringspunkt 1: 2.9\nSkj√¶ringspunkt 2: 46.5\n\n\n\n\n\n\n\n\n\nDvs. det er handelsoverskot ca. fr√• starten av 1983 til midt i 2026 ut fr√• modellane.\n\n\n\n\nTenk deg at du har ein terning med n sider der talet p√• auge p√• sidene er \\(1, 2, ... , n\\). N√•r du kastar terningen, er alle utfalla like sannsynlege. Du kastar terningen to gonger. La \\(X\\) vere produktet av talet p√• auge i dei to kasta. Dersom til d√∏mes f√∏rste kast gir 7 og andre kast gir 3, blir \\(X\\) lik \\(3\\cdot 7 = 21\\).\n\nStartar med √• la \\(n=10\\) og pr√∏ver √• finna \\(P(X &gt; 60)\\)\n\nimport numpy as np\nrng = np.random.default_rng()\n\nN = 1000000\nn = 10\n\n# triller ternignar\nt1 = rng.integers(1, n+1, size=N)\nt2 = rng.integers(1, n+1, size=N)\n\n# finn produktet av dei to kasta\nprod = t1 * t2\n\n# finn gunstige utfall og sannsynet\ngunstige = sum(prod &gt; 60)\nsannsyn = gunstige / N\n\nprint(f\"N√•r n = 10: \\nP(X &gt; 60) = {sannsyn:.4f}\")\n\nN√•r n = 10: \nP(X &gt; 60) = 0.1302\n\n\nS√• vil me finna ut kva den minste verdien av \\(n\\) som gjer at \\(P(X&gt;60) &gt; 0.5\\) er. Bruker koden vidare, men gjer han om til ein funksjon med input n og output sannsyn. D√• kan ein pr√∏va seg fram med ei while-l√∏kke.\n\ndef trilling(n):\n    N = 1000000\n\n    # triller ternignar\n    t1 = rng.integers(1, n+1, size=N)\n    t2 = rng.integers(1, n+1, size=N)\n\n    # finn produktet av dei to kasta\n    prod = t1 * t2\n\n    # finn gunstige utfall og sannsynet\n    gunstige = sum(prod &gt; 60)\n    sannsyn = gunstige / N\n\n    return sannsyn\n\n# Pr√∏ver oss fram\nn = 10\n\nwhile trilling(n) &lt; 0.5:\n    n += 1\n\nprint(f\"n = {n}: \\nP(X &gt; 60) = {trilling(n):.4f}\")\n\nn = 17: \nP(X &gt; 60) = 0.5062\n\n\n17 er alts√• den minste verdien \\(n\\) kan ha for at \\(P(X&gt;60) &gt; 0.5\\).\n\n\n\n\nArnt har f√•tt ein sjukdom og m√• ta ein tablett som inneheld 100 mg av eit verkestoff. Funksjonen \\(f\\) gitt ved \\[f(t)=100\\cdot e^{‚àí0,012t}\\] er ein modell for kor mykje av verkestoffet til tabletten som er igjen i kroppen \\(t\\) timar etter at han tok den.\n\nF√∏rst skal me finna ut kor mykje stoff som er i kroppen 24 timar etter at han har tatt ein tabelett.\nStartar med √• definera funksjonen.\n\nimport numpy as np\n\ndef f(t):\n    return 100 * np.exp(-0.012*t)\n\netter24 = f(24)\n\nprint(f\"Verkestoff etter 24 timar: {etter24:.2f} mg\")\n\nVerkestoff etter 24 timar: 74.98 mg\n\n\nVidare f√•r me opplyst at\n\nArnt tek ein tablett kvar morgon klokka √•tte. La \\(g\\) vere ein funksjon som beskriv mengda verkestoff han har i kroppen \\(t\\) timar etter at han tok den f√∏rste tabletten.\n\nDet skal argumenterast for om \\(g\\) er ein kontinuerlig funksjon eller ikkje.\nAt den nye tabeletten skal bli tatt opp umiddelbart (at niv√• verkestoff i kroppen gjer eit hopp med 100 mg) er litt vanskeleg √• sj√• for seg om ein tenker at ‚Äúi kroppen‚Äù = ‚Äúi blodet‚Äù. Om ein tenker at ‚Äúi kroppen‚Äù er innafor munnen, s√• kan ein argumentera for at funksjonen er diskontinuerleg med eit slikt hopp‚Ä¶\nS√• skal me finna ut kor mykje verkestoff Arnt har i kroppen like f√∏r den 6. tabletten. Bruker funksjonen fr√• tidlegare. Hugs at \\(t\\) er timar her og ikkje d√∏gn. Startar p√• 1 sidan den ‚Äúnyaste‚Äù tabeletten (nr. 5) har vore eitt d√∏gn i kroppen.\n\nverkestoff = 0\n\nfor i in range(1, 6):\n    verkestoff += f(i*24)\n\nprint(f\"Rett f√∏r tab.nr. 6 er det {verkestoff:.2f} mg i kroppen\")\n\nRett f√∏r tab.nr. 6 er det 228.63 mg i kroppen\n\n\nTil slutt skal me finna ut kor mykje verkestoff Arnt vil ha i kroppen om han tek ein tablett i d√∏gnet over eit lengre tidsrom. Bruker funksjonen og l√∏kka fr√• tidlegare. Startar p√• 0 no sidan me ikkje lenger ser p√• ‚Äúrett f√∏r‚Äù ein tablett. Pr√∏ver meg fram for √• finna ut kor langt fram me m√• sj√• for √• finna taket.\n\nverkestoff = 0\n\nfor i in range(0, 25):\n    verkestoff += f(i*24)\n    print(f\"Dag {i+1:2n}: {verkestoff:.2f} mg\")\n\nDag  1: 100.00 mg\nDag  2: 174.98 mg\nDag  3: 231.19 mg\nDag  4: 273.34 mg\nDag  5: 304.94 mg\nDag  6: 328.63 mg\nDag  7: 346.39 mg\nDag  8: 359.71 mg\nDag  9: 369.70 mg\nDag 10: 377.19 mg\nDag 11: 382.80 mg\nDag 12: 387.01 mg\nDag 13: 390.16 mg\nDag 14: 392.53 mg\nDag 15: 394.30 mg\nDag 16: 395.63 mg\nDag 17: 396.63 mg\nDag 18: 397.38 mg\nDag 19: 397.94 mg\nDag 20: 398.36 mg\nDag 21: 398.67 mg\nDag 22: 398.91 mg\nDag 23: 399.09 mg\nDag 24: 399.22 mg\nDag 25: 399.32 mg\n\n\nDet ser ut som Arnt ikkje vil overstiga 400 mg verkestoff i kroppen p√• lang sikt.\n\n\n\nEin funksjon \\(f\\) er gitt ved \\[f(x)=2x+5+\\frac{1}{x-1}\\]\nL√∏yser oppg√•va i CAS.\na) For kva verdiar av \\(k\\) har likninga \\(f'(x)=k\\) l√∏ysing?\n\n\n\nüì∑ Skjermbilete av CAS\n\n\nL√∏yser liknigna. Ser at \\(k=2\\) gir \\(0\\) i nemnar.\nLikninga har l√∏ysing for \\(k&lt;2\\)\nb) Vel ulike verdiar av \\(k\\), og beskriv symmetrien i l√∏ysingane av likninga \\(f'(x)=k\\) for kvar av desse verdiane\nPr√∏ver tre ulike verdiar for \\(k\\) og ser at alle er symmetriske om linja \\(x=1\\).\n\n\n\nüì∑ Skjermbilete av CAS\n\n\nLa \\(g\\) vere ein funksjon som kan skrivast p√• forma \\[g(x)=a\\cdot x + b + \\frac{1}{x+d}\\]\nc) For kva verdiar av \\(a\\) har likninga \\(g'(x)=4\\) l√∏ysing?\nL√∏yser likninga og ser at likninga har l√∏ysing n√•r \\(a&gt;4\\).\n\n\n\nüì∑ Skjermbilete av CAS\n\n\nLa no \\(a=3\\).\nd) Utforsk og beskriv l√∏ysingane til likninga \\(g'(x)=k\\) for ulike verdiar av \\(k\\).\nSer at no er l√∏ysingane symmetriske om \\(x=-d\\).\n\n\n\nüì∑ Skjermbilete av CAS\n\n\ne) Bestem \\(b\\) og \\(d\\) slik at \\(g'(-1)=g'(5)\\) og \\(g(1)=7\\).\nDersom \\(g'(-1)=g'(5)\\) m√• l√∏ysingane til likninga \\(g'(x)=k\\) vera symmetrisk om \\(x=\\frac{-1+5}{2}=2\\).  Dvs. \\(-d=2 \\Rightarrow d = -2\\).\nD√• er \\[g(x) = 3x + b + \\frac{1}{x-2}\\] og vidare finn me \\(b\\) ved √• l√∏ysa likninga \\(g(1)=7\\)\n\n\n\nüì∑ Skjermbilete av CAS\n\n\nOg me st√•r att med \\[g(x) = 3x + 5 + \\frac{1}{x-2}\\]"
  },
  {
    "objectID": "lf/S1-H23/index.html",
    "href": "lf/S1-H23/index.html",
    "title": "Eksamen H23 S1",
    "section": "",
    "text": "Her er eit forslag til l√∏ysing av hausteksamen i S1 2023. I del 2 er oppg√•vene stort sett Python brukt som hjelpemiddel.\nEg kan ikkje lova at l√∏ysinga er feilfri‚Ä¶ üòä Gje meg gjerne ein lyd i kommentarfeltet eller her om du ser feil üîç\nSist oppdatert: 16.11.2023\n\nMiniatyrbilete: Exam icons created by Freepik - Flaticon\nEksamenssettet finn du hos UDIR: Finn eksamensoppgaver"
  },
  {
    "objectID": "lf/S1-H23/index.html#oppg√•ve-1",
    "href": "lf/S1-H23/index.html#oppg√•ve-1",
    "title": "Eksamen H23 S1",
    "section": "Oppg√•ve 1",
    "text": "Oppg√•ve 1\nSkriv s√• enkelt som mogleg\n\\[ \\begin{align*}\n\\left( \\frac{3a^2}{2b^3}\\right)^2 \\cdot \\left( \\frac{a^2 b^{-5}}{4}\\right)^{-1} &= \\left( \\frac{3^2 a^4}{2^2 b^6}\\right) \\cdot \\left(\\frac{a^{-2} b^{5}}{{(2^2)}^{-1}}\\right) \\\\\n&= \\left(\\frac{3^2 a^4 a^{-2} b^5}{2^2 b^6 2^{-2}}\\right) \\\\\n&= \\frac{3^2 a^2 b^5}{b^6} \\\\\n&= \\frac{9a^2}{b}\n\\end{align*}\\]"
  },
  {
    "objectID": "lf/S1-H23/index.html#oppg√•ve-2",
    "href": "lf/S1-H23/index.html#oppg√•ve-2",
    "title": "Eksamen H23 S1",
    "section": "Oppg√•ve 2",
    "text": "Oppg√•ve 2\nSkriv uttrykka i stigande rekkef√∏lge: \\[2\\ln e^{3} \\quad , \\quad  3\\lg 70 \\quad , \\quad e^{3\\ln 2} \\]\nSer p√• kvart uttrykk for seg.\nF√∏rst \\(2\\ln e^3\\) \\[2 \\ln e^3 = 2\\cdot 3 \\ln e = 6 \\cdot 1 = 6\\]\nVidare \\(3 \\lg 70\\) \\[3 \\lg 70 = 3 \\lg (7\\cdot 10) = 3 (\\lg 7 + \\lg 10) = 3 \\lg 7 + 3 \\] Veit at \\(0&lt;\\lg 7 &lt; 1\\) s√• \\(3 \\lg 7 &lt; 3\\) og \\(3 \\lg 70 &lt; 6\\)\nTil slutt \\(e^{3\\ln 2}\\) \\[e^{3\\ln 2} = {\\left(e^{\\ln 2}\\right)^3} = 2^3 = 8\\]\nI stigande rekkef√∏lge: \\[3\\lg 70 \\quad , \\quad  2\\ln e^{3} \\quad , \\quad e^{3\\ln 2} \\]"
  },
  {
    "objectID": "lf/S1-H23/index.html#oppg√•ve-3",
    "href": "lf/S1-H23/index.html#oppg√•ve-3",
    "title": "Eksamen H23 S1",
    "section": "Oppg√•ve 3",
    "text": "Oppg√•ve 3\nDu kastar tre terningar\n\na) alle ulike\nTerninane har seks sider. Finn sannsynet for at alle terningane viser forskjellige tal p√• auge. \\[P(\\text{alle ulike}) = \\frac{6}{6} \\cdot \\frac{5}{6} \\cdot \\frac{4}{6} = 1\\cdot \\frac{20}{36} = \\frac{5}{9}\\]\nEventuelt \\[P(\\text{alle ulike}) = \\frac{\\text{gunstige utfall}}{\\text{moglege utfall}} = \\frac{6\\cdot 5 \\cdot 4}{6\\cdot 6\\cdot 6} = \\frac{5}{9}\\]\n\n\nb) n√∏yaktig to terningar er like\nDet at n√∏yaktig to terningar er like skjer viss ikkje alle terningane viser ulikt, eller alle terningane viser likt.\n\\[P(\\text{to like}) = 1 - P(\\text{alle like}) - P(\\text{alle ulike})\\]\nM√• finna \\(P(\\text{alle like})\\)\n\\[P(\\text{alle like}) = \\frac{\\text{gunstige utfall}}{\\text{moglege utfall}} = \\frac{6\\cdot 1 \\cdot 1}{6\\cdot 6\\cdot 6} = \\frac{1}{36}\\]\nDermed kan me finna sannsynet for at n√∏yaktig to er like:\n\\[ \\begin{align*}\nP(\\text{to like}) &= 1 - P(\\text{alle like}) - P(\\text{alle ulike}) \\\\\n&= 1 - \\frac{1}{36} - \\frac{5}{9} \\\\\n&= \\frac{36}{36} - \\frac{1}{36} - \\frac{5\\cdot 4}{9 \\cdot 4} \\\\\n&= \\frac{36-1-20}{36} \\\\\n&= \\frac{15}{36} \\\\&= \\frac{5}{12}\n\\end{align*}\\]"
  },
  {
    "objectID": "lf/S1-H23/index.html#oppg√•ve-4",
    "href": "lf/S1-H23/index.html#oppg√•ve-4",
    "title": "Eksamen H23 S1",
    "section": "Oppg√•ve 4",
    "text": "Oppg√•ve 4\nEin funksjon \\(f\\) er gitt ved\n\\[f(x) =\n\\begin{cases}\nx^2+3x-a^2 & \\text{for } x &lt; 1 \\\\\nx-1 & \\text{for } x \\geq 1\n\\end{cases} \\]\nBestem \\(a\\) slik at funksjonen blir kontinuerleg.\nViss funksjonen skal vera kontinuerleg m√• \\[\\begin{align*}\n\\lim_{x\\rightarrow 1^{-}}f(x) &= \\lim_{x\\rightarrow 1^{+}}f(x) \\\\\n1^2 + 3\\cdot 1 - a^2 &= 1-1 \\\\\n4-a^2 &= 0 \\\\\na^2 &= 4 \\\\\na &= \\pm 2\n\\end{align*}\n\\]\n\\(f(x)\\) er kontinuerleg n√•r \\(a=-2 \\vee a=2\\)"
  },
  {
    "objectID": "lf/S1-H23/index.html#oppg√•ve-5",
    "href": "lf/S1-H23/index.html#oppg√•ve-5",
    "title": "Eksamen H23 S1",
    "section": "Oppg√•ve 5",
    "text": "Oppg√•ve 5\nEi bedrift produserer ei vare. Dei daglege kostnadane \\(K\\) i kroner ved produksjon av \\(x\\) einingar av vara er gitt ved \\[K(x) = 0,1x^2 + 100x + 9000\\]\nDen √∏konomiansvarlege i bedrifta har laga programmet nedanfor.\n\ndef K(x):\n    return 0.1*x**2 + 100*x + 9000\n\ngrense = 200\nh = 0.00001\na = 1\n\nwhile (K(a + h) - K(a))/h &lt; grense:\n    a = a + 1\n\nprint(a)\n\nMe kjenner att K(a + h) - K(a))/h som definisjonen til den deriverte av \\(K\\). Programmet finn dermed ut kva tid den deriverte til \\(K\\), grensekostnaden (kompetansem√•l i S2), blir st√∏rre enn/passerer grense = 200.\nResultatet n√•r ein k√∏yrer programmet vert d√• den siste x-verdien (heiltal) som gjer \\(K'(x) \\leq 200\\).\nL√∏yser likninga \\(K'(x)=200\\):\n\\[\\begin{align*}\nK'(x) &= 200 \\\\\n0,2x + 100 &= 200 \\\\\n0,2x &= 200 - 100 \\\\\nx &= \\frac{100}{0,2} = 500\n\\end{align*} \\]\nDermed er \\(K'(500) = 200\\) som vil seie at programmet skriv ut 500 n√•r det k√∏yrer, sidan \\(K'(501)\\) vil vera st√∏rre enn vilk√•ret i while-l√∏kka i rad 8. (sidan \\(K'(a)\\) er ein line√¶r funksjon med positivt stigningstal).\nDette fortel bedrifta at om ein aukar produksjonen fr√• 500 til 501 einingar per veke s√• vil kostnadane auka med omlag 200 kr. Det vert 200 kr dyrare √• laga ei til eining av vara. (og denne grensekostnaden vert st√∏rre og st√∏rre sidan \\(K'(x)\\) har positivt stigningstal."
  },
  {
    "objectID": "lf/S1-H23/index.html#oppg√•ve-1-1",
    "href": "lf/S1-H23/index.html#oppg√•ve-1-1",
    "title": "Eksamen H23 S1",
    "section": "Oppg√•ve 1",
    "text": "Oppg√•ve 1\nEin m√∏belfabrikk produserer ein type sofaar. Tabellen viser samanhengen mellom tal sofaar produsert per m√•nad og produksjonskostnadane per m√•nad.\n\n\n\nTal sofaar\nProduksjonskostnad (i tusen kr)\n\n\n\n\n10\n270\n\n\n25\n550\n\n\n40\n870\n\n\n70\n1500\n\n\n140\n2200\n\n\n100\n3300\n\n\n180\n4500\n\n\n\nFabrikken sel alle sofaane til ei m√∏belkjede. Dei f√•r 28 000 kr per sofa.\n\na) Finne O(x)\nBruker regresjon til √• finna eit uttrykk for \\(K(x)\\) som passar med tala i tabellen. \\(x\\) er talet p√• sofaar produsert.\n\nimport numpy as np \n\n# definerer variablar for x og y\nx = np.array([10, 25, 40, 70, 100, 140, 180])\ny = np.array([270, 550, 870, 1500, 2200, 3300, 4500])\n\n# finn koeffesientane med regresjon (andregradsfunksjon)\na, b, c = np.polyfit(x, y, 2)\n\nprint(f\"K(x) = {a:.3f}x^2 + {b:.0f}x + {c:.0f}\")\n\nK(x) = 0.041x^2 + 17x + 103\n\n\nVeit at dei f√•r 28000 kr per sofa. Dermed er \\[I(x) = 28x\\]\nOverskotsfunksjonen finn me n√•r me trekk kostnadane fr√• inntektene.\n\\[O(x) = I(x) - K(x) = 28x - (0.041x^2 + 17x + 103) = -0.041x^2 + 11x - 103\\]\nModellen i oppg√•va er den samme som me kom fram til her, og er dermed ein god modell for overskotet.\n\n\nb) St√∏rst overskot\nFinn ekstremalpunktet til \\(O(x)\\) for √• finna produksjonsmengda som gjev st√∏rst overskot. Sidan andregradsleddet er negativ er grafen konkav og ekstremalpunktet er difor eit toppunkt (st√∏rst overskot).\n\nfrom sympy import Symbol, diff, Eq, Reals, solveset\n\n# definerer x\nx = Symbol(\"x\")\n\nO = -0.041*x**2 +11*x -103\n\n# definerer vs og hs av likninga\nvs = diff(O)    #O'(x)\nhs = 0 \n\n# set opp likninga, og l√∏yser ho\nlikning = Eq(vs, hs)\nl√∏ysing = solveset(likning, x, domain=Reals)\n\n# skriv ut svaret\nprint(f\"x = {l√∏ysing.evalf(4)}\")\n\nx = {134.1}\n\n\nBedrifta f√•r st√∏rst overskot om dei produserer 134 sofaar i m√•naden.\n\n\nc) L√•gast salspris\nFabrikken √∏nskjer at overskotet skal vere 1 000 000 kr per m√•nad. Dei vil endre salsprisen p√• sofaane. Bestem den l√•gaste salsprisen dei kan setje per sofa dersom dei skal f√• dette overskotet.\nL√∏yser likninga med CAS i Python (SymPy).\n\nfrom sympy import Symbol, diff, Eq, Reals, solveset\n\n# definerer symboler\nx = Symbol(\"x\")\na = Symbol(\"a\")\n\n# definerer K(x) og I(x). Ny pris = a. \nK = 0.041*x**2 + 17*x + 103\nI = a*x\n\n# Bestemmer O(x)\nO = I - K\n\n# Finn likning for ekstremalpunktet til O\nvs = diff(O, x)\nhs = 0\n\n# set opp likninga, og l√∏yser ho\nlikning = Eq(vs, hs)\nl√∏ysing = solveset(likning, x, domain=Reals)\nl√∏ysing\n\n\\(\\displaystyle \\mathbb{R} \\cap \\left\\{12.1951219512195 a - 207.317073170732\\right\\}\\)\n\n\nSer at \\(O(x)\\) har ekstremalpunkt i \\(x=12.2a - 207.3\\).\n\n# definerer x-verdien til ekstremalpunktet uttrykt ved a\nx_topp = 12.2*a - 207.3\n\n# finn O(x_topp)\nnyO = O.subs(x, x_topp)\n\n# Sett opp likning for O(x_topp)=1000 \nvs = nyO\nhs = 1000\n\n# set opp likninga, og l√∏yser ho\nlikning = Eq(vs, hs)\nl√∏ysing = solveset(likning, a, domain=Reals)\nl√∏ysing\n\n\\(\\displaystyle \\left\\{3.55039004456709, 30.449616515434\\right\\}\\)\n\n\nSer at \\(a = 3.55 \\vee a = 30.45\\). Sjekkar kva \\(x\\) er for dei ulike verdiane.\n\na1 = 3.55\na2 = 30.45\n\nx1 = x_topp.subs(a, a1).evalf()\nx2 = x_topp.subs(a, a2).evalf()\n\nprint(f\"Pris p√• {a1*1000} kr gjev x = {x1:.0f}\")\nprint(f\"Pris p√• {a2*1000} kr gjev x = {x2:.0f}\")\n\nPris p√• 3550.0 kr gjev x = -164\nPris p√• 30450.0 kr gjev x = 164\n\n\nProduksjonsmengda, \\(x\\), m√• vera positiv. Dermed er den l√•gaste prisen bedrifta kan ta for √• f√• 1M kr overskot 30450 kr pr. sofa.\n\n\n\n\n\n\nL√∏yse i GeoGebra sin CAS\n\n\n\n\n\nHer er l√∏ysing av 1c i ‚Äúvanleg‚Äù CAS."
  },
  {
    "objectID": "lf/S1-H23/index.html#oppg√•ve-2-1",
    "href": "lf/S1-H23/index.html#oppg√•ve-2-1",
    "title": "Eksamen H23 S1",
    "section": "Oppg√•ve 2",
    "text": "Oppg√•ve 2\nUnders√∏kingar viser at 10 % av alle menn og 8 % av alle kvinner er venstrehendte. P√• ein skule er det 280 gutar og 220 jenter.\n\na) minst 25 gutar er venstrehendte\nBestem sannsynet for at minst 25 av gutane er venstrehendte.\nBruker ein binomisk modell for √• l√∏ysa dette sidan det er\n\nto utfall (venstrehendt og ikkje venstrehendt)\nuavhengige delfors√∏k (om ein gut er venstrehendt p√•verkar ikkje sannsynet for at neste gut er venstrehendt)\nlikt sannsyn for alle delfors√∏ka (\\(p=0,10\\))\n\n\nimport numpy as np\n\n# definerer tilfeldighetsgeneratoren\nrng = np.random.default_rng()\n\n# tal simuleringar \nN = 10000000\n\n# simulerer uttrekk av 280 gutar\nsimulert = rng.binomial(n = 280, p = 0.1, size = N)\n\n# tel opp gunstige utfall og finn sannsynet\ngunstige = sum(simulert &gt;= 25)\nsannsyn = gunstige / N\n\nprint(f\"P(X&gt;=25) = {sannsyn:.4f}\")\n\nP(X&gt;=25) = 0.7530\n\n\nSannsynet for at minst 25 av gutane er venstrehendte er \\(75,3\\, \\%\\).\n\n\nb) P(minst tre gutar venstrehendt) &gt; 0.20\nKor mange gutar m√• det vere i ein klasse dersom sannsynet for at minst tre av gutane er venstrehendte, skal vere st√∏rre enn 20 %?\nFramleis binomisk. Finn svaret med simuleringar.\n\ndef minst_tre_av(n):\n    # tal simuleringar \n    N = 1000\n\n    # simulerer uttrekk av n gutar\n    simulert = rng.binomial(n = n, p = 0.1, size = N)\n\n    # tel opp gunstige utfall og finn sannsynet\n    gunstige = sum(simulert &gt;= 3)\n    sannsyn = gunstige / N\n\n    return sannsyn\n\nn_gutar = 3\n\nwhile minst_tre_av(n_gutar) &lt; 0.20:\n    n_gutar += 1\n\nprint(n_gutar)\n\n16\n\n\nDet m√• vera 16 gutar i klassen for at sannsynet for at minst tre av gutane skal vera venstrehendte skal vera st√∏rre enn 16 %.\n\n\nc) N√∏yaktig tre venstrehendte elevar i klassen\nI ein klasse er det 13 gutar og 17 jenter. Bestem sannsynet for at n√∏yaktig tre av elevane i klassen er venstrehendte.\nHer √≤g er det binomisk sannsyn. Bruker simuleringar og finn jentene og gutane for seg.\n\n# tal simuleringar\nN = 10000000\n\n# trekk venstrehendte jenter og gutar for seg\njenter = rng.binomial(n=17, p=0.08, size=N)\ngutar = rng.binomial(n=13, p=0.10, size=N)\n\n# finn totalt tal venstrehendte kvart fors√∏k\nvenstrehendte = jenter + gutar \n\n# tel opp gunstige og finn sannsynet. \ngunstige = sum(venstrehendte == 3)\nsannsyn = gunstige / N\nprint(f\"P(n√∏yaktig tre venstrehendte) = {sannsyn:.4f}\")\n\nP(n√∏yaktig tre venstrehendte) = 0.2308\n\n\nSannsynet for at n√∏yaktig tre av elevane er venstrehendte er 23,1%."
  },
  {
    "objectID": "lf/S1-H23/index.html#oppg√•ve-3-1",
    "href": "lf/S1-H23/index.html#oppg√•ve-3-1",
    "title": "Eksamen H23 S1",
    "section": "Oppg√•ve 3",
    "text": "Oppg√•ve 3\nPer og K√•re set inn like store bel√∏p p√• kvar sin konto. Per f√•r ei √•rleg rente p√• 3,00 %, mens K√•re f√•r ei √•rleg rente p√• 6,00 %.\n\na) finne sparebel√∏p\nKva for eit bel√∏p m√• Per setje inn dersom han skal ha 30 000 kroner p√• kontoen etter 8 √•r?\nL√∏yser likninga \\(x\\cdot 1.03^8 = 30000\\) i CAS:\n\nfrom sympy import Symbol, Eq, Reals, solveset\n\n# definerer symboler\nx = Symbol(\"x\")\n\n# Finn likning\nvs = x * 1.03**8\nhs = 30000\n\n# set opp likninga, og l√∏yser ho\nlikning = Eq(vs, hs)\nl√∏ysing = solveset(likning, x, domain=Reals)\nl√∏ysing\n\n\\(\\displaystyle \\left\\{23682.2770294181\\right\\}\\)\n\n\nPer m√• sette inn 23683 kr for √• ha 30 000 kr p√• kontoen etter 8 √•r.\n\n\nb) dobbelt sparebel√∏p\nP√•stand\n\nDet vil g√• n√∏yaktig dobbelt s√• lang tid f√∏r bel√∏pet Per har p√• konto, har dobla seg, som det vil g√• f√∏r bel√∏pet K√•re har p√• konto, har dobla seg.\n\nArgumenter for at p√•standen ikkje er riktig.\nDersom dette stemmer m√• \\(1.03^{2x}\\) og \\(1.06^x\\) vera det same. \\[1.03^{2x} = (1.03^2)^x = 1.0609^x \\neq 1.06^x\\]\nP√•standen er ikkje riktig.\n\n\nc) doble totalt sparebel√∏p\nKor lang tid vil det g√•r f√∏r Per og K√•re til saman har dobbelt s√• mykje pengar som dei sette inn p√• kontoane, dersom den √•rlege renta er h√∏vesvis 3,00 % og 6,00 %?\nKallar innskotet for \\(I\\). D√• f√•r me likninga\n\\[I\\cdot 1.03^x + I\\cdot 1.06^x = 4I \\Leftrightarrow 1.03^x + 1.06^x = 4\\]\nL√∏yser i CAS:\n\nfrom sympy import Symbol, Eq, nsolve\n\n# definerer symboler\nx = Symbol(\"x\")\n\n# Finn likning\nvs = 1.03**x + 1.06**x\nhs = 4\n\n# set opp likninga, og l√∏yser ho numerisk\nlikning = Eq(vs, hs)\nl√∏ysing = nsolve(likning, x, 1)\nprint(l√∏ysing)\n\n15.2433642255997\n\n\nViss dei f√•r rente ein gong i √•ret vil bel√∏pet ha (litt meir enn) dobla seg i l√∏pet av 16 √•r."
  },
  {
    "objectID": "lf/S1-H23/index.html#oppg√•ve-4-1",
    "href": "lf/S1-H23/index.html#oppg√•ve-4-1",
    "title": "Eksamen H23 S1",
    "section": "Oppg√•ve 4",
    "text": "Oppg√•ve 4\nDu kastar fem terningar.\n\na) minst to like\nBestem sannsynet for at minst to av terningane viser same tal p√• auge. \\[P(\\text{minst to like}) = 1 - P(\\text{ingen like})\\]\nReknar ut med python:\n\n# gunstige / moglege utfall\ningen_like = (6*5*4*3*2) / (6**5)\n\nminst_to_like = 1 - ingen_like\n\nprint(f\"P(minst to like) = {minst_to_like:.4f}\")\n\nP(minst to like) = 0.9074\n\n\nSannsynet for minst to like terningar er 0.907.\n\n\nb) sum auge\nLa X vere summen av talet p√• auge p√• dei fem terningane. Bruk programmering til √• bestemme \\(P(X&gt;20)\\).\nBruker simulering til √• svara p√• dette:\n\nimport numpy as np\n\n# definerer tilfeldighetsgeneratoren\nrng = np.random.default_rng()\n\n# tal simuleringar \nN = 10000000\n\n# triller 5 terningar N gongar\nterningar = rng.integers(1, 7, size=(5, N))\n\n# finn summen av kvart fors√∏k\nfem_kast = terningar.sum(axis=0)\n\n# tel opp kor mange gongar summen vart st√∏rre enn 20\ngunstige = sum(fem_kast &gt; 20)\n\n# finn sannsynet og skriv ut\np = gunstige / N\n\nprint(f\"P(X &gt; 20) = {p:.4f}\")\n\nP(X &gt; 20) = 0.2216\n\n\nFinn at \\(P(X&gt;20)\\approx 0.221\\). Talet simuleringar er s√• h√∏gt (10 000 000) at dette sannsynet er ganske n√∏yaktig.\n\n\n\n\n\n\nForklaring av kodelinjer 10-13 ‚¨ÜÔ∏è\n\n\n\n\n\nHer bruker eg ei todimensjonal array/tabell for √• rekna ut sannsynet.\nTrillar terningar:\n\nN = 10\n\nterningar = rng.integers(1, 7, size=(5, N))\n\nprint(terningar)\n\n[[2 5 4 4 5 1 5 6 6 1]\n [4 5 1 4 6 5 5 3 2 6]\n [2 2 4 2 5 2 1 4 5 4]\n [4 2 2 1 1 5 5 1 6 4]\n [1 3 6 3 4 3 3 6 4 4]]\n\n\nSer at denne tabellen f√•r 5 rader og N kolonner.\nFinn vidare summen av kvar kolonne:\n\nkolonnesum = terningar.sum(axis=0)\nprint(kolonnesum)\n\n[13 17 17 14 21 16 19 20 23 19]\n\n\n\n\n\n\n\nc) bestemme k\nBestem den st√∏rste verdien av k som er slik at \\(P(X\\geq k )&gt; 0,8\\)\nStartar med √• gjera koden fr√• (b) om til ein funksjon som returnerer sannsynet for at P(X&gt;= k).\n\nimport numpy as np\nrng = np.random.default_rng()\n\ndef sum_st√∏rre_eller_lik(k):\n    N = 1000000\n    terningar = rng.integers(1, 7, size = (5, N))\n    fem_kast = terningar.sum(axis=0)\n    gunstige = sum(fem_kast &gt;= k)\n    p = gunstige / N\n    return p   \n\nBruker denne funksjonen til √• sj√• p√• ulike verdiar for k. Startar med 30 (som er maks sum) og reduserer med 1 til sannsynet vert mindre enn 0,8.\n\nk = 30\n\nwhile sum_st√∏rre_eller_lik(k) &lt; 0.8:\n    k = k - 1\n\nprint(k)\n\n14\n\n\nDen st√∏rste verdien k kan ha er 14."
  },
  {
    "objectID": "lf/S1-H23/index.html#oppg√•ve-5-1",
    "href": "lf/S1-H23/index.html#oppg√•ve-5-1",
    "title": "Eksamen H23 S1",
    "section": "Oppg√•ve 5",
    "text": "Oppg√•ve 5\nDu skal lage ein kasse utan lokk. Han skal ha form som eit rett prisme. Grunnflata i kassen skal vere kvadratisk. For at vekta ikkje skal bli for stor, kan ikkje det samla arealet av platene som blir brukte til √• lage kassen, vere meir enn \\(120\\, dm^2\\).\n\na) botn p√• 5 dm\nKva er det st√∏rste volumet kassen kan f√• dersom sidene i botnen skal vere \\(5\\, dm\\)?\nLagar uttrykk for areal og volum. Kallar sidene til grunnflata \\(s\\) og h√∏gda \\(h\\). \\[V = s^2 h\\] \\[A = s^2 + 4sh\\]\nMed \\(s=5\\) er det begrensinga i areal av platene p√• \\(120\\,dm^2\\) som er avgrensande. Finn h√∏gda n√•r \\(A=120\\). Bruker CAS:\n\nfrom sympy import Symbol, Eq, Reals, solveset\n\n# definerer symboler\ns = Symbol(\"s\")\nh = Symbol(\"h\")\n\n# Set opp likningane\nA = s**2 + 4*s*h\nV = s**2 * h\n\n# Finn uttrykk for h n√•r A=120 og s=5\nA_2 = A.subs(s, 5)\nlikning = Eq(A_2, 120)\nl√∏ysing = solveset(likning, h, domain=Reals)\nl√∏ysing\n\n\\(\\displaystyle \\left\\{\\frac{19}{4}\\right\\}\\)\n\n\nBruker \\(h=\\frac{19}{4}\\) for √• finne volumet.\n\nvolum = V.subs(s, 5).subs(h, 19/4).evalf()\nvolum\n\n\\(\\displaystyle 118.75\\)\n\n\nMed sider p√• \\(5\\,dm\\) er maks volum \\(118.75\\,dm^3\\).\n\n\nb) maks volum\nKva er det maksimale volumet kassen kan f√•?\nLagar uttrykk for \\(h\\) uttrykt ved \\(s\\). Brukar det til √• laga funksjon for volum som funksjon av sidelengde, \\(V(s)\\). Finn ekstremalpunktet til denne funksjonen.\n\n# finn uttrykk for h\nlikning = Eq(A, 120)\nl√∏ysing = solveset(likning, h, domain=Reals)\nl√∏ysing\n\n\\(\\displaystyle \\mathbb{R} \\cap \\left\\{\\frac{120 - s^{2}}{4 s}\\right\\}\\)\n\n\n\n# byttar ut h med uttrykket for h. \nV_funk = V.subs(h, (120-s**2)/(4*s))\nV_funk\n\n\\(\\displaystyle \\frac{s \\left(120 - s^{2}\\right)}{4}\\)\n\n\n\nfrom sympy import diff\n\n# deriverer\ndV = V_funk.diff()\n\n# l√∏yser V'=0\nlikning = Eq(dV, 0)\nl√∏ysing = solveset(likning, s, domain=Reals)\nl√∏ysing\n\n\\(\\displaystyle \\left\\{- 2 \\sqrt{10}, 2 \\sqrt{10}\\right\\}\\)\n\n\nSidan lengda p√• sidekanten m√• vera positiv forkastar me den negative l√∏ysinga. Finn volumet n√•r \\(s=2\\sqrt{10}\\).\n\nV_funk.subs(s, 2*np.sqrt(10))\n\n\\(\\displaystyle 126.491106406735\\)\n\n\nDet st√∏rste volumet er \\(126,5\\,dm^3\\). (toppunkt sidan \\(V(s)\\) er tredjegradsfunksjon med negativt tredjegradsledd)\n\n\nc) minst areal\nDu skal lage ein slik kasse som rommar \\(80\\, dm^3\\). Kva er det minste samla arealet platene kan ha, dersom du skal lage ein slik kasse?\n\n# finn uttrykk for h n√•r V=80\nlikning = Eq(V, 80)\nl√∏ysing = solveset(likning, h, domain=Reals)\nl√∏ysing\n\n\\(\\displaystyle \\mathbb{R} \\cap \\left\\{\\frac{80}{s^{2}}\\right\\}\\)\n\n\n\n# set dette uttrykket inn i A\nA_funk = A.subs(h, 80/(s**2))\nA_funk\n\n\\(\\displaystyle s^{2} + \\frac{320}{s}\\)\n\n\n\n# deriverer og finn ekstremalpunkt\ndA = A_funk.diff()\nlikning = Eq(dA, 0)\nl√∏ysing = solveset(likning, s, domain=Reals)\nl√∏ysing.evalf(3)\n\n\\(\\displaystyle \\left\\{5.43\\right\\}\\)\n\n\n\n# finn arealet med s=5.43\nA_funk.subs(s, 5.43).evalf(3)\n\n\\(\\displaystyle 88.4\\)\n\n\nDet minste arealet platene brukt i boksen kan ha er \\(88,4\\,dm^2\\). (botnpunkt sidan \\(A(s)\\) er konveks)"
  },
  {
    "objectID": "lf/S1-H23/index.html#oppg√•ve-6",
    "href": "lf/S1-H23/index.html#oppg√•ve-6",
    "title": "Eksamen H23 S1",
    "section": "Oppg√•ve 6",
    "text": "Oppg√•ve 6\nLa \\(f\\) vere ein tredjegradsfunksjon. Avgjer for kvar av p√•standane nedanfor om han er sann eller usann. Grunngi svaret.\n\na) P√•stand 1\nGrafen til \\(f\\) har minst eitt ekstremalpunkt.\nViss \\(f\\) skal ha minst eitt ekstremalpunkt m√• \\(f'\\) ha minst eitt nullpunkt.\n\\[f(x) = ax^3 + bx^2 + cx + d \\Leftrightarrow f'(x)=3ax^2+2bx+c\\]\n\nfrom sympy import symbols, diff, solve\n\n# definerer symboler\nx, a, b, c, d = symbols(\"x a b c d\")\n\n# definerer f\nf = a*x**3 + b*x**2 + c*x + d \n\n# deriverer f\ndf = diff(f, x)\n\n# finn nullpunkta til f'(x)\nl√∏ysingar = solveset(Eq(df, 0), x, domain=Reals)\nl√∏ysingar\n\n\\(\\displaystyle \\mathbb{R} \\cap \\left\\{- \\frac{b}{3 a} - \\frac{\\sqrt{- 3 a c + b^{2}}}{3 a}, - \\frac{b}{3 a} + \\frac{\\sqrt{- 3 a c + b^{2}}}{3 a}\\right\\}\\)\n\n\nSer at viss \\(b^2-3ac&lt;0 \\Leftrightarrow b^2 &lt; 3ac\\) s√• har \\(f'(x)=0\\) ingen reelle l√∏ysingar (diskriminanten er negativ). Dermed har ikkje alle tredjegradsfunksjonar ekstremalpunkt.\nP√•standen er usann.\n\n\nb) P√•stand 2\nAlle linjer p√• forma \\(y=ax + b\\), der \\(a, b, \\in \\mathbb{R}\\) vil skjere grafen til \\(f\\).\n\nfrom sympy import limit, oo\n\n# definerer funksjonen og symbola\nx, a, b, c, d = symbols(\"x a b c d\")\nf = a*x**3 + b*x**2 + c*x + d \n\n\n# grense mot uendeleg\nlimit(f, x, oo)\n\n\\(\\displaystyle \\infty \\operatorname{sign}{\\left(a \\right)}\\)\n\n\n\n# grense mot minus uendeleg\nlimit(f, x, -oo)\n\n\\(\\displaystyle - \\infty \\operatorname{sign}{\\left(a \\right)}\\)\n\n\nSer at grenseverdien til \\(f(x)\\) g√•r ¬´kvar sin veg¬ª n√•r \\(x\\rightarrow \\pm \\infty\\) (avhengig av forteiknet til \\(a\\)). Dermed vil alle linjer p√• forma \\(y=ax+b\\) p√• eitt eller anna tidspunkt krysse \\(f(x)\\).\nP√•standen er sann.\n\n\nc) P√•stand 3\nDersom grafen til \\(f\\) har eit vendepunkt for \\(x=3\\) er \\(f'(1)=f'(5)\\)\nDersom grafen til \\(f\\) har vendepunkt for \\(x=3\\) vil det seie at \\(f''(3)=0\\). Sidan \\(f''(x)\\) er den deriverte tik \\(f'(x)\\) veit me d√• at \\(f'(x)\\) har ekstremalpunkt for \\(x=3\\). Sidan \\(f(x)\\) er eit tredjegradspolynom er \\(f'(x)\\) eit andregradspolynom. Andregradspolynomer er symmetriske om ekstremalpunktet sitt. Sidan \\(x=1\\) og \\(x=5\\) ligg like langt fr√• \\(x=3\\) vil \\(f'(1)=f'(5)\\).\nP√•standen er sann."
  },
  {
    "objectID": "blogg.html",
    "href": "blogg.html",
    "title": "Blogginnlegg",
    "section": "",
    "text": "Perplexity.ai\n\n\n5 minutt\n\n\n\nKI\n\n\nverkt√∏y\n\n\ntips\n\n\n\nErfaringar med, og tankar kring Google-utfordraren Perplexity.ai\n\n\n\nJan 19, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNyttige simuleringskommandoar\n\n\n3 minutt\n\n\n\nprogrammering\n\n\ns-matte\n\n\nsimulering\n\n\neksamen\n\n\n\nHer er ei oversikt over nyttige tips og triks til simulering i Python. Det kan jo vera kjekt til eksamen ü•≥\n\n\n\nMay 11, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJordskjelvpython\n\n\n6 minutt\n\n\n\nmodellering\n\n\nprogrammering\n\n\ntips\n\n\ngeofag\n\n\n\n\n\n\n\nApr 25, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSamansett simulering i S2\n\n\n3 minutt\n\n\n\nprogrammering\n\n\ns-matte\n\n\nsimulering\n\n\neksamensoppg√•ve\n\n\ntips\n\n\n\n\n\n\n\nMar 3, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGrunnleggjande simulering i NumPy\n\n\n4 minutt\n\n\n\nprogrammering\n\n\ns-matte\n\n\nsimulering\n\n\ntips\n\n\n\n\n\n\n\nFeb 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHydrologiprogrammering\n\n\n5 minutt\n\n\n\nmodellering\n\n\nprogrammering\n\n\ntips\n\n\ngeofag\n\n\n\n\n\n\n\nFeb 2, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nZotero - kva, kvifor, korleis?\n\n\n5 minutt\n\n\n\nverkt√∏y\n\n\nkjelder\n\n\ntips\n\n\n\n\n\n\n\nJan 27, 2023\n\n\n\n\n\n\n\n\nIngen passande treff"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "\nVelkommen til lektorodd.github.io!\n",
    "section": "",
    "text": "Velkommen til lektorodd.github.io!\n\n\nüëÄ Her finn du ei oversikt over nokre av dei tinga eg held p√• med\n\n\n\n\n\n\n\n\n\nL√òYSINGSFORSLAG EKSAMEN\n\n\nHer er nokre l√∏ysingsforslag til ulike eksamenar p√• vgs.  P√• del 2 pr√∏ver eg √• nytta Python i st√∏rst mogleg grad üêç\n\n\n\n\n\n\n\n\n\n\n\nBLOGG\n\n\nHer er nokre tankar, tips og ideear eg skriv ned med ujamne mellomrom.\n\n\n\n\n\n\n\n\n\n\n\nMATTEBOK\n\n\nEit fors√∏k p√• √• samla litt ressursar knytt til programmering i matematikk programfag (S/R) p√• vgs."
  },
  {
    "objectID": "posts/230511_simulering3/index.html",
    "href": "posts/230511_simulering3/index.html",
    "title": "Nyttige simuleringskommandoar",
    "section": "",
    "text": "Standard importering og oppsett av tilfeldighetsgenerator fr√• NumPy.\n\nimport numpy as np\nrng = np.random.default_rng()"
  },
  {
    "objectID": "posts/230511_simulering3/index.html#komme-i-gang",
    "href": "posts/230511_simulering3/index.html#komme-i-gang",
    "title": "Nyttige simuleringskommandoar",
    "section": "",
    "text": "Standard importering og oppsett av tilfeldighetsgenerator fr√• NumPy.\n\nimport numpy as np\nrng = np.random.default_rng()"
  },
  {
    "objectID": "posts/230511_simulering3/index.html#uniforme-modellar",
    "href": "posts/230511_simulering3/index.html#uniforme-modellar",
    "title": "Nyttige simuleringskommandoar",
    "section": "Uniforme modellar",
    "text": "Uniforme modellar\nOfte enkelt √• bruke heiltal n√•r ein skal simulere noko med uniform sannsynsmodell - ein terning üé≤, myntkast ü™ô, gut/jente üë´ osv.\n\nD√∏me - myntkast\nViss ein skal simulera myntkast kan ein la 0 vera mynt og 1 vera kron.\n\n# antall kast\nN = 10\n\n# kasta simulert\nmynt_kast = rng.integers(0, 2, size=N)\n\nprint(mynt_kast)\n\n[1 0 1 1 1 0 0 0 1 0]\n\n\nDermed kan ein enkelt telja opp kor mange kron det var:\n\nsum(mynt_kast)\n\n5"
  },
  {
    "objectID": "posts/230511_simulering3/index.html#binomiske-fordelingar",
    "href": "posts/230511_simulering3/index.html#binomiske-fordelingar",
    "title": "Nyttige simuleringskommandoar",
    "section": "Binomiske fordelingar",
    "text": "Binomiske fordelingar\nViss me ser p√• noko som er binomisk fordelt er rng.binomial(n, p) fin √• nytta. n er antall suksess og p er sannsynet for suksess i kvart delfors√∏k. Her og kan ein bruka size= for √• gjenta fors√∏ket fleire gongar.\n\nD√∏me\nPlantar 100 fr√∏. Sannsynet for at eitt fr√∏ spirer er 0.7 üå±\nDette kan me simulera:\n\n# simulererer fors√∏ket N gongar\nN = 10\n\nspirer = rng.binomial(n=100, p=0.7, size=N)\nprint(spirer)\n\n[67 73 73 65 74 71 69 74 65 76]\n\n\nTala her viser kor mange av dei 100 fr√∏a som spirte i kvar av dei 10 gjennomf√∏rte fors√∏ka.\nMe kan telja opp kor mange av fors√∏ka som tilfredsstiller eit vilk√•r. T.d. kor mange gongar spira 70 eller fleire av fr√∏a?\n\nspirer &gt;= 70\n\narray([False,  True,  True, False,  True,  True, False,  True, False,\n        True])\n\n\nSer at me her f√•r sanningsvariablar. Python reknar false som 0 og true som 1. Dermed blir det lett √• telja opp:\n\nsum(spirer &gt;= 70)\n\n6\n\n\nD√• kan me finna sannsynet p√• denne oppg√•va ved simulering.\n\nDu plantar 100 fr√∏, sannsynet for at eitt fr√∏ spirer er 0.7. Kva er sannsynet for at 70 eller fleire av fr√∏a spirer?\n\n\n# antall fors√∏k\nN = 1000000\n\n# simulering\nspirer = rng.binomial(n=100, p=0.7, size=N)\n\n# tel opp gunstige utfall\ngunstige = sum(spirer &gt;= 70)\n\n# finn relativ frekvens\nsannsyn = gunstige / N \n\n# skriv ut sannsynet med 4 desimalar\nprint(f\"P(X ‚â• 70) = {sannsyn:.4f}\")\n\nP(X ‚â• 70) = 0.5490"
  },
  {
    "objectID": "posts/230511_simulering3/index.html#hypergeometriske-fordelingar",
    "href": "posts/230511_simulering3/index.html#hypergeometriske-fordelingar",
    "title": "Nyttige simuleringskommandoar",
    "section": "Hypergeometriske fordelingar",
    "text": "Hypergeometriske fordelingar\nFor hypergeometriske fordelingar kan ein nytta rng.hypergeometric(ngood, nbad, nsample). I hypergeometriske fordelingar er populasjonen delt i to. ngood og nbad er storleiken p√• kvar av dei. nsample er storleiken p√• utvalet du trekk fr√• populasjonen.\n\nDet ligg 12 raude og 7 bl√• kuler i ei korg. Du trekk ut 5 kuler. Kva er sannsynet for at minst to av dei er raude?\n\n\nN = 10\n\n# definerer kuleantall og utvalstorleik\nraude = 12\nbl√• = 7\nutval = 5\n\n# simulerer 10 trekk\nrng.hypergeometric(ngood=raude, nbad=bl√•, nsample=utval, size=N)\n\narray([2, 4, 3, 3, 3, 3, 2, 3, 3, 3])\n\n\nTala me f√•r ut her er antall raude (ngood) i kvart fors√∏k. Resten av utvalet blir d√• bl√•.\nBruker dette til √• l√∏ysa oppg√•va.\n\nN = 1000000\n\n# definerer kuleantall og utvalstorleik\nraude = 12\nbl√• = 7\nutval = 5\n\n# simulerer \ntrekte_kuler = rng.hypergeometric(\n    ngood=raude, \n    nbad=bl√•, \n    nsample=utval, \n    size=N\n)\n\n# tel opp gunstige\ngunstige = sum(trekte_kuler &gt;= 2)\n\nsannsyn = gunstige / N\nprint(f\"P(minst to raude) = {sannsyn:.4f}\")\n\nP(minst to raude) = 0.9619"
  },
  {
    "objectID": "posts/230511_simulering3/index.html#normalfordeling",
    "href": "posts/230511_simulering3/index.html#normalfordeling",
    "title": "Nyttige simuleringskommandoar",
    "section": "Normalfordeling",
    "text": "Normalfordeling\nHer bruker me rng.normal(loc, scale) der loc er gjennomsnittet/forventningsverdien (\\(\\mu\\)) og scale er standardavviket (\\(\\sigma\\)).\n\nD√∏me\nP√• ein skule er gjennomsnittsh√∏gda p√• elevane 172 cm og standardavviket 9 cm. Kva er sannsynet for at ein tilfeldig elev er h√∏gare enn 180 cm?\n\nN = 1000000\n\n# trekk tilfeldige elevar\nelevar = rng.normal(loc=172, scale=9, size=N)\n\n# tel opp og finn sannsynet\ngunstige = sum(elevar &gt; 180)\nsannsyn = gunstige / N\n\nprint(f\"Sannsynet er {sannsyn:.4f}\")\n\nSannsynet er 0.1876\n\n\n\n\n\n\n\n\nSamansett simulering\n\n\n\nI dette innlegget har eg vist korleis simuleringsoppg√•va fr√• eksempelsettet til S2 kan l√∏ysast (p√• tre ulike m√•tar).\n\n\nI tillegg denne er rng.standard_normal() eit alternativ om ein jobbar med noko som er standard normalfordelt."
  },
  {
    "objectID": "posts/230511_simulering3/index.html#ogs√•-nyttig---rng.choice",
    "href": "posts/230511_simulering3/index.html#ogs√•-nyttig---rng.choice",
    "title": "Nyttige simuleringskommandoar",
    "section": "Ogs√• nyttig - rng.choice()",
    "text": "Ogs√• nyttig - rng.choice()\nTrekke andre ting enn tal med rng.choice\n\nI ei sk√•l ligg det 7 banan-twist og 3 daim-twist. Kva er sannsynet for at me f√•r to banan n√•r me trekk ut to bitar fr√• sk√•la.\n\nStartar med √• ‚Äúlage‚Äù twistsk√•la.\n\ntwistsk√•l = [\"Banan\"]*7 + [\"Daim\"]*3\nprint(twistsk√•l)\n\n['Banan', 'Banan', 'Banan', 'Banan', 'Banan', 'Banan', 'Banan', 'Daim', 'Daim', 'Daim']\n\n\n\nmed tilbakelegging\nSer f√∏rst p√• fors√∏ket med tilbakelegging (dette er default i choice).\n\nN = 1000000\n\n# tellevariabel BB &lt;- banan+banan\nBB = 0\n\nfor i in range(N):\n    trekt_twist = rng.choice(a=twistsk√•l, size = 2)\n    # legg til 1 om bit1 OG bit2 er banan. Legg til 0 om ikkje... \n    BB += ((trekt_twist[0] == \"Banan\") and (trekt_twist[1] == \"Banan\"))\n\nsannsyn = BB / N\nprint(f\"P(BB) = {sannsyn:.4f}\")\n\nP(BB) = 0.4897\n\n\n\n\nutan tilbakelegging\nDette er nesten heilt likt, men me legg til argumentet replace=False.\n\nN = 1000000\n\n# tellevariabel BB &lt;- banan+banan\nBB = 0\n\nfor i in range(N):\n    trekt_twist = rng.choice(a=twistsk√•l, size = 2, replace=False)\n    BB += ((trekt_twist[0] == \"Banan\") and (trekt_twist[1] == \"Banan\"))\n\nsannsyn = BB / N\nprint(f\"P(BB) = {sannsyn:.4f}\")\n\nP(BB) = 0.4661\n\n\n\n\nikkje-uniformt sannsyn\nSannsynet over var ikkje-uniformt, men s√•pass enkelt at me laga ei liste med heile utfallsrommet. Det vert fort upraktisk om me har mange ulike utfall med store variasjonar i antall. Me kan heller legga inn sannsynet for kvart av utfalla direkte i rng.choice()\n\ntwistar = [\"Banan\", \"Daim\"]\nsannsyn = [7/10, 3/10]\n\nto_twist = rng.choice(a=twistar, size=2, p=sannsyn)\nprint(to_twist)\n\n['Banan' 'Daim']\n\n\nDette er fint t.d. ved simulering av lykkehjul der ulike fargar har ulik storleik, eller for √• simulera blodtype hos menneske."
  },
  {
    "objectID": "posts/230511_simulering3/index.html#oppsummering",
    "href": "posts/230511_simulering3/index.html#oppsummering",
    "title": "Nyttige simuleringskommandoar",
    "section": "Oppsummering",
    "text": "Oppsummering\nDet var ein kort gjennomgang av dei viktigaste kommandoane me treng for simulering i S1 og S2. Det er ei rekka andre valg i random number generator-en. Sjekk gjerne ut dokumentasjonen.\nDenne sida kan du lagra og ha med p√• eksamen om du vil üòé\nLykke til! üßë‚Äçüéì\n\nMiniatyrbilete laga av katemangostar p√• Freepik"
  },
  {
    "objectID": "posts/230303_simulering2/index.html",
    "href": "posts/230303_simulering2/index.html",
    "title": "Samansett simulering i S2",
    "section": "",
    "text": "Ein del problemstillingar kan vera ganske vanskelege √• l√∏ysa ved rekning. Simulering kan hjelpa til √• gjera denne type oppg√•ver mykje lettare √• l√∏ysa. I dag ser me p√• ei oppg√•ve henta fr√• eksempelsettet til skriftleg eksamen etter ny l√¶replan i S2.\nTa gjerne ein kikk p√• dette innlegget om du treng oppfrisking i grunnleggande simulering med NumPy. Ellers er dokumentasjonen til NumPy ein fin stad √• vera‚Ä¶\n\n\n\nP√• ein skule er det 323 jenter og 301 gutar. La \\(X\\) vera h√∏gda til ei tilfeldig vald jente og \\(Y\\) vera h√∏gda til ein tilfeldig vald gut. Me g√•r ut fr√• at \\(X\\) og \\(Y\\) er normalfordelt med \\(\\mu_x=168 cm\\), \\(\\mu_y=180 cm\\), \\(\\sigma_x = 6 cm\\) og \\(\\sigma_y = 8 cm\\).   Lag eit program som du kan bruka til √• simulera sannsynet for at ein tilfeldig vald elev er h√∏gare enn 175 cm. Bestem dette sannsynet.   (UDIR - Eksempelsett eksamen S2-V23 oppg√•ve 6, del 2)\n\nüßê Me m√• alts√• b√•de bestemma om det er gut eller jente me har trekt i tillegg til √• finna h√∏gda p√• eleven. Krevande for hand/analytisk men ikkje s√• aller verst √• finna ut av ved simulering!"
  },
  {
    "objectID": "posts/230303_simulering2/index.html#oppg√•va",
    "href": "posts/230303_simulering2/index.html#oppg√•va",
    "title": "Samansett simulering i S2",
    "section": "",
    "text": "P√• ein skule er det 323 jenter og 301 gutar. La \\(X\\) vera h√∏gda til ei tilfeldig vald jente og \\(Y\\) vera h√∏gda til ein tilfeldig vald gut. Me g√•r ut fr√• at \\(X\\) og \\(Y\\) er normalfordelt med \\(\\mu_x=168 cm\\), \\(\\mu_y=180 cm\\), \\(\\sigma_x = 6 cm\\) og \\(\\sigma_y = 8 cm\\).   Lag eit program som du kan bruka til √• simulera sannsynet for at ein tilfeldig vald elev er h√∏gare enn 175 cm. Bestem dette sannsynet.   (UDIR - Eksempelsett eksamen S2-V23 oppg√•ve 6, del 2)\n\nüßê Me m√• alts√• b√•de bestemma om det er gut eller jente me har trekt i tillegg til √• finna h√∏gda p√• eleven. Krevande for hand/analytisk men ikkje s√• aller verst √• finna ut av ved simulering!"
  },
  {
    "objectID": "posts/230303_simulering2/index.html#l√∏kker",
    "href": "posts/230303_simulering2/index.html#l√∏kker",
    "title": "Samansett simulering i S2",
    "section": "1Ô∏è‚É£ L√∏kker",
    "text": "1Ô∏è‚É£ L√∏kker\nTanken her er √• trekka ein elev N gongar. Trekk eit tal mellom 0 og 323+301, og seier at dei 323 f√∏rste (fom. 0 tom. 322) er jenter, og dei siste (resten) er gutar. Simulerer h√∏gda til kvar elev etter det. Tel til slutt opp kor mange som er over 175 cm.\n\nimport numpy as np\nrng = np.random.default_rng()\n\n# tal simuleringar\nN = 10000000\n\n# N elevar (tal mellom 0 og 323+301)\nelevar = rng.integers(0, (323+301), size=N)\n\n# tom liste til h√∏gdene\nh√∏gdar = []\n\n# Finn h√∏gda til kvar elev\nfor elev in elevar:\n    if elev&lt;323: # 0 til 322 er jenter\n        h√∏gdar.append(rng.normal(168, 6))\n    else: # 323 til 323+301 er gutar\n        h√∏gdar.append(rng.normal(180, 8))\n\n# tel opp elevar h√∏gare enn 175 cm\ngunstige = sum(np.array(h√∏gdar)&gt;175)\nsannsyn = gunstige / N\n\nprint(f\"Sannsynet for at ein tilfeldig elev er h√∏gare enn 175 cm er {sannsyn:.4f}\")\n\nSannsynet for at ein tilfeldig elev er h√∏gare enn 175 cm er 0.4172\n\n\n‚è≥ Her brukte maskina mi ca. 17 sek. p√• 10 000 000 simuleringar."
  },
  {
    "objectID": "posts/230303_simulering2/index.html#funksjonar",
    "href": "posts/230303_simulering2/index.html#funksjonar",
    "title": "Samansett simulering i S2",
    "section": "2Ô∏è‚É£ funksjonar‚Ä¶",
    "text": "2Ô∏è‚É£ funksjonar‚Ä¶\nHer gjer me 1Ô∏è‚É£ litt meir fancy. Mykje lik tankegang.\n\nimport numpy as np\nrng = np.random.default_rng()\n\n# tal simuleringar\nN = 10000000\n\n# finn sannsyn jente og sannsyn gutt\np = np.array([323, 301]) / (323+301)\n\n# lagar funksjon som trekk ein elev\ndef trekk_elev(p):\n    h√∏gde = 0\n    # trekk kj√∏nn:\n    kj√∏nn = rng.choice(['j', 'g'], p=p)\n    \n    # trekk h√∏gde (ut fr√• trekt kj√∏nn)\n    if kj√∏nn == 'j':\n        h√∏gde = rng.normal(168, 6, 1)\n    else: \n        h√∏gde = rng.normal(180, 8, 1)\n    \n    return h√∏gde[0]\n\n# tel opp talet elevar som er over 175 cm\ngunstig = 0\n\nfor i in range(N):\n    h = trekk_elev(p)\n    if h&gt;175:\n        gunstig += 1\n\n# finn og skriv ut relativ frekvens\nsannsyn = gunstig/N\nprint(f\"Sannsynet for at ein tilfeldig elev er h√∏gare enn 175 cm er {sannsyn:.4f}\")\n\nSannsynet for at ein tilfeldig elev er h√∏gare enn 175 cm er 0.4169\n\n\n‚è≥ Her brukte maskina mi ca. 5 min. (!!!) p√• 10 000 000 simuleringar."
  },
  {
    "objectID": "posts/230303_simulering2/index.html#alt-i-arrays",
    "href": "posts/230303_simulering2/index.html#alt-i-arrays",
    "title": "Samansett simulering i S2",
    "section": "3Ô∏è‚É£ Alt i arrays üöÄ",
    "text": "3Ô∏è‚É£ Alt i arrays üöÄ\nFor √• gjera programmet effektivt, raskt og lett leseleg droppar eg l√∏kker og funksjonar.\n\nimport numpy as np\nrng = np.random.default_rng()\n\n# antall jenter, gutar og elevar p√• skulen\nj = 323\ng = 301\nn = j + g\n\n# tal simuleringar\nN = 10000000\n\n# finn antall gutar (0) og jenter (1)\nkj√∏nn = rng.choice([0,1], size=N, p=[g/n, j/n])\njenter = sum(kj√∏nn)\ngutar = N - jenter\n\n# finn h√∏gder p√• jenter og gutar for seg\nh_jenter = rng.normal(168, 6, size=jenter)\nh_gutar = rng.normal(180, 8, size=gutar)\n\n# h√∏gder p√• alle dei trekte elevane\nh_trekte = np.append(h_jenter, h_gutar)\n\n# reknar ut sannsynet\ngunstige = sum(h_trekte &gt; 175)\nsannsyn = gunstige / N\n\nprint(f\"Sannsynet for at ein tilfeldig elev er h√∏gare enn 175 cm er {sannsyn:.4f}\")\n\nSannsynet for at ein tilfeldig elev er h√∏gare enn 175 cm er 0.4168\n\n\n‚ö° 3,4 sek. p√• 10 000 000 simuleringar! üòé"
  },
  {
    "objectID": "posts/240112_perplexity/index.html",
    "href": "posts/240112_perplexity/index.html",
    "title": "Perplexity.ai",
    "section": "",
    "text": "Dei siste m√•nadane har eg pr√∏vd ut det nye s√∏keverkt√∏yet Perplexity. Verkt√∏yet baserer seg p√• samtalebaserte s√∏k etter informasjon og kunnskap, og nyttar kunstig intelligens i prosessen.\nI den siste tida har firmaet hatt god vind i segla, etter at dei i sin andre innsamlingsrunde samla inn nesten 800 millionar kroner. Her fekk dei mellom anna st√∏tte av Jeff Bezos (mannen bak Amazon) og teknologi-giganten NVIDIA."
  },
  {
    "objectID": "posts/240112_perplexity/index.html#s√∏ke-med-kunstig-intelligens",
    "href": "posts/240112_perplexity/index.html#s√∏ke-med-kunstig-intelligens",
    "title": "Perplexity.ai",
    "section": "S√∏ke med kunstig intelligens?",
    "text": "S√∏ke med kunstig intelligens?\nPerplaxity nyttar kunstig intelligens p√• ulike m√•tar. Det vert nytta store spr√•kmodellar (LLM) til √• forst√• sp√∏rsm√•let og lage s√∏keord og setningar. Vidare skriv verkt√∏yet eit svar eller ei oppsummering ut fr√• resultata til s√∏ket. I svaret vert det referert til kjelder og det ligg ved ei liste over alle resultata som er nytta i s√∏ket. Eit d√∏me p√• eit resultat ser slik ut.\n\n\n\nStartskjermen"
  },
  {
    "objectID": "posts/240112_perplexity/index.html#fordelar",
    "href": "posts/240112_perplexity/index.html#fordelar",
    "title": "Perplexity.ai",
    "section": "Fordelar",
    "text": "Fordelar\nDet er fleire fordelar med eit slikt verkt√∏y. Her er nokre av dei.\n\nKjelder og organisering\nKjelder vert oppgitt som ein del av svaret, i motsetnad til om ein sp√∏r store spr√•kmodellar om faktasp√∏rsm√•l som ligg i deira ¬´generelle kunnskap¬ª. I tillegg er det lett √• organisera resultat fr√• ulike s√∏k i samlingar (Collections) og dela s√∏keresultata med andre. Det er √≤g mogleik for ¬´sams√∏king¬ª eller invitera andre bidragsytarar til √• jobba i samme samling. Har du ein profil er det i tillegg enkelt √• sp√∏rja vidare fr√• ein eksisterande tr√•d.\n\n\n\nD√∏me p√• samlingar\n\n\n\n\nAnnonsefritt\nEit anna pluss er at Perplexity ikkje er reklamebasert som t.d. Google. Det gjer at det ikkje p√• same m√•te er annonser og brukardata som avgjer kva resultat som kjem √∏vst i resultatlista n√•r ein s√∏ker. I tillegg finns det ein gratisversjon av Perplexity som har mange av dei same funksjonane som betalingsversjonen.\n\n\nAI-profil\nSist men ikkje minst kan du laga deg ein AI-profil. Dette er informasjon du kan gje Perplexity som kan p√•verka b√•de s√∏kinga. Du kan gje instruksjonar om interessefelt, alder, svarspr√•k, s√∏kespr√•k og andre preferansar. Profilen kan vera ¬´global¬ª, alts√• p√•verka alle s√∏k, eller s√• kan det lagast eigne profilar for kvar samling. Denne profilen kan ein laga s√• avansert og spesifikk som ein vil, det er berre tida og interessen som set grenser ü§ì\n\n\nFokus\nFor √• spissa s√∏ket er det √≤g mogleikar for √• velga eit fokus i s√∏ket. Her er det mogleg √• spissa s√∏ket inn mot t.d. YouTube-videoar eller akademiske kjelder.\n\n\n\nUlike fokus"
  },
  {
    "objectID": "posts/240112_perplexity/index.html#ulemper",
    "href": "posts/240112_perplexity/index.html#ulemper",
    "title": "Perplexity.ai",
    "section": "Ulemper",
    "text": "Ulemper\nSj√∏lv om det er mange gode sider med eit verk√∏y som dette er det samstundes viktig √• reflektera rundt dei d√•rlege sidene.\n\nKjeldekritikk og filterboble\nSidan det er store spr√•kmodellar som baserer seg p√• sannsyn som lagar svara m√• ein vera kritisk til informasjonen, ogs√• her. I tillegg m√• ein sj√• over kva kjelder som ligg til grunn for svaret. Det er ikkje sj√∏lvsagt at kjeldene som vert funnen og brukt er dei beste.\nSj√∏lv om s√∏keresultata er tydeleg p√• kva kjelder som vert inkludert i svaret, er det ikkje like klart kva resultat som vert ekskludert. Fr√• erfaringa v√•r med tradisjonelle s√∏kemotorar er dei fleste kjend med filterbobla ein kan hamna i basert p√• dataspor ein legg att p√• nettet. Sidan Perplexity ikkje er reklame- og annonsebasert unng√•r ein den type p√•verknad av s√∏keresultata. Samstundes er det gjerne slik at Perplexity samlar informasjon om bruksm√∏nster hj√• brukarane som skal vera med p√• √• tilpassa s√∏keresultata og gjera dei relevante. Dette kan igjen vera med p√• √• filtrera ut kjelder som kanskje kunne vore interessante. Erfaringa til no er likevel at i dei aller fleste s√∏ka eg har gjort finn verkt√∏yet gode og som oftast p√•litelege og relevante kjelder.\n\n\nPro vs gratis\nFor √• f√• tilgang til dei kraftigaste spr√•kmodellane (GPT-4, Claude 2.1, Perplexity sin eigenutvikla modell osb.) m√• ein ha Pro-abonnement til 200 USD i √•ret. Utan dette abonnementet er det GPT-3.5 som vert nytta. Som mange kjenner til er denne tidlegare varianten ganske underlegen samanlikna med dei nyaste modellane p√• feltet.\nMed Pro-abonnement f√•r ein √≤g ubegrensa tilgang til Copilot som hjelper til med √• forst√• sp√∏rsm√•let og laga relevante s√∏ketermar. Dette er mogleg √• f√• til i ChatGPT med √• inkludera t.d. still relevante oppklaringssp√∏rsm√•l i ledeteksten. Med pro-abonnement f√•r ein ogs√• tilgang til Perplexity sine eigne API-ar og 5 USD i kreditt kvar m√•nad."
  },
  {
    "objectID": "posts/240112_perplexity/index.html#konklusjon",
    "href": "posts/240112_perplexity/index.html#konklusjon",
    "title": "Perplexity.ai",
    "section": "Konklusjon",
    "text": "Konklusjon\nAlt i alt er Perplexity.ai ein spennande utfordrar til Google og dei etablerte tradisjonelle s√∏kemotorane. Utviklinga g√•r raskt og dei eigenutvikla modellane deira vert stadig betre. N√•r ein i tillegg ser p√• kor raskt dei samlar inn pengar og kven som st√∏tter dei ser det ganske lovande ut for nykommaren. For min eigen del har eg bytta ut standard s√∏kemotor i nettlesaren med Perplexity og l√¶rer stadig nye ting om b√•de verda og verkt√∏yet üòä"
  },
  {
    "objectID": "posts/240112_perplexity/index.html#tips-og-triks",
    "href": "posts/240112_perplexity/index.html#tips-og-triks",
    "title": "Perplexity.ai",
    "section": "Tips og triks üöÄ",
    "text": "Tips og triks üöÄ\nFor √• testa verkt√∏yet skikkeleg og ikkje gl√∏yma det vekk har er gjort det til standard s√∏kemotor i nettlesaren min. Det er litt ulikt korleis ein gjer det fr√• nettlesar til nettlesar. Eg nyttar Brave som nettlesar (ein av fleire med personvern- og datasporingsfokus). Under innstillingar/s√∏kemotor kan ein legga til Perplexity som s√∏kemotor med f√∏lgjande lenke:\nhttps://www.perplexity.ai/?q=%s\nMed denne som standard vert alle s√∏k fr√• adresselinja gjort i Perplexity. Om ein likevel vil gjera eit kjapt google-s√∏k ligg det inne snarvegar for det. Startar ein s√∏ket/adresselinja med :g vert Google nytta likvel."
  },
  {
    "objectID": "posts/240112_perplexity/index.html#footnotes",
    "href": "posts/240112_perplexity/index.html#footnotes",
    "title": "Perplexity.ai",
    "section": "Fotnotar",
    "text": "Fotnotar\n\n\nhttps://blog.perplexity.ai/about‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/230202_hydrologimodellering/index.html",
    "href": "posts/230202_hydrologimodellering/index.html",
    "title": "Hydrologiprogrammering",
    "section": "",
    "text": "üì∑ Dettifoss, Island"
  },
  {
    "objectID": "posts/230202_hydrologimodellering/index.html#importere-bibliotek",
    "href": "posts/230202_hydrologimodellering/index.html#importere-bibliotek",
    "title": "Hydrologiprogrammering",
    "section": "Importere bibliotek",
    "text": "Importere bibliotek\nVassf√∏ringsdataa er lasta ned i csv-format. Me bruker pandas for √• jobba med dette effektivt. I tillegg vert det litt plotting og matematikk, s√• me treng pyplot og numpy i tillegg.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np"
  },
  {
    "objectID": "posts/230202_hydrologimodellering/index.html#opprette-dataramme",
    "href": "posts/230202_hydrologimodellering/index.html#opprette-dataramme",
    "title": "Hydrologiprogrammering",
    "section": "Opprette dataramme",
    "text": "Opprette dataramme\nCSV-fila med vassf√∏ringsdata les me inn i ei dataramme (dataframe). Viss ein tar ein kikk p√• fila ser ein at det er brukt semikolon for √• skilja verdiane, det er to rader f√∏r verdiane kjem. Me lagar litt forenkla namn p√• kolonnene, og les inn data. I tillegg er det nytta komma (og ikkje punktum) som desimalteikn.\n\n\n\nüîç Dei f√∏rste linjene\n\n\n\ndf = pd.read_csv(\n    \"vassforing_reinsnos_dogn.csv\", \n    sep = \";\", \n    skiprows = 2, \n    names = [\"dato\", \"Vassf√∏ring\", \"Korrigert\", \"Kontrollert\"], \n    parse_dates = True, \n    decimal=\",\"\n)\n\ndf.index = pd.to_datetime(df['dato']) \ndf.index = pd.to_datetime(df.index.date)\ndf = df.drop(columns = [\"dato\", \"Korrigert\", \"Kontrollert\"])\n\nSjekkar dei nyaste fem m√•lingane i tabellen for √• sj√• at alt ser ok ut.\n\ndf.tail()\n\n\n\n\n\n\n\n\nVassf√∏ring\n\n\n\n\n2023-01-24\n1.299365\n\n\n2023-01-25\n1.593457\n\n\n2023-01-26\n2.128418\n\n\n2023-01-27\n2.322153\n\n\n2023-01-28\n2.324195\n\n\n\n\n\n\n\nI tillegg kan me pr√∏va √• plotta verdiane i dataramma.  Har med ; for √• unng√• √• visa meldinga &lt;AxesSubplot: &gt;\n\ndf.plot();\n\n\n\n\n\n\n\n\nMe ser her at dette ikkje er spesielt nyttig eller informativt, men grafen viser oss at det p√• 1920-talet er eit par √•r utan m√•lingar. Korleis dette kan fiksast kjem me attende til litt seinare."
  },
  {
    "objectID": "posts/230202_hydrologimodellering/index.html#middelflom",
    "href": "posts/230202_hydrologimodellering/index.html#middelflom",
    "title": "Hydrologiprogrammering",
    "section": "Middelflom",
    "text": "Middelflom\nMiddelflommen til ei elv er rekna ut fr√• den st√∏rste d√∏gnvassf√∏ringa per √•r over eit lengre tidsrom. Fr√• NVE/varsom.no finn me denne definisjonen:\n\nEn middelflom (normal flom) defineres som gjennomsnittet av h√∏yeste vannf√∏ring hvert √•r i en lang √•rrekke.\n\nFor √• rekna ut dette m√• me alts√• f√∏rst finna den maksimale vassf√∏ringa per √•r. Bruker groupby i Pandas for √• finne dette.\n\n√•rleg_vf_maks = df.groupby(by=[df.index.year]).max()\n√•rleg_vf_maks.head()\n\n\n\n\n\n\n\n\nVassf√∏ring\n\n\n\n\n1917\n26.98031\n\n\n1918\n50.93218\n\n\n1919\n37.72713\n\n\n1920\n63.26006\n\n\n1921\n58.04514\n\n\n\n\n\n\n\nPlottar den nye dataramma √•rleg_maks som kun har ei m√•ling per √•r:\n\n√•rleg_vf_maks.plot();\n\n\n\n\n\n\n\n\nP√• grunn av ‚Äúholet‚Äù i m√•lingane tar me berre med data fr√• 1930 eller seinare med oss vidare. I tillegg er det vinter (og sn√∏/is) for dataa me har for 2023, s√• me avgrensar til 2022.\n\n√•rleg_vf_maks = √•rleg_vf_maks.loc[1930:2022]\n√•rleg_vf_maks.head()\n\n\n\n\n\n\n\n\nVassf√∏ring\n\n\n\n\n1930\n43.82251\n\n\n1931\n46.29647\n\n\n1932\n52.52979\n\n\n1933\n68.09634\n\n\n1934\n48.32775\n\n\n\n\n\n\n\nMe vil finna gjennomsnittleg st√∏rste √•rlege vassf√∏ring over fleire √•r. Vel her √• sj√• p√• eit gjennomsnitt p√• 30 √•r om gongen. Bruker funksjonen rolling og mean i kombinasjon. rolling gjer at me kan g√• gjennom dataramma og sj√• p√• dei 30 tidlegare verdiane til kvar rad i tabellen og finna gjennomsnittet (mean) i dette rullande vinduet.\n\nmaksvf_og_middelflom = √•rleg_vf_maks.copy()\nmaksvf_og_middelflom[\"Middelflom\"] = √•rleg_vf_maks.rolling(window = 30).mean()\n\nSer p√• dei f√∏rste 5 radene\n\nmaksvf_og_middelflom.head()\n\n\n\n\n\n\n\n\nVassf√∏ring\nMiddelflom\n\n\n\n\n1930\n43.82251\nNaN\n\n\n1931\n46.29647\nNaN\n\n\n1932\n52.52979\nNaN\n\n\n1933\n68.09634\nNaN\n\n\n1934\n48.32775\nNaN\n\n\n\n\n\n\n\nSer at dei fem f√∏rste radene i den nye dataramma er NaN (not a number). Dette skjer fordi ein ikkje kan ta gjennomsnitt av dei siste 30 √•ra f√∏r det har g√•tt 30 √•r‚Ä¶ Sjekkar dei nyaste radene i staden:\n\nmaksvf_og_middelflom.tail()\n\n\n\n\n\n\n\n\nVassf√∏ring\nMiddelflom\n\n\n\n\n2018\n73.75180\n60.571163\n\n\n2019\n47.75206\n59.893282\n\n\n2020\n78.19958\n60.860965\n\n\n2021\n46.81937\n60.837067\n\n\n2022\n73.51824\n60.972971\n\n\n\n\n\n\n\nPlottar dataramma og ser korleis dei nye verdiane ser ut:\n\nmaksvf_og_middelflom.plot();"
  },
  {
    "objectID": "posts/230202_hydrologimodellering/index.html#modellering-av-middelflom",
    "href": "posts/230202_hydrologimodellering/index.html#modellering-av-middelflom",
    "title": "Hydrologiprogrammering",
    "section": "Modellering av middelflom",
    "text": "Modellering av middelflom\nSer at trenden er oppadg√•ande og relativt line√¶r. √ònsker √• laga ein line√¶r modell. Bruker polyfit fr√• NumPy.\n\n# √•ra me har data p√• middelflom\n# fr√• og med 1959 til men ikkje med 2023\nx = np.arange(1959, 2023) \n\n# finn koeffesientane til f√∏rstegradspolynomet\na, b = np.polyfit(x, maksvf_og_middelflom[\"Middelflom\"].loc[1959:2022], 1)\n\n# definerer line√¶r funksjon\ndef f(x):\n    return a*x + b\n\n# plottar dataramma\nmaksvf_og_middelflom.plot(\n    figsize = (20,9), \n    grid = True, \n    fontsize = 16, \n    linewidth = 3, \n    color = [\"lightsteelblue\", \"royalblue\"]\n)\n\n# plottar modellen\nplt.plot(\n    x, f(x), \n    linewidth = 2, \n    label = \"Modell for middelflom\", \n    color = \"red\"\n)\n\n# pynting av plot\nplt.title(\"Vassf√∏ring og middelflom\\n\", fontsize = 24)\nplt.legend(fontsize = 16)\nplt.ylabel(\"Vassf√∏ring, kubikkmeter/s\", fontsize = 16)\nplt.xlabel(\"√Ör\", fontsize = 16)\n#plt.savefig(\"Reinsnos - √•rleg maksvassf√∏ring og middelflom.png\", dpi = 300)\nplt.show()\n\n\n\n\n\n\n\n\nEkstrapolasjon - modell for framtidig middelflom\nMe kan bruka trendlinja for middelflommen som modell for √• seie noko om korleis utviklinga vil vera i √•ra framover (om utviklinga held fram som no):\n\n\nKode\nmaksvf_og_middelflom.plot(figsize = (20,9), \n                grid = True, \n                fontsize = 16, \n                linewidth = 3, \n                color = [\"lightsteelblue\", \"royalblue\"]\n               )\n\nplt.plot(x, f(x), \n         linewidth = 1.5, \n         label = \"Modell - middelflom\", \n         color = \"crimson\"\n        )\n\n# Plottar forlenginga av den line√¶re modellen\nx2 = np.arange(2022, 2101)\nplt.plot(x2, f(x2), \":\", linewidth = 3, color = \"crimson\")\n\n# pynting av plot\nplt.title(\"Vassf√∏ring og middelflom - modell fram mot 2100 \\n\", fontsize = 24)\nplt.legend(fontsize = 16)\nplt.ylabel(\"Vassf√∏ring, kubikkmeter/s\", fontsize = 16)\nplt.xlabel(\"√Ör\", fontsize = 16)\n#plt.savefig(\"Reinsnos - modellering av middelflom 2100.png\", dpi = 300)\nplt.show()"
  },
  {
    "objectID": "posts/230202_hydrologimodellering/index.html#sjekkar-opp-mot-nve-sine-flom-data",
    "href": "posts/230202_hydrologimodellering/index.html#sjekkar-opp-mot-nve-sine-flom-data",
    "title": "Hydrologiprogrammering",
    "section": "Sjekkar opp mot NVE sine flom-data",
    "text": "Sjekkar opp mot NVE sine flom-data\nFr√• stasjonsssida til Reinsnosvatn kan me finna data om ulike typar flom.\n\n\n\nFlomdata fr√• NVE\n\n\nSer at verdien for 20-√•rsflom er 78,28 \\(m^3/s\\). Plottar inn linja \\(y=78,28\\) i samme figur som tidlegare. Bruker plt.axhline() for √• teikna horisontal linje.\n\n\nKode\n# √•ra me har data p√• middelflom\n# fr√• og med 1959 til men ikkje med 2023\nx = np.arange(1959, 2023) \n\n# finn koeffesientane til f√∏rstegradspolynomet\na, b = np.polyfit(x, maksvf_og_middelflom[\"Middelflom\"].loc[1959:2022], 1)\n\n# definerer line√¶r funksjon\ndef f(x):\n    return a*x + b\n\n# plottar dataramma\nmaksvf_og_middelflom.plot(\n    figsize = (20,9), \n    grid = True, \n    fontsize = 16, \n    linewidth = 3, \n    color = [\"lightsteelblue\", \"royalblue\"]\n)\n\n# plottar modellen\nplt.plot(\n    x, f(x), \n    linewidth = 2, \n    label = \"Modell for middelflom\", \n    color = \"red\"\n)\n\n# plottar 20-√•rsflom\nplt.axhline(\n        y = 78.28,\n        color = \"crimson\", \n        linewidth = 3, \n        linestyle = \":\", \n        label = \"20-√•rsflom\"\n)\n\n# pynting av plot\nplt.title(\"Vassf√∏ring og middelflom\\n\", fontsize = 24)\nplt.legend(fontsize = 16)\nplt.ylabel(\"Vassf√∏ring, kubikkmeter/s\", fontsize = 16)\nplt.xlabel(\"√Ör\", fontsize = 16)\n#plt.savefig(\"Reinsnos - √•rleg maksvassf√∏ring og middelflom.png\", dpi = 300)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTips til oppg√•ver\n\n\n\nPlott linjer for dei ulike flom-typane. Kor godt stemmer observasjonane med desse tala?  Kva ligg i omgrepet 20-√•rsflom?"
  },
  {
    "objectID": "posts/230202_hydrologimodellering/index.html#utrekningar",
    "href": "posts/230202_hydrologimodellering/index.html#utrekningar",
    "title": "Hydrologiprogrammering",
    "section": "Utrekningar",
    "text": "Utrekningar\nFinn ulike verdiar per dag i √•ret over dei 104 √•ra.\n\npiv[\"min\"] = piv.min(axis = 1)\npiv[\"maks\"] = piv.max(axis = 1)\npiv[\"75%\"] = piv.quantile(q = 0.75,axis = 1)\npiv[\"median\"] = piv.median(axis = 1)\npiv[\"25%\"] = piv.quantile(q = 0.25,axis = 1)\n\npiv.head()\n\n\n\n\n\n\n\n\nVassf√∏ring\nmin\nmaks\n75%\nmedian\n25%\n\n\n√•r\n1917\n1918\n1919\n1920\n1921\n1922\n1923\n1924\n1925\n1929\n...\n2019\n2020\n2021\n2022\n2023\n\n\n\n\n\n\n\ndoy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\nNaN\n0.751369\n0.520992\n0.110245\n0.520992\n2.268141\n0.858653\nNaN\n4.303123\nNaN\n...\n2.347107\n12.096400\n2.466642\n4.124214\n2.000038\n0.110245\n28.48319\n2.589138\n1.381706\n0.701046\n\n\n2\nNaN\n0.751369\n0.481094\n0.095431\n0.562897\n2.268141\n0.751369\nNaN\n4.003652\nNaN\n...\n2.669421\n8.641389\n2.288357\n5.344579\n1.913351\n0.095431\n19.01132\n2.548025\n1.417153\n0.652886\n\n\n3\nNaN\n0.701046\n0.443164\n0.095431\n0.606849\n2.166990\n0.803893\nNaN\n3.858951\nNaN\n...\n2.515568\n8.580434\n2.122319\n6.083396\n1.827513\n0.095431\n11.99520\n2.491543\n1.381060\n0.606849\n\n\n4\nNaN\n0.701046\n0.407161\n0.095431\n0.652886\n1.973261\n0.915689\nNaN\n3.717565\nNaN\n...\n2.336836\n7.108252\n1.954245\n5.640584\n1.779285\n0.095431\n14.41007\n2.421806\n1.275205\n0.652886\n\n\n5\nNaN\n0.652886\n0.373045\n0.110245\n0.803893\n1.703600\n0.915689\nNaN\n3.444615\nNaN\n...\n2.265773\n5.907576\n1.806864\n4.668677\n1.701279\n0.110245\n18.95604\n2.372195\n1.207931\n0.728653\n\n\n\n\n5 rows √ó 109 columns"
  },
  {
    "objectID": "posts/230202_hydrologimodellering/index.html#plottar",
    "href": "posts/230202_hydrologimodellering/index.html#plottar",
    "title": "Hydrologiprogrammering",
    "section": "Plottar",
    "text": "Plottar\n\n# Plottar minimumsverdiar\npiv[\"min\"].plot(\n    figsize = (20, 8),\n    color = \"seagreen\", \n    linewidth = 0.8, \n    grid = False, \n    fontsize = 18, \n    legend = False,\n    label = \"Minste verdi\"\n)\n\n# PLottar maksimumsverdiar\npiv[\"maks\"].plot(\n    color = \"seagreen\", \n    linewidth = 0.8, \n    grid = False, \n    fontsize = 18, \n    legend = False,\n    label = \"St√∏rste verdi\"\n)\n\n# Fargelegg omr√•det mellom 25- og 75-persentilane\nplt.fill_between(\n    piv.index, \n    piv[\"25%\"], piv[\"75%\"], \n    facecolor='green', \n    alpha=0.2, \n    interpolate=True,\n    label = \"25% - 75%\"\n)\n\n# Plottar medianen\npiv[\"median\"].plot(\n    linewidth = 2, \n    color = \"darkgreen\",\n    label = \"Median\"\n)\n\n# Pyntar p√• plottet\nplt.xlabel(\"Dag i √•ret \\n (01. jan - 31. des)\", fontsize = 18)\nplt.ylabel(\"Vassf√∏ring i $m^3/s$\", fontsize = 18)\nplt.title(\"Vassf√∏ring - per dag i √•ret \\n\", fontsize = 24)\nplt.legend(fontsize = 16)\nplt.savefig(\"Reinsnos - vassf√∏ring per dag gjennom √•ret.png\", dpi = 300)\nplt.show()"
  },
  {
    "objectID": "posts/230202_hydrologimodellering/index.html#oppsummert",
    "href": "posts/230202_hydrologimodellering/index.html#oppsummert",
    "title": "Hydrologiprogrammering",
    "section": "Oppsummert",
    "text": "Oppsummert\nDet er mykje kjekt ein kan gjera med vassf√∏ringsdata fr√• NVE. B√•de det √• laga plott som me har gjort over, og arbeida med store datamengder som dette kan erfaringsmessig gje elevane god innsikt i samanhengar og forst√•ing for omgrep i hydrologien.\n\n\n\n\n\n\nTips til undervisinga\n\n\n\nDei elevlaga hydrogramma er eit godt utganspunkt for diskusjonar og utforsking.\n1Ô∏è‚É£ Jobb med koden saman med elevane. Lag plotta.  2Ô∏è‚É£ Be elevane om √• finna andre elver (ulik storleik, ulik geografisk plassering) og lage eigne plott.  3Ô∏è‚É£ Sj√• p√• ulike hydrogram laga av elevane (utan namn p√• vassdraget) og ha diskusjon i klassen om kva informasjon som ligg i plotta (Nord/s√∏r/aust/vest? H√∏gde? Isbre? Sn√∏smelting/regnflom? Regulering?)  4Ô∏è‚É£ Avsl√∏r namn og plassering - korleis stemte det?"
  },
  {
    "objectID": "posts/230127_zotero/index.html",
    "href": "posts/230127_zotero/index.html",
    "title": "Zotero - kva, kvifor, korleis?",
    "section": "",
    "text": "Zotero er eit verkt√∏y for √• handtera kjelder og siteringar. Det er relativt enkelt √• bruka, og kan nyttast p√• tvers av ulike platformar og programvare. Terskelen for √• implementera Zotero i undervisinga kan kanskje opplevast som litt h√∏g. S√• her kjem eit par argument for kvifor det kan vera ein fordel √• ta dette steget, samt eit par konkrete tips og triks üöÄ"
  },
  {
    "objectID": "posts/230127_zotero/index.html#organisere-biblioteket",
    "href": "posts/230127_zotero/index.html#organisere-biblioteket",
    "title": "Zotero - kva, kvifor, korleis?",
    "section": "Organisere biblioteket",
    "text": "Organisere biblioteket\nN√•r du har lasta ned Zotero startar du med eit tomt bibliotek. Dette kan du organisera i samlingar (mapper). Du lager nye samlingar med √• trykka p√• knappen til venstre over Mitt bibliotek\n\n\n\nOrganisere biblioteket\n\n\nHer kan ein t.d. dela inn etter fag, etter √•rstrinn eller andre inndelingar slik ein √∏nsker. Det er mogleg √• ha under-samlingar viss ein √∏nsker det."
  },
  {
    "objectID": "posts/230127_zotero/index.html#legge-til-kjelder",
    "href": "posts/230127_zotero/index.html#legge-til-kjelder",
    "title": "Zotero - kva, kvifor, korleis?",
    "section": "Legge til kjelder",
    "text": "Legge til kjelder\nN√•r ein skal fylla biblioteket sitt gjer ein dette p√• fleire ulike m√•tar. Her vil eg demonstrera korleis ein gjer det\n\nmanuelt\nmed Zotero Connector\nmagisk üßô\n\nLegge til manuelt\n\n\n\n\n\nFor √• legga til kjelder trykker ein p√• det gr√∏ne pluss-teiknet og vel ein passande type (t.d. bok). N√•r ein har gjort dette f√•r ein opp ei kolonne til h√∏gre med ulike felt som m√• fyllast ut:\n\n\n\n\n\n\n\n\n\n\n\nTips\n\n\n\nP√• sidene til kjeldekompasset finn ein informasjon om kva felt som m√• fyllast ut.  Her er eit d√∏me p√• kapittel i bok med redakt√∏r (i APA7-stil)\n\n\nMed Zotero Connector\nZotero Connector er ein plugin til nettlesar som gjer at ein automatisk kan legga kjelder p√• nett inn i biblioteket sitt. Her kan ein ta med snapshot av nettsida ein bes√∏ker, eller lasta ned pdf-dokumentet ein er inne p√•. Ein kan √≤g velga kva for samling i biblioteket den aktuelle ressursen skal lagrast til\n\n\n\n\n\n\n\n\n\n\n\nPass p√•\n\n\n\nDet er ikkje alltid at alle felt vert rett fylt ut i Zotero, s√• dette m√• dobbelsjekkast (gjerne opp mot kildekompasset)\n\n\nMagisk\nNokre kjelder som b√∏ker og forskingsartiklarkan leggast inn ved hjelp av identifikatorar som ISBN, DOI, PMID osb. D√• trykker ein p√• tryllestav-knappen til h√∏gre for den vanlege ‚Äúlegg til‚Äù-knappen. For ein del norske b√∏ker fungerer dette ofte ikkje, men for forskingsartiklar med DOI passar det godt."
  },
  {
    "objectID": "posts/230127_zotero/index.html#sitere-i-tekstbehandlar",
    "href": "posts/230127_zotero/index.html#sitere-i-tekstbehandlar",
    "title": "Zotero - kva, kvifor, korleis?",
    "section": "Sitere i tekstbehandlar",
    "text": "Sitere i tekstbehandlar\nI Microsoft Word og Google Docs er det eigne Zotero-verkt√∏y. N√•r du har lasta ned og innstallert Zotero vil du sj√• dette neste gong du opnar Word.\n\n\n\n\n\nHer ligg det verkt√∏y for √• legga inn referansar i tekst og kjeldeliste/bibliografi til slutt. For √• legge inn referanse i teksten trykker ein p√• Add/Edit Citation og s√∏ker etter kjelda i s√∏kefeltet. F√∏rste gang blir du bedt om √• velga siteringsstil. Eg nyttar vanlegvis APA7 (American Psychological Association).\n\n\n\n\n\nOm du vil inkludera sidetal, kan du klikka p√• den valgte kjelda og legga inn dette manuelt. D√• vil Zotero automatisk formatera referansen i teksten p√• rett m√•te (og p√• rett spr√•k).\n\n\n\n\n\nTil slutt kan du laga kjeldeliste av dei kjeldene som er nytta i teksten med √• trykka p√• Add/Edit Bibliography. Denne vert automatisk sortert og formatert etter valgt referansestil."
  },
  {
    "objectID": "posts/230127_zotero/index.html#sitere-utanfor-tekstbehandlar",
    "href": "posts/230127_zotero/index.html#sitere-utanfor-tekstbehandlar",
    "title": "Zotero - kva, kvifor, korleis?",
    "section": "Sitere utanfor tekstbehandlar",
    "text": "Sitere utanfor tekstbehandlar\nI presentasjonsverkt√∏y som PowerPoint har ein ikkje innebygde Zotero-verkt√∏y. Likevel er Zotero til god hjelp. Ein m√•te ein kan halda oversikt over kva kjelder ein har nytta i eit aktuelt prosjekt er gjennom √• legga til emneord til dei ulike kjeldene. Til d√∏mes blogg-zotero. D√• kan ein s√∏ka og filtrera biblioteket sitt etter det spesifikke emneordet. Vidare kan ein d√• kopiera henvising (shift+cmd/windows+A) av den valgte kjelda. Ein kan til slutt markera alle kjeldene og kopiera bibliografi (shift+cmd/windows+C)."
  },
  {
    "objectID": "posts/230209_simulering1/index.html",
    "href": "posts/230209_simulering1/index.html",
    "title": "Grunnleggjande simulering i NumPy",
    "section": "",
    "text": "Simulering er ein viktig del av l√¶replanen i matematikk for samfunnsfag (S1 + S2) i LK20. Mange l√¶reb√∏ker er opptatt av l√∏kker i simuleringa si. Det tar tid √• k√∏yra, kan vera meir tungt for elevane √• forst√• og kan by p√• meir feilmeldingar mtp. syntaks. Her kjem eit (kanskje av fleire) innlegg med tips til simulering med NumPy.\n\n\nFor √• simulera lagar me ein random generator. Denne kallar me for rng (random number generator). Me kan tilpassa default_rng() med √• gje han ulike argument (feks. seed for √• f√• reproduserbare tal) men i praksis i S1 og S2 er det ikkje noko me treng √• tenka p√•.\n\nimport numpy as np\nrng = np.random.default_rng()\n\nDenne generatoren kan me bruka til mange ulike simuleringar. Om me vil kasta ein terning ein gong kan me trekka eit heiltal. Det gjer me med funksjonen integers(low, high) som ligg i rng-en v√•r.\n\nterning = rng.integers(1, 7)\nprint(terning)\n\n3\n\n\n\n\n\n\n\n\nPass p√•\n\n\n\nHer vil terning = rng.integers(1, 7) gje oss\n\\[\\text{terning} \\in \\{1, 2, 3, 4, 5, 6\\}\\]\nMed andre ord \\[1 \\leq \\text{terning} &lt; 7\\]\n\n\nOm me vil kasta fleire terningar kan me i tillegg gje inn size som argument til rng.integers\n\nterningar = rng.integers(1, 7, 10)\nprint(terningar)\n\n[1 1 4 2 5 1 6 5 3 5]\n\n\nVidare kan me rekna med resultata. Desse er lagra i ein array (ein variabeltype som minnar om lister).\nMe kan t.d. sjekka kor mange av dei 10 terningane me kasta som vart seksarar. F√∏rst kan me sjekka kva verdiar som er 6:\n\nterningar == 6\n\narray([False, False, False, False, False, False,  True, False, False,\n       False])\n\n\nDette kan me bruka til √• rekna med. Sidan False vert tolka som 0 og True vert tolka som 1 kan me finna summen av arrayen med sanningsvariablane:\n\nsum(terningar == 6)\n\n1\n\n\n\n\n\nMe trillar terning.\n\\(A\\): terningen viser 5 eller 6.\nFinn \\(P(A)\\) ved hjelp av simulering.\n\nimport numpy as np\nrng = np.random.default_rng()\n\n# tal simuleringar\nN = 10000000\n\n# triller terning N gongar\nterningar = rng.integers(1, 7, N)\n\n# finn antall femmarar og seksarar\ngunstige = sum(terningar &gt;= 5)\n\n# finn og skriv ut relativ frekvens\nrel_frek = gunstige / N\nprint(f\"P(A) = {rel_frek:.4f}\")\n\nP(A) = 0.3332\n\n\nUt fr√• 10 000 000 simuleringar ser me at \\(P(A)=0,3333\\). Dvs. det er \\(33,33\\%\\) sannsynleg √• trilla 5 eller 6 p√• terningen.\nD√∏met over er eit problem som ikkje er vanskeleg √• l√∏ysa analytisk, og dermed ikkje veldig spennande √• bruka simulering p√•. Men om problema vert vanskelege √• rekna p√• er dei ofte ikkje s√• vanskelege √• simulera. Eit litt meir avansert problem (som er lett √• simulera) finn me i S1-eksamen fr√• v√•ren 2022:\n\nI eit spel kastar du tre terningar. Du multipliserer saman augetalet p√• terningane. Dersom dette produktet er st√∏rre enn 100, vinn du. Bestem sannsynet for √• vinne ved √• k√∏yre simuleringar. Hugs √• vise korleis du kjem fram til svaret. UDIR (2022) - Eksamen S1-V22\n\nFor √• svare p√• denne oppg√•va treng me litt meir kjennskap til korleis me kan jobba med arrays. Arrays er ein form for lister eller vektorar. Me kan utf√∏ra ulike rekneoperasjonar med dei. Me kan t.d. legga dei saman og multiplisera dei:\n\na = np.array([1, 2, 3, 4, 5, 6])\nb = np.array([6, 5, 4, 3, 2, 1])\n\nprint(a+b)\nprint(a*b)\n\n[7 7 7 7 7 7]\n[ 6 10 12 12 10  6]\n\n\nD√• har me alt me treng for √• l√∏ysa eksamensoppg√•va:\n\nimport numpy as np\nrng = np.random.default_rng()\n\n# antall simuleringar\nN = 1000000\n\n# triller 3 terningar N gongar\nt1 = rng.integers(1, 7, N)\nt2 = rng.integers(1, 7, N)\nt3 = rng.integers(1, 7, N)\n\n# finn produktet\nprod = t1* t2 * t3\n\n# tel opp kor mange av produkta som er over 100\ngunstige = sum(prod &gt; 100)\n\n# finn og skriv ut relativ frekvens\nrel_frek = gunstige / N\nprint(f\"P(produkt over 100) = {rel_frek:.4f}\")\n\nP(produkt over 100) = 0.0928\n\n\nDet er med andre ord ca. \\(9,34\\%\\) sannsynleg √• vinna spelet."
  },
  {
    "objectID": "posts/230209_simulering1/index.html#random-generator",
    "href": "posts/230209_simulering1/index.html#random-generator",
    "title": "Grunnleggjande simulering i NumPy",
    "section": "",
    "text": "For √• simulera lagar me ein random generator. Denne kallar me for rng (random number generator). Me kan tilpassa default_rng() med √• gje han ulike argument (feks. seed for √• f√• reproduserbare tal) men i praksis i S1 og S2 er det ikkje noko me treng √• tenka p√•.\n\nimport numpy as np\nrng = np.random.default_rng()\n\nDenne generatoren kan me bruka til mange ulike simuleringar. Om me vil kasta ein terning ein gong kan me trekka eit heiltal. Det gjer me med funksjonen integers(low, high) som ligg i rng-en v√•r.\n\nterning = rng.integers(1, 7)\nprint(terning)\n\n3\n\n\n\n\n\n\n\n\nPass p√•\n\n\n\nHer vil terning = rng.integers(1, 7) gje oss\n\\[\\text{terning} \\in \\{1, 2, 3, 4, 5, 6\\}\\]\nMed andre ord \\[1 \\leq \\text{terning} &lt; 7\\]\n\n\nOm me vil kasta fleire terningar kan me i tillegg gje inn size som argument til rng.integers\n\nterningar = rng.integers(1, 7, 10)\nprint(terningar)\n\n[1 1 4 2 5 1 6 5 3 5]\n\n\nVidare kan me rekna med resultata. Desse er lagra i ein array (ein variabeltype som minnar om lister).\nMe kan t.d. sjekka kor mange av dei 10 terningane me kasta som vart seksarar. F√∏rst kan me sjekka kva verdiar som er 6:\n\nterningar == 6\n\narray([False, False, False, False, False, False,  True, False, False,\n       False])\n\n\nDette kan me bruka til √• rekna med. Sidan False vert tolka som 0 og True vert tolka som 1 kan me finna summen av arrayen med sanningsvariablane:\n\nsum(terningar == 6)\n\n1"
  },
  {
    "objectID": "posts/230209_simulering1/index.html#d√∏me",
    "href": "posts/230209_simulering1/index.html#d√∏me",
    "title": "Grunnleggjande simulering i NumPy",
    "section": "",
    "text": "Me trillar terning.\n\\(A\\): terningen viser 5 eller 6.\nFinn \\(P(A)\\) ved hjelp av simulering.\n\nimport numpy as np\nrng = np.random.default_rng()\n\n# tal simuleringar\nN = 10000000\n\n# triller terning N gongar\nterningar = rng.integers(1, 7, N)\n\n# finn antall femmarar og seksarar\ngunstige = sum(terningar &gt;= 5)\n\n# finn og skriv ut relativ frekvens\nrel_frek = gunstige / N\nprint(f\"P(A) = {rel_frek:.4f}\")\n\nP(A) = 0.3332\n\n\nUt fr√• 10 000 000 simuleringar ser me at \\(P(A)=0,3333\\). Dvs. det er \\(33,33\\%\\) sannsynleg √• trilla 5 eller 6 p√• terningen.\nD√∏met over er eit problem som ikkje er vanskeleg √• l√∏ysa analytisk, og dermed ikkje veldig spennande √• bruka simulering p√•. Men om problema vert vanskelege √• rekna p√• er dei ofte ikkje s√• vanskelege √• simulera. Eit litt meir avansert problem (som er lett √• simulera) finn me i S1-eksamen fr√• v√•ren 2022:\n\nI eit spel kastar du tre terningar. Du multipliserer saman augetalet p√• terningane. Dersom dette produktet er st√∏rre enn 100, vinn du. Bestem sannsynet for √• vinne ved √• k√∏yre simuleringar. Hugs √• vise korleis du kjem fram til svaret. UDIR (2022) - Eksamen S1-V22\n\nFor √• svare p√• denne oppg√•va treng me litt meir kjennskap til korleis me kan jobba med arrays. Arrays er ein form for lister eller vektorar. Me kan utf√∏ra ulike rekneoperasjonar med dei. Me kan t.d. legga dei saman og multiplisera dei:\n\na = np.array([1, 2, 3, 4, 5, 6])\nb = np.array([6, 5, 4, 3, 2, 1])\n\nprint(a+b)\nprint(a*b)\n\n[7 7 7 7 7 7]\n[ 6 10 12 12 10  6]\n\n\nD√• har me alt me treng for √• l√∏ysa eksamensoppg√•va:\n\nimport numpy as np\nrng = np.random.default_rng()\n\n# antall simuleringar\nN = 1000000\n\n# triller 3 terningar N gongar\nt1 = rng.integers(1, 7, N)\nt2 = rng.integers(1, 7, N)\nt3 = rng.integers(1, 7, N)\n\n# finn produktet\nprod = t1* t2 * t3\n\n# tel opp kor mange av produkta som er over 100\ngunstige = sum(prod &gt; 100)\n\n# finn og skriv ut relativ frekvens\nrel_frek = gunstige / N\nprint(f\"P(produkt over 100) = {rel_frek:.4f}\")\n\nP(produkt over 100) = 0.0928\n\n\nDet er med andre ord ca. \\(9,34\\%\\) sannsynleg √• vinna spelet."
  },
  {
    "objectID": "posts/230209_simulering1/index.html#d√∏me-p√•-bruk",
    "href": "posts/230209_simulering1/index.html#d√∏me-p√•-bruk",
    "title": "Grunnleggjande simulering i NumPy",
    "section": "D√∏me p√• bruk",
    "text": "D√∏me p√• bruk\nMe plantar 150 fr√∏. Sannsynet for at eit fr√∏ spirer er 85%.\nKva er sannsynet for at minst 130 fr√∏ spirer?\n\\(X\\): antall fr√∏ som spirer.\n\nimport numpy as np\nrng = np.random.default_rng()\n\nN = 1000000     # antall simuleringar\n\nn = 150         # antall delfors√∏k/fr√∏\np = 0.85        # sannsynet for at eitt fr√∏ spirer\n\n# ser kor mange av fr√∏a som spirer kvar simulering\nspirer = rng.binomial(n, p, N)\n\n# tell opp dei simuleringane som gjev 130+ fr√∏ som spirer\ngunstige = sum(spirer &gt;= 130)\n\nrel_frek = gunstige / N\nprint(f\"P(X &gt;= 130) = {rel_frek:.4f}\")\n\nP(X &gt;= 130) = 0.3311\n\n\nSer at \\(P(X\\geq 130) = 0,3321\\)."
  },
  {
    "objectID": "posts/230209_simulering1/index.html#d√∏me-p√•-bruk-1",
    "href": "posts/230209_simulering1/index.html#d√∏me-p√•-bruk-1",
    "title": "Grunnleggjande simulering i NumPy",
    "section": "D√∏me p√• bruk",
    "text": "D√∏me p√• bruk\nDet ligg 4 daim og 7 banantwist i ei sk√•l. Du trekk 3 bitar. Kva er sannsynet for at akkurat to av desse er daim?\n\nimport numpy as np\nrng = np.random.default_rng()\n\n# antall simuleringar\nN = 1000000\n\nngood = 4      # daim i populasjonen\nnbad = 7       # banan i populasjonen\nnsample = 3    # antall bitar me trekk\n\n# simulerer\ntwist = rng.hypergeometric(ngood, nbad, nsample, size=N)\n\n# tel opp kor mange gonagar me fekk 2 daim\ngunstige = sum(twist == 2)\n\nrel_frek = gunstige / N\nprint(f\"P(X=2) = {rel_frek:.4f}\")\n\nP(X=2) = 0.2539\n\n\nDet er \\(25,5\\%\\) sannsynleg at det er akkurat to daimtwist."
  },
  {
    "objectID": "posts/230425_jordskjelv/index.html",
    "href": "posts/230425_jordskjelv/index.html",
    "title": "Jordskjelvpython",
    "section": "",
    "text": "I dette opplegget tek me utgangspunkt i store mengdar ekte jordskjelvdata. Desse vil me systematisera og visualisera ved hjelp av biblioteket geopandas i Python üêç  D√∏me p√• ein av figurane me kjem til √• laga ser du under.\n\n\n\nüì∑ D√∏me p√• figur\n\n\n\n\n\n\n\n\nMerk\n\n\n\nFor √• gjennomf√∏ra denne √∏vinga treng ein biblioteket geopandas. Viss ein nyttar anaconda eller miniconda s√• er det enklaste √• laga eit eige enviroment for √• ikkje klussa til den ¬´vanlege¬ª python-installasjonen. Oppskrifta du finn her, funkar fint!\nOBS: For √• installera Jupyter Lab kan du endre siste linja til\nconda install python=3 geopandas jupyterlab\n\n\n\n\nF√∏rst treng me eit datasett. USGS har ein eigen ¬´jordskjelvkatalog¬ª der ein kan s√∏ka etter og lasta ned jordskjelvdata. Katalogen finn du her.\nDet meste ein kan lasta ned er 20 000 jordskjelv, s√• me m√• gjera nokre val i innstillingane for √• f√• dekka eit lengre tidsrom.\nBasic options  Magnitude b√∏r ha Minimum sett til 5,5.  Date & Time sin Start b√∏r vera s√• tidleg som mogleg (gjerne 1950 berre for √• ta litt i‚Ä¶)  Geographic Region st√•r p√• World\nOutput options  Format ‚û°Ô∏è csv  Order By ‚û°Ô∏è Time - Newest First  Limit Results b√∏r ha Number of Events sett til 20000 (for √• unng√• feilmelding om for mange treff)\nDen nedlasta fila b√∏r ligga i same mappe som Jupyter-notatboka (eller .py-fila). For √• gjera det enklare for oss sj√∏lv kan me √≤g endra namn p√• fila til skjelv.csv eller liknande.\nüü¢ Eg tilr√•r p√• det sterkaste √• gjera denne type programmering/utforsking i ei Jupyter-notatbok\n\n\n\nMe startar med √• importere naudsynte bibliotek.\n\nimport pandas as pd\nimport geopandas as gpd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nBruker s√• pandas for √• lesa inn csv-fila.\n\nskjelv = pd.read_csv(\"skjelv.csv\")\n\nUnders√∏ker korleis den innleste tabellen ser ut\n\nskjelv.shape\n\n(20000, 22)\n\n\n(20000, 22) betyr alts√• at me her har ein tabell med 20 000 rader og 22 kolonner. Ser p√• dei fem f√∏rste radene i tabellen.\n\nskjelv.head()\n\n\n\n\n\n\n\n\ntime\nlatitude\nlongitude\ndepth\nmag\nmagType\nnst\ngap\ndmin\nrms\n...\nupdated\nplace\ntype\nhorizontalError\ndepthError\nmagError\nmagNst\nstatus\nlocationSource\nmagSource\n\n\n\n\n0\n2023-04-24T20:00:55.086Z\n-0.7810\n98.5339\n15.462\n7.1\nmww\n70.0\n58.0\n2.282\n0.91\n...\n2023-04-25T07:46:47.683Z\n170 km SSE of Teluk Dalam, Indonesia\nearthquake\n7.35\n3.944\n0.060\n27.0\nreviewed\nus\nus\n\n\n1\n2023-04-24T02:17:56.596Z\n-60.3893\n-26.1923\n10.000\n5.6\nmb\n80.0\n68.0\n19.029\n0.60\n...\n2023-04-25T02:21:51.035Z\nSouth Sandwich Islands region\nearthquake\n11.61\n1.868\n0.054\n120.0\nreviewed\nus\nus\n\n\n2\n2023-04-24T00:41:55.460Z\n-29.9676\n-177.8264\n43.063\n7.1\nmww\n126.0\n23.0\n0.708\n0.50\n...\n2023-04-25T00:46:45.081Z\nNaN\nearthquake\n8.37\n4.305\n0.048\n42.0\nreviewed\nus\nus\n\n\n3\n2023-04-22T21:17:45.986Z\n-0.9589\n98.4839\n10.000\n5.7\nmww\n124.0\n53.0\n2.424\n0.74\n...\n2023-04-23T21:21:04.014Z\n170 km NW of Tuapejat, Indonesia\nearthquake\n7.18\n1.806\n0.060\n27.0\nreviewed\nus\nus\n\n\n4\n2023-04-22T17:09:45.448Z\n-0.7645\n98.5780\n27.385\n5.8\nmww\n178.0\n34.0\n2.286\n0.80\n...\n2023-04-23T17:12:44.119Z\nKepulauan Batu, Indonesia\nearthquake\n7.17\n3.202\n0.054\n33.0\nreviewed\nus\nus\n\n\n\n\n5 rows √ó 22 columns\n\n\n\nMe kan sj√• litt n√¶rare p√• dei statistikk fr√• dei numeriske kolonnene med √• bruka describe()\n\nskjelv.describe()\n\n\n\n\n\n\n\n\nlatitude\nlongitude\ndepth\nmag\nnst\ngap\ndmin\nrms\nhorizontalError\ndepthError\nmagError\nmagNst\n\n\n\n\ncount\n20000.000000\n20000.000000\n20000.000000\n20000.000000\n7472.000000\n10086.000000\n4430.000000\n19759.000000\n3972.000000\n7242.000000\n3136.000000\n4912.000000\n\n\nmean\n-0.308104\n33.349754\n70.485546\n5.873034\n267.023555\n43.510441\n4.347339\n0.998922\n7.115259\n3.991525\n0.059346\n49.099959\n\n\nstd\n30.063869\n126.560024\n127.629767\n0.420587\n160.409087\n28.936826\n5.492807\n0.203466\n2.309055\n7.902934\n0.031396\n62.611998\n\n\nmin\n-77.080000\n-179.997000\n-3.000000\n5.500000\n0.000000\n8.000000\n0.008000\n0.040000\n0.085000\n0.000000\n0.000000\n0.000000\n\n\n25%\n-20.436500\n-82.415450\n10.000000\n5.600000\n138.000000\n24.000000\n1.167250\n0.880000\n5.800000\n1.800000\n0.046000\n19.000000\n\n\n50%\n-4.496500\n96.297000\n31.700000\n5.700000\n242.000000\n36.000000\n2.535000\n1.000000\n7.100000\n2.000000\n0.055000\n33.000000\n\n\n75%\n22.324750\n143.512750\n50.300000\n6.000000\n372.000000\n54.000000\n5.144000\n1.110000\n8.500000\n4.400000\n0.068000\n56.250000\n\n\nmax\n86.922900\n179.998100\n700.000000\n9.100000\n934.000000\n313.000000\n39.730000\n2.820000\n15.800000\n569.200000\n0.700000\n941.000000\n\n\n\n\n\n\n\nI kolonna mag (styrken) ser me at b√•de gjennomsnittet (5,87) og medianen (5,7) er ganske l√•ge. Hugs p√• at den l√•gaste verdien her er 5,5. Tala viser oss at 50% av dei 20000 skjelva er mellom 5,5 og 5,7 i styrke. Me ser √≤g at gjennomsnittsdjupna p√• skjelva er ca. 70,5 km (depth).\nSom me har sett over har tabellen mange kolonner, ikkje alle er like relevante for oss. Me kan sortera ut dei me treng vidare. Skriv f√∏rst ut ei liste med kolonnenamn for √• f√• oversikt over alle kolonnene.\n\nskjelv.columns\n\nIndex(['time', 'latitude', 'longitude', 'depth', 'mag', 'magType', 'nst',\n       'gap', 'dmin', 'rms', 'net', 'id', 'updated', 'place', 'type',\n       'horizontalError', 'depthError', 'magError', 'magNst', 'status',\n       'locationSource', 'magSource'],\n      dtype='object')\n\n\n\n\n\nDet f√∏rste me gjer er √• luka ut dei radene som ikkje er jordskjelv. I koden under tek me kun vare p√• dei radene der type er earthquake.\n\nskjelv = skjelv[skjelv[\"type\"] == \"earthquake\"]\nskjelv.shape\n\n(19890, 22)\n\n\nMe ser at tabellen vart nokre rader kortare.\nPlukker ut dei mest relevante kolonnene. Dato, lengde- og breddegrad, djupne og styrke:\n\nskjelv = skjelv[[\"time\", \"latitude\", \"longitude\", \"depth\", \"mag\"]]\nskjelv.head()\n\n\n\n\n\n\n\n\ntime\nlatitude\nlongitude\ndepth\nmag\n\n\n\n\n0\n2023-04-24T20:00:55.086Z\n-0.7810\n98.5339\n15.462\n7.1\n\n\n1\n2023-04-24T02:17:56.596Z\n-60.3893\n-26.1923\n10.000\n5.6\n\n\n2\n2023-04-24T00:41:55.460Z\n-29.9676\n-177.8264\n43.063\n7.1\n\n\n3\n2023-04-22T21:17:45.986Z\n-0.9589\n98.4839\n10.000\n5.7\n\n\n4\n2023-04-22T17:09:45.448Z\n-0.7645\n98.5780\n27.385\n5.8\n\n\n\n\n\n\n\nSjekkar for ordens skuld kva tid det f√∏rste skjelvet er fr√•. Ser p√• dei siste 5 radene i tabellen.\n\nskjelv.tail(5)\n\n\n\n\n\n\n\n\ntime\nlatitude\nlongitude\ndepth\nmag\ngeometry\n\n\n\n\n19994\n1982-08-06T20:46:13.910Z\n-8.319\n120.416\n49.9\n5.5\nPOINT (120.41600 -8.31900)\n\n\n19995\n1982-08-06T20:40:52.200Z\n-8.375\n120.577\n45.7\n5.9\nPOINT (120.57700 -8.37500)\n\n\n19996\n1982-08-05T20:42:07.300Z\n-12.347\n166.247\n20.0\n5.5\nPOINT (166.24700 -12.34700)\n\n\n19997\n1982-08-05T20:32:52.950Z\n-12.597\n165.931\n30.7\n7.0\nPOINT (165.93100 -12.59700)\n\n\n19999\n1982-08-05T07:28:08.810Z\n-5.767\n146.567\n113.0\n5.6\nPOINT (146.56700 -5.76700)\n\n\n\n\n\n\n\n\n\nFor √• sj√• (og presentera) fordelinga av styrke og djupne kan me t.d. laga heilt enkle boksplot. Startar med eit for styrken üí™\n\nboksplot = skjelv.boxplot(column = \"mag\", figsize = (6,6), color = \"red\")\nplt.title(\"Boksplott over styrkene p√• skjelva\", fontsize = 20)\nplt.ylabel(\"Magnitude\", fontsize = 16)\nplt.show()\n\n\n\n\n\n\n\n\nFiguren her viser at jordskjelva i all hovudsak er mellom 5,5 og ca. 6,6. Dei sterkare skjelva er s√• f√• at dei vert sett p√• som avvik (outliers).\n\nboksplot = skjelv.boxplot(column = \"depth\", figsize = (6,6), color = \"red\")\nplt.title(\"Boksplott over djupne p√• skjelva\", fontsize = 20)\nplt.ylabel(\"Djupne (km)\", fontsize = 16)\nplt.show()\n\n\n\n\n\n\n\n\nFiguren for djune viser oss at dei aller fleste skjelva er mellom 0 og 110 km djupe.\n\n\n\n\n\n\nTips til meir visualisering üëÄ\n\n\n\nDet g√•r an √• pr√∏va seg fram med ulike visualiseringar, feks. histogram/stolpediagram. Eventuelt kan ein sjekka ut seaborn dokumentasjon her og laga enno fleire fancy figurar, feks. fiolinplot eller andre fine oversikter.\n\n\n\n\n\n\nF√∏rst lagar me ei geodataframe fr√• v√•r opprinnelege dataframe (skjelv). Forskjellen p√• desse to er at f√∏rstnevnte har ei eigen kolonne geometry, som er punkt, linjer eller flater. I dette tilfelet punkt, som geopandas finn i lengde- og breiddegrad-kolonnene.\n\nskjelv_gdf = gpd.GeoDataFrame(\n    skjelv, \n    geometry = gpd.points_from_xy(\n        skjelv.longitude, \n        skjelv.latitude\n        )\n    )\nskjelv_gdf.head()\n\n\n\n\n\n\n\n\ntime\nlatitude\nlongitude\ndepth\nmag\ngeometry\n\n\n\n\n0\n2023-04-24T20:00:55.086Z\n-0.7810\n98.5339\n15.462\n7.1\nPOINT (98.53390 -0.78100)\n\n\n1\n2023-04-24T02:17:56.596Z\n-60.3893\n-26.1923\n10.000\n5.6\nPOINT (-26.19230 -60.38930)\n\n\n2\n2023-04-24T00:41:55.460Z\n-29.9676\n-177.8264\n43.063\n7.1\nPOINT (-177.82640 -29.96760)\n\n\n3\n2023-04-22T21:17:45.986Z\n-0.9589\n98.4839\n10.000\n5.7\nPOINT (98.48390 -0.95890)\n\n\n4\n2023-04-22T17:09:45.448Z\n-0.7645\n98.5780\n27.385\n5.8\nPOINT (98.57800 -0.76450)\n\n\n\n\n\n\n\n\n\n\nNo er alt klart for √• starta med plotting. Me lagar eit basekart av verda og plottar jordskjelva opp√• dette.\n\n# bakgrunnskart - data\nworld = gpd.read_file(gpd.datasets.get_path(\"naturalearth_lowres\"))\n\n# plotte bakgrunnskart\nbase = world.plot(color = \"linen\", \n                  edgecolor = \"gray\", \n                  figsize = (15, 8)\n                 )\n\nskjelv_gdf.plot(ax = base, markersize = 2) \n\nplt.title(\"Jordskjelv sterkare enn 5,5 fr√• 1982 - 2023\", fontsize = 18)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nFor √• f√• fram ulikskapar mellom skjelva kan me plotta punkta slik at dei vert st√∏rre di sterkare skjelva dei representerer er. Skjelva er fr√• 5.5 til 9.1 i styrke. Legg til ei ny kolonne i tabellen for storleik p√• mark√∏r. For at den skal g√• fr√• 1 og oppover, trekk me 4,5 fr√• verdien til mag.\n\nskjelv_gdf[\"mark√∏r\"] = skjelv_gdf[\"mag\"] - 4.5\nskjelv_gdf.head()\n\n\n\n\n\n\n\n\ntime\nlatitude\nlongitude\ndepth\nmag\ngeometry\nmark√∏r\n\n\n\n\n0\n2023-04-24T20:00:55.086Z\n-0.7810\n98.5339\n15.462\n7.1\nPOINT (98.53390 -0.78100)\n2.6\n\n\n1\n2023-04-24T02:17:56.596Z\n-60.3893\n-26.1923\n10.000\n5.6\nPOINT (-26.19230 -60.38930)\n1.1\n\n\n2\n2023-04-24T00:41:55.460Z\n-29.9676\n-177.8264\n43.063\n7.1\nPOINT (-177.82640 -29.96760)\n2.6\n\n\n3\n2023-04-22T21:17:45.986Z\n-0.9589\n98.4839\n10.000\n5.7\nPOINT (98.48390 -0.95890)\n1.2\n\n\n4\n2023-04-22T17:09:45.448Z\n-0.7645\n98.5780\n27.385\n5.8\nPOINT (98.57800 -0.76450)\n1.3\n\n\n\n\n\n\n\nPlottar p√• nytt. Merk at me endrar typen til scatter som gjer at mark√∏rstorleiken f√•r eit anna argument s i staden for markersize. Pr√∏v deg gjerne fram for √• finna ein fin verdi for storleiken. Eg endte opp med 3*skjelv_gdf[\"mark√∏r\"]**4.\n\n# bakgrunnskart\nworld = gpd.read_file(gpd.datasets.get_path(\"naturalearth_lowres\"))\n\nbase = world.plot(color = \"bisque\", \n                  edgecolor = \"gray\", \n                  figsize = (14, 8)\n                 )\n\n# plottar skjelva\nskjelv_gdf.plot(ax = base, \n                kind = \"scatter\", \n                x = \"longitude\", \n                y = \"latitude\",\n                marker = \"o\",\n                color = \"salmon\",\n                s = 3*skjelv_gdf[\"mark√∏r\"]**4, # st√∏rrelse p√• pkt. \n                edgecolor = \"maroon\",\n                alpha = 0.6 # gjennomsiktighet\n               )\n\nplt.title(\"Jordskjelv sterkare enn 5,5 fr√• 1982 - 2023 \\n\", fontsize = 22)\nplt.xlabel(\"Lengdegrad\", fontsize = 16)\nplt.ylabel(\"Breiddegrad\", fontsize = 16)\n#plt.savefig(\"jordskjelv_verda_styrke.png\", dpi = 300) # &lt;-- bruk denne for √• lagra figuren\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nFor √• f√• betre oversikt kan me zooma inn p√• eit avgrensa omr√•de av jorda. Me kan t.d. sj√• p√• omr√•da rundt Indonesia. Les av omtrentlege lengde- og breddegrader p√• oversiktskartet. Legg avgrensingane inn som eigne variablar, slik at det er lett √• endra dei seinare.\n\n# Avgrensingar for r√•data og kartplotting\nlat_min = -25\nlat_maks = 60\nlong_min = 80\nlong_maks = 170\n\nBruker vidare avgrensingane til √• sortera ut ein eigen tabell med dei aktuelle skjelva.\n\n# lagar ny gdf til avgrensa omr√•de\nomr√•de_skjelv = skjelv_gdf[(skjelv_gdf.latitude &gt; lat_min) \n                           & (skjelv_gdf.latitude &lt; lat_maks)\n                           & (skjelv_gdf.longitude &gt; long_min) \n                           & (skjelv_gdf.longitude &lt; long_maks)\n                          ]\n\nomr√•de_skjelv.shape\n\n(9302, 7)\n\n\nHer ser me at me framleis har 9302 skjelv i tabellen, s√• omlag halvparten av dei 20 000 skjelva er fr√• det avgrensa omr√•det. Tar me ein kikk p√• dei 10 f√∏rste linjene s√• ser me at indeksen ikkje er heilt i orden.\n\nomr√•de_skjelv.head(10)\n\n\n\n\n\n\n\n\ntime\nlatitude\nlongitude\ndepth\nmag\ngeometry\nmark√∏r\n\n\n\n\n0\n2023-04-24T20:00:55.086Z\n-0.7810\n98.5339\n15.462\n7.1\nPOINT (98.53390 -0.78100)\n2.6\n\n\n3\n2023-04-22T21:17:45.986Z\n-0.9589\n98.4839\n10.000\n5.7\nPOINT (98.48390 -0.95890)\n1.2\n\n\n4\n2023-04-22T17:09:45.448Z\n-0.7645\n98.5780\n27.385\n5.8\nPOINT (98.57800 -0.76450)\n1.3\n\n\n5\n2023-04-22T09:15:54.527Z\n-5.3425\n125.6370\n20.667\n5.5\nPOINT (125.63700 -5.34250)\n1.0\n\n\n6\n2023-04-22T08:23:42.518Z\n-5.2697\n125.5950\n7.270\n6.0\nPOINT (125.59500 -5.26970)\n1.5\n\n\n8\n2023-04-21T10:21:13.739Z\n2.7929\n127.0480\n24.575\n5.9\nPOINT (127.04800 2.79290)\n1.4\n\n\n10\n2023-04-19T09:06:05.200Z\n-5.9994\n149.6062\n55.674\n6.3\nPOINT (149.60620 -5.99940)\n1.8\n\n\n12\n2023-04-18T02:40:53.003Z\n54.1600\n159.9190\n110.846\n5.6\nPOINT (159.91900 54.16000)\n1.1\n\n\n13\n2023-04-17T11:05:55.474Z\n-4.8912\n102.9538\n58.386\n5.5\nPOINT (102.95380 -4.89120)\n1.0\n\n\n14\n2023-04-15T15:07:06.934Z\n-4.8648\n102.9744\n56.688\n5.5\nPOINT (102.97440 -4.86480)\n1.0\n\n\n\n\n\n\n\nIkkje at det er veldig viktig no, men om me vil s√• kan me ordna dette lett.\n\nomr√•de_skjelv = omr√•de_skjelv.reset_index(drop=True)\nomr√•de_skjelv.head(10)\n\n\n\n\n\n\n\n\ntime\nlatitude\nlongitude\ndepth\nmag\ngeometry\nmark√∏r\n\n\n\n\n0\n2023-04-24T20:00:55.086Z\n-0.7810\n98.5339\n15.462\n7.1\nPOINT (98.53390 -0.78100)\n2.6\n\n\n1\n2023-04-22T21:17:45.986Z\n-0.9589\n98.4839\n10.000\n5.7\nPOINT (98.48390 -0.95890)\n1.2\n\n\n2\n2023-04-22T17:09:45.448Z\n-0.7645\n98.5780\n27.385\n5.8\nPOINT (98.57800 -0.76450)\n1.3\n\n\n3\n2023-04-22T09:15:54.527Z\n-5.3425\n125.6370\n20.667\n5.5\nPOINT (125.63700 -5.34250)\n1.0\n\n\n4\n2023-04-22T08:23:42.518Z\n-5.2697\n125.5950\n7.270\n6.0\nPOINT (125.59500 -5.26970)\n1.5\n\n\n5\n2023-04-21T10:21:13.739Z\n2.7929\n127.0480\n24.575\n5.9\nPOINT (127.04800 2.79290)\n1.4\n\n\n6\n2023-04-19T09:06:05.200Z\n-5.9994\n149.6062\n55.674\n6.3\nPOINT (149.60620 -5.99940)\n1.8\n\n\n7\n2023-04-18T02:40:53.003Z\n54.1600\n159.9190\n110.846\n5.6\nPOINT (159.91900 54.16000)\n1.1\n\n\n8\n2023-04-17T11:05:55.474Z\n-4.8912\n102.9538\n58.386\n5.5\nPOINT (102.95380 -4.89120)\n1.0\n\n\n9\n2023-04-15T15:07:06.934Z\n-4.8648\n102.9744\n56.688\n5.5\nPOINT (102.97440 -4.86480)\n1.0\n\n\n\n\n\n\n\n\n\nNo kan me plotta det avgrensa omr√•det. Bruker variablane med grensene for √• tilpassa bakgrunnskartet.\n\nbase = world.plot(color=\"lightgrey\",\n                  edgecolor=\"black\", \n                  figsize=(8,10),\n                 )\n\nbase.set_ylim([lat_min, lat_maks])\nbase.set_xlim([long_min, long_maks])\n\nomr√•de_skjelv.plot(ax = base, \n                   color = \"red\",\n                   markersize = 10\n                  )\n\nplt.show()\n\n\n\n\n\n\n\n\nP√• denne figuren ser me at det er nokre omr√•de der skjelva dekker breiare linjer enn ellers. Pr√∏ver √• f√• fram kor djupe dei ulike skjelva er. Me deler inn datamaterialet i grunne, middels og djupe skjelv, med 30 km og 300 km som grenser mellom dei tre kategoriane.\n\nomr√•de_djup = omr√•de_skjelv[(omr√•de_skjelv.depth &gt; 300)]\nomr√•de_middels = omr√•de_skjelv[(omr√•de_skjelv.depth &lt;= 300)\n                               & (omr√•de_skjelv.depth &gt; 30)]\nomr√•de_grunn = omr√•de_skjelv[(omr√•de_skjelv.depth &lt;= 30)]\n\nDesse nye gdf-ane kan me plotta p√• oversiktskart over regionen:\n\n# bakgrunnskart\nbase = world.plot(color=\"linen\",\n                  edgecolor=\"dimgray\", \n                  figsize=(9,9),\n                 )\n\n# avgrensing (til omr√•det)\nbase.set_ylim([lat_min, lat_maks])\nbase.set_xlim([long_min, long_maks])\n\n# plotte skjelva\nomr√•de_djup.plot(ax = base, color=\"dodgerblue\", markersize=10)\nomr√•de_middels.plot(ax = base, color=\"gold\", markersize=10)\nomr√•de_grunn.plot(ax = base, color=\"red\", markersize=10)\n\n# pynt\nplt.title(\"\\nJordskjelv vest i Stillehavet\\n\", fontsize = 22)\nplt.xlabel(\"Lengdegrad\", fontsize = 16)\nplt.ylabel(\"Breiddegrad\", fontsize = 16)\nplt.legend([\"djupe ($d &gt; 300 km$)\", \n           \"middels ($30 km &lt; d \\leq 300 km$)\",\n           \"grunne ($d \\leq 30 km$)\"\n           ])\nplt.savefig(\"jordskjelv_stillehavet_djupne.png\", dpi=200, bbox_inches=\"tight\")\nplt.show()\n\n\n\n\n\n\n\n\nLegg merke til \\(\\LaTeX\\)-formateringa middels ($30 km &lt; d \\leq 300 km$ i teiknforklaringa.\n\n\n\n\n\n\nTips\n\n\n\nFigurar som dei me har laga her, i sj√∏lvvalde omr√•de, er supert utgangspunkt for vurdering (videopresentasjon, fagsamtale e.l.). D√• kan elevane forklara kva dei ulike figurane viser, kvifor dei ser ut som dei gjer, og vidare gjera greie for aktuelle fagomgrep og prosessar knytt til dette.\n\nKva m√∏nster ser du i styrken p√• skjelva? Kva kan vera √•rsaken til det?\nKva m√∏nster ser du i djupna p√• skjelva? Kva fortel det oss? Er det samanhengar mellom dei to figurane?"
  },
  {
    "objectID": "posts/230425_jordskjelv/index.html#laste-ned-data",
    "href": "posts/230425_jordskjelv/index.html#laste-ned-data",
    "title": "Jordskjelvpython",
    "section": "",
    "text": "F√∏rst treng me eit datasett. USGS har ein eigen ¬´jordskjelvkatalog¬ª der ein kan s√∏ka etter og lasta ned jordskjelvdata. Katalogen finn du her.\nDet meste ein kan lasta ned er 20 000 jordskjelv, s√• me m√• gjera nokre val i innstillingane for √• f√• dekka eit lengre tidsrom.\nBasic options  Magnitude b√∏r ha Minimum sett til 5,5.  Date & Time sin Start b√∏r vera s√• tidleg som mogleg (gjerne 1950 berre for √• ta litt i‚Ä¶)  Geographic Region st√•r p√• World\nOutput options  Format ‚û°Ô∏è csv  Order By ‚û°Ô∏è Time - Newest First  Limit Results b√∏r ha Number of Events sett til 20000 (for √• unng√• feilmelding om for mange treff)\nDen nedlasta fila b√∏r ligga i same mappe som Jupyter-notatboka (eller .py-fila). For √• gjera det enklare for oss sj√∏lv kan me √≤g endra namn p√• fila til skjelv.csv eller liknande.\nüü¢ Eg tilr√•r p√• det sterkaste √• gjera denne type programmering/utforsking i ei Jupyter-notatbok"
  },
  {
    "objectID": "posts/230425_jordskjelv/index.html#innlesing-av-data",
    "href": "posts/230425_jordskjelv/index.html#innlesing-av-data",
    "title": "Jordskjelvpython",
    "section": "",
    "text": "Me startar med √• importere naudsynte bibliotek.\n\nimport pandas as pd\nimport geopandas as gpd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nBruker s√• pandas for √• lesa inn csv-fila.\n\nskjelv = pd.read_csv(\"skjelv.csv\")\n\nUnders√∏ker korleis den innleste tabellen ser ut\n\nskjelv.shape\n\n(20000, 22)\n\n\n(20000, 22) betyr alts√• at me her har ein tabell med 20 000 rader og 22 kolonner. Ser p√• dei fem f√∏rste radene i tabellen.\n\nskjelv.head()\n\n\n\n\n\n\n\n\ntime\nlatitude\nlongitude\ndepth\nmag\nmagType\nnst\ngap\ndmin\nrms\n...\nupdated\nplace\ntype\nhorizontalError\ndepthError\nmagError\nmagNst\nstatus\nlocationSource\nmagSource\n\n\n\n\n0\n2023-04-24T20:00:55.086Z\n-0.7810\n98.5339\n15.462\n7.1\nmww\n70.0\n58.0\n2.282\n0.91\n...\n2023-04-25T07:46:47.683Z\n170 km SSE of Teluk Dalam, Indonesia\nearthquake\n7.35\n3.944\n0.060\n27.0\nreviewed\nus\nus\n\n\n1\n2023-04-24T02:17:56.596Z\n-60.3893\n-26.1923\n10.000\n5.6\nmb\n80.0\n68.0\n19.029\n0.60\n...\n2023-04-25T02:21:51.035Z\nSouth Sandwich Islands region\nearthquake\n11.61\n1.868\n0.054\n120.0\nreviewed\nus\nus\n\n\n2\n2023-04-24T00:41:55.460Z\n-29.9676\n-177.8264\n43.063\n7.1\nmww\n126.0\n23.0\n0.708\n0.50\n...\n2023-04-25T00:46:45.081Z\nNaN\nearthquake\n8.37\n4.305\n0.048\n42.0\nreviewed\nus\nus\n\n\n3\n2023-04-22T21:17:45.986Z\n-0.9589\n98.4839\n10.000\n5.7\nmww\n124.0\n53.0\n2.424\n0.74\n...\n2023-04-23T21:21:04.014Z\n170 km NW of Tuapejat, Indonesia\nearthquake\n7.18\n1.806\n0.060\n27.0\nreviewed\nus\nus\n\n\n4\n2023-04-22T17:09:45.448Z\n-0.7645\n98.5780\n27.385\n5.8\nmww\n178.0\n34.0\n2.286\n0.80\n...\n2023-04-23T17:12:44.119Z\nKepulauan Batu, Indonesia\nearthquake\n7.17\n3.202\n0.054\n33.0\nreviewed\nus\nus\n\n\n\n\n5 rows √ó 22 columns\n\n\n\nMe kan sj√• litt n√¶rare p√• dei statistikk fr√• dei numeriske kolonnene med √• bruka describe()\n\nskjelv.describe()\n\n\n\n\n\n\n\n\nlatitude\nlongitude\ndepth\nmag\nnst\ngap\ndmin\nrms\nhorizontalError\ndepthError\nmagError\nmagNst\n\n\n\n\ncount\n20000.000000\n20000.000000\n20000.000000\n20000.000000\n7472.000000\n10086.000000\n4430.000000\n19759.000000\n3972.000000\n7242.000000\n3136.000000\n4912.000000\n\n\nmean\n-0.308104\n33.349754\n70.485546\n5.873034\n267.023555\n43.510441\n4.347339\n0.998922\n7.115259\n3.991525\n0.059346\n49.099959\n\n\nstd\n30.063869\n126.560024\n127.629767\n0.420587\n160.409087\n28.936826\n5.492807\n0.203466\n2.309055\n7.902934\n0.031396\n62.611998\n\n\nmin\n-77.080000\n-179.997000\n-3.000000\n5.500000\n0.000000\n8.000000\n0.008000\n0.040000\n0.085000\n0.000000\n0.000000\n0.000000\n\n\n25%\n-20.436500\n-82.415450\n10.000000\n5.600000\n138.000000\n24.000000\n1.167250\n0.880000\n5.800000\n1.800000\n0.046000\n19.000000\n\n\n50%\n-4.496500\n96.297000\n31.700000\n5.700000\n242.000000\n36.000000\n2.535000\n1.000000\n7.100000\n2.000000\n0.055000\n33.000000\n\n\n75%\n22.324750\n143.512750\n50.300000\n6.000000\n372.000000\n54.000000\n5.144000\n1.110000\n8.500000\n4.400000\n0.068000\n56.250000\n\n\nmax\n86.922900\n179.998100\n700.000000\n9.100000\n934.000000\n313.000000\n39.730000\n2.820000\n15.800000\n569.200000\n0.700000\n941.000000\n\n\n\n\n\n\n\nI kolonna mag (styrken) ser me at b√•de gjennomsnittet (5,87) og medianen (5,7) er ganske l√•ge. Hugs p√• at den l√•gaste verdien her er 5,5. Tala viser oss at 50% av dei 20000 skjelva er mellom 5,5 og 5,7 i styrke. Me ser √≤g at gjennomsnittsdjupna p√• skjelva er ca. 70,5 km (depth).\nSom me har sett over har tabellen mange kolonner, ikkje alle er like relevante for oss. Me kan sortera ut dei me treng vidare. Skriv f√∏rst ut ei liste med kolonnenamn for √• f√• oversikt over alle kolonnene.\n\nskjelv.columns\n\nIndex(['time', 'latitude', 'longitude', 'depth', 'mag', 'magType', 'nst',\n       'gap', 'dmin', 'rms', 'net', 'id', 'updated', 'place', 'type',\n       'horizontalError', 'depthError', 'magError', 'magNst', 'status',\n       'locationSource', 'magSource'],\n      dtype='object')"
  },
  {
    "objectID": "posts/230425_jordskjelv/index.html#sortere-i-datamaterialet",
    "href": "posts/230425_jordskjelv/index.html#sortere-i-datamaterialet",
    "title": "Jordskjelvpython",
    "section": "",
    "text": "Det f√∏rste me gjer er √• luka ut dei radene som ikkje er jordskjelv. I koden under tek me kun vare p√• dei radene der type er earthquake.\n\nskjelv = skjelv[skjelv[\"type\"] == \"earthquake\"]\nskjelv.shape\n\n(19890, 22)\n\n\nMe ser at tabellen vart nokre rader kortare.\nPlukker ut dei mest relevante kolonnene. Dato, lengde- og breddegrad, djupne og styrke:\n\nskjelv = skjelv[[\"time\", \"latitude\", \"longitude\", \"depth\", \"mag\"]]\nskjelv.head()\n\n\n\n\n\n\n\n\ntime\nlatitude\nlongitude\ndepth\nmag\n\n\n\n\n0\n2023-04-24T20:00:55.086Z\n-0.7810\n98.5339\n15.462\n7.1\n\n\n1\n2023-04-24T02:17:56.596Z\n-60.3893\n-26.1923\n10.000\n5.6\n\n\n2\n2023-04-24T00:41:55.460Z\n-29.9676\n-177.8264\n43.063\n7.1\n\n\n3\n2023-04-22T21:17:45.986Z\n-0.9589\n98.4839\n10.000\n5.7\n\n\n4\n2023-04-22T17:09:45.448Z\n-0.7645\n98.5780\n27.385\n5.8\n\n\n\n\n\n\n\nSjekkar for ordens skuld kva tid det f√∏rste skjelvet er fr√•. Ser p√• dei siste 5 radene i tabellen.\n\nskjelv.tail(5)\n\n\n\n\n\n\n\n\ntime\nlatitude\nlongitude\ndepth\nmag\ngeometry\n\n\n\n\n19994\n1982-08-06T20:46:13.910Z\n-8.319\n120.416\n49.9\n5.5\nPOINT (120.41600 -8.31900)\n\n\n19995\n1982-08-06T20:40:52.200Z\n-8.375\n120.577\n45.7\n5.9\nPOINT (120.57700 -8.37500)\n\n\n19996\n1982-08-05T20:42:07.300Z\n-12.347\n166.247\n20.0\n5.5\nPOINT (166.24700 -12.34700)\n\n\n19997\n1982-08-05T20:32:52.950Z\n-12.597\n165.931\n30.7\n7.0\nPOINT (165.93100 -12.59700)\n\n\n19999\n1982-08-05T07:28:08.810Z\n-5.767\n146.567\n113.0\n5.6\nPOINT (146.56700 -5.76700)\n\n\n\n\n\n\n\n\n\nFor √• sj√• (og presentera) fordelinga av styrke og djupne kan me t.d. laga heilt enkle boksplot. Startar med eit for styrken üí™\n\nboksplot = skjelv.boxplot(column = \"mag\", figsize = (6,6), color = \"red\")\nplt.title(\"Boksplott over styrkene p√• skjelva\", fontsize = 20)\nplt.ylabel(\"Magnitude\", fontsize = 16)\nplt.show()\n\n\n\n\n\n\n\n\nFiguren her viser at jordskjelva i all hovudsak er mellom 5,5 og ca. 6,6. Dei sterkare skjelva er s√• f√• at dei vert sett p√• som avvik (outliers).\n\nboksplot = skjelv.boxplot(column = \"depth\", figsize = (6,6), color = \"red\")\nplt.title(\"Boksplott over djupne p√• skjelva\", fontsize = 20)\nplt.ylabel(\"Djupne (km)\", fontsize = 16)\nplt.show()\n\n\n\n\n\n\n\n\nFiguren for djune viser oss at dei aller fleste skjelva er mellom 0 og 110 km djupe.\n\n\n\n\n\n\nTips til meir visualisering üëÄ\n\n\n\nDet g√•r an √• pr√∏va seg fram med ulike visualiseringar, feks. histogram/stolpediagram. Eventuelt kan ein sjekka ut seaborn dokumentasjon her og laga enno fleire fancy figurar, feks. fiolinplot eller andre fine oversikter."
  },
  {
    "objectID": "posts/230425_jordskjelv/index.html#geodataframe",
    "href": "posts/230425_jordskjelv/index.html#geodataframe",
    "title": "Jordskjelvpython",
    "section": "",
    "text": "F√∏rst lagar me ei geodataframe fr√• v√•r opprinnelege dataframe (skjelv). Forskjellen p√• desse to er at f√∏rstnevnte har ei eigen kolonne geometry, som er punkt, linjer eller flater. I dette tilfelet punkt, som geopandas finn i lengde- og breiddegrad-kolonnene.\n\nskjelv_gdf = gpd.GeoDataFrame(\n    skjelv, \n    geometry = gpd.points_from_xy(\n        skjelv.longitude, \n        skjelv.latitude\n        )\n    )\nskjelv_gdf.head()\n\n\n\n\n\n\n\n\ntime\nlatitude\nlongitude\ndepth\nmag\ngeometry\n\n\n\n\n0\n2023-04-24T20:00:55.086Z\n-0.7810\n98.5339\n15.462\n7.1\nPOINT (98.53390 -0.78100)\n\n\n1\n2023-04-24T02:17:56.596Z\n-60.3893\n-26.1923\n10.000\n5.6\nPOINT (-26.19230 -60.38930)\n\n\n2\n2023-04-24T00:41:55.460Z\n-29.9676\n-177.8264\n43.063\n7.1\nPOINT (-177.82640 -29.96760)\n\n\n3\n2023-04-22T21:17:45.986Z\n-0.9589\n98.4839\n10.000\n5.7\nPOINT (98.48390 -0.95890)\n\n\n4\n2023-04-22T17:09:45.448Z\n-0.7645\n98.5780\n27.385\n5.8\nPOINT (98.57800 -0.76450)"
  },
  {
    "objectID": "posts/230425_jordskjelv/index.html#plotting",
    "href": "posts/230425_jordskjelv/index.html#plotting",
    "title": "Jordskjelvpython",
    "section": "",
    "text": "No er alt klart for √• starta med plotting. Me lagar eit basekart av verda og plottar jordskjelva opp√• dette.\n\n# bakgrunnskart - data\nworld = gpd.read_file(gpd.datasets.get_path(\"naturalearth_lowres\"))\n\n# plotte bakgrunnskart\nbase = world.plot(color = \"linen\", \n                  edgecolor = \"gray\", \n                  figsize = (15, 8)\n                 )\n\nskjelv_gdf.plot(ax = base, markersize = 2) \n\nplt.title(\"Jordskjelv sterkare enn 5,5 fr√• 1982 - 2023\", fontsize = 18)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nFor √• f√• fram ulikskapar mellom skjelva kan me plotta punkta slik at dei vert st√∏rre di sterkare skjelva dei representerer er. Skjelva er fr√• 5.5 til 9.1 i styrke. Legg til ei ny kolonne i tabellen for storleik p√• mark√∏r. For at den skal g√• fr√• 1 og oppover, trekk me 4,5 fr√• verdien til mag.\n\nskjelv_gdf[\"mark√∏r\"] = skjelv_gdf[\"mag\"] - 4.5\nskjelv_gdf.head()\n\n\n\n\n\n\n\n\ntime\nlatitude\nlongitude\ndepth\nmag\ngeometry\nmark√∏r\n\n\n\n\n0\n2023-04-24T20:00:55.086Z\n-0.7810\n98.5339\n15.462\n7.1\nPOINT (98.53390 -0.78100)\n2.6\n\n\n1\n2023-04-24T02:17:56.596Z\n-60.3893\n-26.1923\n10.000\n5.6\nPOINT (-26.19230 -60.38930)\n1.1\n\n\n2\n2023-04-24T00:41:55.460Z\n-29.9676\n-177.8264\n43.063\n7.1\nPOINT (-177.82640 -29.96760)\n2.6\n\n\n3\n2023-04-22T21:17:45.986Z\n-0.9589\n98.4839\n10.000\n5.7\nPOINT (98.48390 -0.95890)\n1.2\n\n\n4\n2023-04-22T17:09:45.448Z\n-0.7645\n98.5780\n27.385\n5.8\nPOINT (98.57800 -0.76450)\n1.3\n\n\n\n\n\n\n\nPlottar p√• nytt. Merk at me endrar typen til scatter som gjer at mark√∏rstorleiken f√•r eit anna argument s i staden for markersize. Pr√∏v deg gjerne fram for √• finna ein fin verdi for storleiken. Eg endte opp med 3*skjelv_gdf[\"mark√∏r\"]**4.\n\n# bakgrunnskart\nworld = gpd.read_file(gpd.datasets.get_path(\"naturalearth_lowres\"))\n\nbase = world.plot(color = \"bisque\", \n                  edgecolor = \"gray\", \n                  figsize = (14, 8)\n                 )\n\n# plottar skjelva\nskjelv_gdf.plot(ax = base, \n                kind = \"scatter\", \n                x = \"longitude\", \n                y = \"latitude\",\n                marker = \"o\",\n                color = \"salmon\",\n                s = 3*skjelv_gdf[\"mark√∏r\"]**4, # st√∏rrelse p√• pkt. \n                edgecolor = \"maroon\",\n                alpha = 0.6 # gjennomsiktighet\n               )\n\nplt.title(\"Jordskjelv sterkare enn 5,5 fr√• 1982 - 2023 \\n\", fontsize = 22)\nplt.xlabel(\"Lengdegrad\", fontsize = 16)\nplt.ylabel(\"Breiddegrad\", fontsize = 16)\n#plt.savefig(\"jordskjelv_verda_styrke.png\", dpi = 300) # &lt;-- bruk denne for √• lagra figuren\nplt.show()"
  },
  {
    "objectID": "posts/230425_jordskjelv/index.html#avgrense-omr√•de",
    "href": "posts/230425_jordskjelv/index.html#avgrense-omr√•de",
    "title": "Jordskjelvpython",
    "section": "",
    "text": "For √• f√• betre oversikt kan me zooma inn p√• eit avgrensa omr√•de av jorda. Me kan t.d. sj√• p√• omr√•da rundt Indonesia. Les av omtrentlege lengde- og breddegrader p√• oversiktskartet. Legg avgrensingane inn som eigne variablar, slik at det er lett √• endra dei seinare.\n\n# Avgrensingar for r√•data og kartplotting\nlat_min = -25\nlat_maks = 60\nlong_min = 80\nlong_maks = 170\n\nBruker vidare avgrensingane til √• sortera ut ein eigen tabell med dei aktuelle skjelva.\n\n# lagar ny gdf til avgrensa omr√•de\nomr√•de_skjelv = skjelv_gdf[(skjelv_gdf.latitude &gt; lat_min) \n                           & (skjelv_gdf.latitude &lt; lat_maks)\n                           & (skjelv_gdf.longitude &gt; long_min) \n                           & (skjelv_gdf.longitude &lt; long_maks)\n                          ]\n\nomr√•de_skjelv.shape\n\n(9302, 7)\n\n\nHer ser me at me framleis har 9302 skjelv i tabellen, s√• omlag halvparten av dei 20 000 skjelva er fr√• det avgrensa omr√•det. Tar me ein kikk p√• dei 10 f√∏rste linjene s√• ser me at indeksen ikkje er heilt i orden.\n\nomr√•de_skjelv.head(10)\n\n\n\n\n\n\n\n\ntime\nlatitude\nlongitude\ndepth\nmag\ngeometry\nmark√∏r\n\n\n\n\n0\n2023-04-24T20:00:55.086Z\n-0.7810\n98.5339\n15.462\n7.1\nPOINT (98.53390 -0.78100)\n2.6\n\n\n3\n2023-04-22T21:17:45.986Z\n-0.9589\n98.4839\n10.000\n5.7\nPOINT (98.48390 -0.95890)\n1.2\n\n\n4\n2023-04-22T17:09:45.448Z\n-0.7645\n98.5780\n27.385\n5.8\nPOINT (98.57800 -0.76450)\n1.3\n\n\n5\n2023-04-22T09:15:54.527Z\n-5.3425\n125.6370\n20.667\n5.5\nPOINT (125.63700 -5.34250)\n1.0\n\n\n6\n2023-04-22T08:23:42.518Z\n-5.2697\n125.5950\n7.270\n6.0\nPOINT (125.59500 -5.26970)\n1.5\n\n\n8\n2023-04-21T10:21:13.739Z\n2.7929\n127.0480\n24.575\n5.9\nPOINT (127.04800 2.79290)\n1.4\n\n\n10\n2023-04-19T09:06:05.200Z\n-5.9994\n149.6062\n55.674\n6.3\nPOINT (149.60620 -5.99940)\n1.8\n\n\n12\n2023-04-18T02:40:53.003Z\n54.1600\n159.9190\n110.846\n5.6\nPOINT (159.91900 54.16000)\n1.1\n\n\n13\n2023-04-17T11:05:55.474Z\n-4.8912\n102.9538\n58.386\n5.5\nPOINT (102.95380 -4.89120)\n1.0\n\n\n14\n2023-04-15T15:07:06.934Z\n-4.8648\n102.9744\n56.688\n5.5\nPOINT (102.97440 -4.86480)\n1.0\n\n\n\n\n\n\n\nIkkje at det er veldig viktig no, men om me vil s√• kan me ordna dette lett.\n\nomr√•de_skjelv = omr√•de_skjelv.reset_index(drop=True)\nomr√•de_skjelv.head(10)\n\n\n\n\n\n\n\n\ntime\nlatitude\nlongitude\ndepth\nmag\ngeometry\nmark√∏r\n\n\n\n\n0\n2023-04-24T20:00:55.086Z\n-0.7810\n98.5339\n15.462\n7.1\nPOINT (98.53390 -0.78100)\n2.6\n\n\n1\n2023-04-22T21:17:45.986Z\n-0.9589\n98.4839\n10.000\n5.7\nPOINT (98.48390 -0.95890)\n1.2\n\n\n2\n2023-04-22T17:09:45.448Z\n-0.7645\n98.5780\n27.385\n5.8\nPOINT (98.57800 -0.76450)\n1.3\n\n\n3\n2023-04-22T09:15:54.527Z\n-5.3425\n125.6370\n20.667\n5.5\nPOINT (125.63700 -5.34250)\n1.0\n\n\n4\n2023-04-22T08:23:42.518Z\n-5.2697\n125.5950\n7.270\n6.0\nPOINT (125.59500 -5.26970)\n1.5\n\n\n5\n2023-04-21T10:21:13.739Z\n2.7929\n127.0480\n24.575\n5.9\nPOINT (127.04800 2.79290)\n1.4\n\n\n6\n2023-04-19T09:06:05.200Z\n-5.9994\n149.6062\n55.674\n6.3\nPOINT (149.60620 -5.99940)\n1.8\n\n\n7\n2023-04-18T02:40:53.003Z\n54.1600\n159.9190\n110.846\n5.6\nPOINT (159.91900 54.16000)\n1.1\n\n\n8\n2023-04-17T11:05:55.474Z\n-4.8912\n102.9538\n58.386\n5.5\nPOINT (102.95380 -4.89120)\n1.0\n\n\n9\n2023-04-15T15:07:06.934Z\n-4.8648\n102.9744\n56.688\n5.5\nPOINT (102.97440 -4.86480)\n1.0\n\n\n\n\n\n\n\n\n\nNo kan me plotta det avgrensa omr√•det. Bruker variablane med grensene for √• tilpassa bakgrunnskartet.\n\nbase = world.plot(color=\"lightgrey\",\n                  edgecolor=\"black\", \n                  figsize=(8,10),\n                 )\n\nbase.set_ylim([lat_min, lat_maks])\nbase.set_xlim([long_min, long_maks])\n\nomr√•de_skjelv.plot(ax = base, \n                   color = \"red\",\n                   markersize = 10\n                  )\n\nplt.show()\n\n\n\n\n\n\n\n\nP√• denne figuren ser me at det er nokre omr√•de der skjelva dekker breiare linjer enn ellers. Pr√∏ver √• f√• fram kor djupe dei ulike skjelva er. Me deler inn datamaterialet i grunne, middels og djupe skjelv, med 30 km og 300 km som grenser mellom dei tre kategoriane.\n\nomr√•de_djup = omr√•de_skjelv[(omr√•de_skjelv.depth &gt; 300)]\nomr√•de_middels = omr√•de_skjelv[(omr√•de_skjelv.depth &lt;= 300)\n                               & (omr√•de_skjelv.depth &gt; 30)]\nomr√•de_grunn = omr√•de_skjelv[(omr√•de_skjelv.depth &lt;= 30)]\n\nDesse nye gdf-ane kan me plotta p√• oversiktskart over regionen:\n\n# bakgrunnskart\nbase = world.plot(color=\"linen\",\n                  edgecolor=\"dimgray\", \n                  figsize=(9,9),\n                 )\n\n# avgrensing (til omr√•det)\nbase.set_ylim([lat_min, lat_maks])\nbase.set_xlim([long_min, long_maks])\n\n# plotte skjelva\nomr√•de_djup.plot(ax = base, color=\"dodgerblue\", markersize=10)\nomr√•de_middels.plot(ax = base, color=\"gold\", markersize=10)\nomr√•de_grunn.plot(ax = base, color=\"red\", markersize=10)\n\n# pynt\nplt.title(\"\\nJordskjelv vest i Stillehavet\\n\", fontsize = 22)\nplt.xlabel(\"Lengdegrad\", fontsize = 16)\nplt.ylabel(\"Breiddegrad\", fontsize = 16)\nplt.legend([\"djupe ($d &gt; 300 km$)\", \n           \"middels ($30 km &lt; d \\leq 300 km$)\",\n           \"grunne ($d \\leq 30 km$)\"\n           ])\nplt.savefig(\"jordskjelv_stillehavet_djupne.png\", dpi=200, bbox_inches=\"tight\")\nplt.show()\n\n\n\n\n\n\n\n\nLegg merke til \\(\\LaTeX\\)-formateringa middels ($30 km &lt; d \\leq 300 km$ i teiknforklaringa.\n\n\n\n\n\n\nTips\n\n\n\nFigurar som dei me har laga her, i sj√∏lvvalde omr√•de, er supert utgangspunkt for vurdering (videopresentasjon, fagsamtale e.l.). D√• kan elevane forklara kva dei ulike figurane viser, kvifor dei ser ut som dei gjer, og vidare gjera greie for aktuelle fagomgrep og prosessar knytt til dette.\n\nKva m√∏nster ser du i styrken p√• skjelva? Kva kan vera √•rsaken til det?\nKva m√∏nster ser du i djupna p√• skjelva? Kva fortel det oss? Er det samanhengar mellom dei to figurane?"
  },
  {
    "objectID": "lf.html",
    "href": "lf.html",
    "title": "L√∏ysingsforslag matteeksamen",
    "section": "",
    "text": "Eksamen V24 2P\n\n\n\n\n\n\n\n\n\n\n\nMay 26, 2024\n\n\n1 minutt\n\n\n\n\n\n\n\nEksamen V24 2P-Y\n\n\n\n\n\n\n\n\n\n\n\nMay 25, 2024\n\n\n1 minutt\n\n\n\n\n\n\n\nEksamen V23 S2\n\n\n\n\n\n\n\n\n\n\n\nApr 29, 2024\n\n\n10 minutt\n\n\n\n\n\n\n\nEksamen H23 S2\n\n\n\n\n\n\n\n\n\n\n\nDec 11, 2023\n\n\n11 minutt\n\n\n\n\n\n\n\nEksamen H23 S1\n\n\n\n\n\n\n\n\n\n\n\nNov 16, 2023\n\n\n10 minutt\n\n\n\n\n\n\n\nEksamen V23 S1\n\n\n\n\n\n\n\n\n\n\n\nMay 24, 2023\n\n\n9 minutt\n\n\n\n\n\n\n\nEksamen V22 S1\n\n\n\n\n\n\n\n\n\n\n\nMay 3, 2023\n\n\n8 minutt\n\n\n\n\n\n\n\nEksamen H22 S1\n\n\n\n\n\n\n\n\n\n\n\nMar 27, 2023\n\n\n9 minutt\n\n\n\n\n\n\nIngen passande treff"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Om meg",
    "section": "",
    "text": "Torodd her üëã Eg jobbar som lektor i vidareg√•ande skule. Underviser i matematikk, geofag og geografi. Interessert i teknologibruk i skulen, og spesielt programmering (s√• interessert at eg har skrive masteroppg√•ve i emnet üòÖ) og kunstig intelligens ü§ñ.\nJobbar stadig med √• utvikla den profesjonsfaglege digitale kompetansen (PfDK), s√• denne bloggen er ein del av dette‚Ä¶ Kjekt √• b√•de f√• tenkt litt p√• korleis programmering kan brukast i skulen, og l√¶ra meg noko nytt (Quarto) üòä\nP√• denne bloggen kjem eg til √• dela nokre digitale tips og triks samt litt tankar og erfaringar knytt til b√•de KI og programmering i matematikk og geofag üåã"
  },
  {
    "objectID": "lf/2P-V24/index.html",
    "href": "lf/2P-V24/index.html",
    "title": "Eksamen V24 2P",
    "section": "",
    "text": "L√∏ysingsforslag eksamen 2P - V24\nHar laga eit forslag til l√∏ysing av v√•reksamen i 2P 2024.\nForslaget til l√∏ysing (pdf) finn du her: V24-2P-loysingsforslag.pdf\nEg kan ikkje lova at l√∏ysinga er feilfri‚Ä¶ üòä Gje meg gjerne ein lyd om du ser feil.\n\nEksamenssettet finn du hos UDIR: Finn eksamensoppgaver\n\n\n\n\nGjenbrukCC BY 4.0"
  },
  {
    "objectID": "lf/S2-H23/index.html",
    "href": "lf/S2-H23/index.html",
    "title": "Eksamen H23 S2",
    "section": "",
    "text": "Her er eit forslag til l√∏ysing av hausteksamen i S2 2023. I del 2 er oppg√•vene stort sett Python brukt som hjelpemiddel.\nEg kan ikkje lova at l√∏ysinga er feilfri‚Ä¶ üòä Gje meg gjerne ein lyd i kommentarfeltet eller her om du ser feil üîç\nSist oppdatert: 11.12\n\nEksamenssettet finn du hos UDIR: Finn eksamensoppgaver"
  },
  {
    "objectID": "lf/S2-H23/index.html#oppg√•ve-1---bestemt-integral",
    "href": "lf/S2-H23/index.html#oppg√•ve-1---bestemt-integral",
    "title": "Eksamen H23 S2",
    "section": "Oppg√•ve 1 - bestemt integral",
    "text": "Oppg√•ve 1 - bestemt integral\nIntegrerer:\n\\[\n\\begin{align*}\n&\\int_{-1}^{1} (x^3 + 2x) \\, dx \\\\ &= \\left[ \\frac{x^4}{4} + x^2 \\right]_{-1}^{1} \\\\\n&= \\left( \\frac{1^4}{4} + 1^2 \\right) - \\left( \\frac{(-1)^4}{4} + (-1)^2 \\right) \\\\\n&= \\frac{1}{4} + 1 - \\left( \\frac{1}{4} + 1 \\right) \\\\\n&= 0\n\\end{align*}\n\\]\nLa \\(f(x) = x^3 + 2x\\). Ser at \\(f(x) &lt; 0\\) n√•r \\(x \\in [ -1,0 \\rangle\\), og at \\(f(x) &gt; 0\\) n√•r \\(x \\in \\langle 0,1]\\).\n\\(\\int_{-1}^{1} f(x) \\, dx = 0\\) betyr at arealet avgrensa av \\(f(x)\\) og \\(x\\)-aksen i kvart av dei to intervalla er like store. Sidan integrala har ulikt forteikn vert summen av dei \\(0\\)."
  },
  {
    "objectID": "lf/S2-H23/index.html#oppg√•ve-2---rekker",
    "href": "lf/S2-H23/index.html#oppg√•ve-2---rekker",
    "title": "Eksamen H23 S2",
    "section": "Oppg√•ve 2 - rekker",
    "text": "Oppg√•ve 2 - rekker\n\na) summen av dei fire f√∏rste ledda\nSummen av ei uendelig geometrisk rekke som konvergerer er gitt ved\n\\[\nS = \\frac{a_1}{1 - k}\n\\]\nHer er \\(S = 8\\) og \\(a_1 = 4\\). Dermed f√•r me\n\\[\n\\begin{align*}\n8 &= \\frac{4}{1 - k} \\\\\n8 - 8k &= 4 \\\\\n8k &= 4 \\\\\nk &= \\frac{4}{8} = \\frac{1}{2}\n\\end{align*}\n\\]\nD√• blir\n\\[\n\\begin{align*}\nS_4 &= a_1 + a_2 + a_3 + a_4 \\\\\n&= 4 + 2 + 1 + \\frac{1}{2} \\\\\n&= 7.5\n\\end{align*}\n\\]\n\n\nb)\nSkal finna \\(a_4\\) n√•r \\[a_1 + a_4 + a_7 = 114\\]\nVeit at \\[a_4 = a_1 + 3d \\Leftrightarrow a_1 = a_4 - 3d\\] og at \\[a_7 = a_4 + 3d\\]\nDermed f√•r me\n\\[\n\\begin{align*}\na_1 + a_4 + a_7 &= 114 \\\\\n(a_4 - 3d) + a_4 + (a_4 + 3d) &= 114 \\\\\n3a_4 &= 114 \\\\\na_4 &= \\frac{114}{3} = 38.\n\\end{align*}\n\\]"
  },
  {
    "objectID": "lf/S2-H23/index.html#oppg√•ve-3",
    "href": "lf/S2-H23/index.html#oppg√•ve-3",
    "title": "Eksamen H23 S2",
    "section": "Oppg√•ve 3",
    "text": "Oppg√•ve 3\n\na) einingskostnad\nSer at \\(h(x)=81,75x\\) skj√¶r \\(K(x)\\) i punkt \\(A\\). Dvs at \\(K(40)=g(40) = 81,75\\cdot 40\\)\nDermed m√• einingskostnaden n√•r ein produserer 40 einingar vera 81,75 kr.\n\n\nb) grensekostnad\nI punkt \\(A\\), ved produksjon av 40 einingar tangerer \\(f(x)=31x + 2030\\) grafen til \\(K(x)\\).\nDvs. at stigningstalet til tangenten til \\(K\\) i \\(x=40\\) er 31. Dermed vil \\(K'(40)=31\\) som betyr at grensekostnaden er 31.\n\n\nc) minste einingskostnad\nSer at det l√•gaste stigningstalet ei linje som kryssar b√•de origo og \\(K(x)\\) er linja som tangerer grafen i punkt \\(B\\). Alle andre linjer for st√∏rre eller mindre verdiar av \\(x\\) vil ha h√∏gare stigningstal (og to skj√¶ringspunkt).\nDermed er stigningstalet til denne tangenten, \\(g(x)=60x\\), den minste einingskostnaden.\nDen minste einingskostnaden er 60 kr."
  },
  {
    "objectID": "lf/S2-H23/index.html#oppg√•ve-4",
    "href": "lf/S2-H23/index.html#oppg√•ve-4",
    "title": "Eksamen H23 S2",
    "section": "Oppg√•ve 4",
    "text": "Oppg√•ve 4\n\nN = 1000\nstart = -2\nslutt = 2\ndx = (slutt - start)/N\n\ndef f(x):\n    return x**2-1\n\nS = 0\nfor i in range(N):\n    xi = start + i*dx\n    S = S + abs(f(xi))*dx  # abs(f(x)) gir absoluttverdien til f(x)\n\nprint(S)\n\n\na) - forklar kva eleven vil finna\nSer at eleven arbeider med funksjonen \\(f(x)=x^2-1\\) (linje 6-7). i dei f√∏rste linjene deler han opp avstanden mellom \\(x=-2\\) og \\(x=2\\) i \\(1000\\) like store bitar som han kallar dx.\nI for-l√∏kka reknar han ut summen av 1000 rektangel mellom \\(x=-2\\) og \\(x=2\\). Dei har h√∏gde slik at h√∏gresida av rektangelet er like h√∏gt som \\(f(x)\\) i den aktuelle \\(x\\)-verdien. Sidan han tar absoluttverdien av funksjonsverdien sikrar han at han finn positive verdiar (areal er positivt) for alle dei ulike rektangla.\nDette er ein m√•te √• finna arealet avgrensa av \\(f(x)\\) og \\(x\\)-aksen n√•r \\(x\\in[-2, 2]\\).\n\n\nb) - ved rekning\nVeit at \\(f(x)=x^2-1\\) er - symmetrisk om \\(x\\)-aksen - \\(0\\) n√•r \\(x=-1 \\vee x=1\\) - konveks, dvs \\(f(x)&lt;0\\) n√•r \\(-1&lt;x&lt;1\\)\nKallar arealet me skal finna for \\(A\\). Som f√∏lgje av symmetrien om \\(x\\)-aksen er det nok √• finna arealet avgrensa av \\(x\\)-aksen og grafen til \\(f(x)\\) mellom \\(x=0\\) og \\(x=2\\) og multiplisera resultatet her med 2. D√• slepp me unna ein del algebra üòÖ Sidan \\(f(x)&lt;0\\) i det f√∏rste intervallet m√• me endra forteikn p√• dette for √• finna arealet. Dermed f√•r me:\n\\[\\begin{align*}\nA &= 2\\cdot\\left(-\\int_{0}^1 f(x) \\,dx + \\int_1^2f(x) \\,dx \\right)\n\\end{align*}\\]\nReknar ut areala for seg\n\\[\\begin{align*}\n\\int_{0}^{1} f(x) \\,dx &= \\left(\\frac{1^3}{3}-1\\right) - \\left(\\frac{0^3}{3}-0\\right) \\\\\n&= \\frac{-2}{3} \\\\\n\\\\\n\\int_1^2f(x) \\,dx &= \\left(\\frac{2^3}{3}-2\\right) - \\left(\\frac{1^3}{3}-1\\right) \\\\\n&= \\left(\\frac{8}{3}-2\\right) - \\left(\\frac{1}{3}-1\\right) \\\\\n&= \\left(\\frac{2}{3}\\right) + \\left(\\frac{2}{3}\\right) \\\\\n&= \\frac{4}{3}\n\\end{align*}\\]\nOg arealet blir \\[\\begin{align*}\nA &= 2\\cdot\\left(-\\int_{0}^1 f(x) \\,dx + \\int_1^2f(x) \\,dx \\right) \\\\\n&= 2\\cdot \\left( - \\left(\\frac{-2}{3} \\right) + \\frac{4}{3} \\right) \\\\\n&= 2\\cdot \\frac{6}{3} \\\\\n&= 4\n\\end{align*}\\]"
  },
  {
    "objectID": "lf/S2-H23/index.html#oppg√•ve-5",
    "href": "lf/S2-H23/index.html#oppg√•ve-5",
    "title": "Eksamen H23 S2",
    "section": "Oppg√•ve 5",
    "text": "Oppg√•ve 5\nTre typar kuler i ein kasse.\n\n\n\nvekt (\\(X\\))\n\\(P(X=x)\\)\n\n\n\n\n4 kg\n\\(\\frac{1}{4}\\)\n\n\n5 kg\n\\(\\frac{1}{2}\\)\n\n\n10 kg¬†\n\\(1-\\frac{1}{4}-\\frac{1}{2} = \\frac{1}{4}\\)\n\n\n\n\na) Forventningsverdi, E(X)\n\\[\\begin{align*}\nE(X) &= \\sum_{i=1}^{3} x_i \\cdot P(X=x_i) \\\\\n&= 4\\cdot \\frac{1}{4} + 5\\cdot\\frac{1}{2} + 10 \\cdot \\frac{1}{4} \\\\\n&= \\frac{4 + 10 + 10}{4} = \\frac{24}{4} = 6\n\\end{align*} \\]\nDermed er \\(E(X)=6\\, kg\\)\n\n\nb) Sannsynsfordelinga til Y\nVeit at \\(Y=X_1 + X_2\\). Sidan det er med tilbakelegging vil me kunna bruka to like eller to ulike kuler. Dermed kan total vekt, \\(Y\\), bli:\n\n\n\nvekt i kg (\\(Y\\))\n\\(P(Y=y)\\)\n\n\n\n\n8 = 4 + 4\n\\(\\frac{1}{16} = \\frac{1}{4} \\cdot \\frac{1}{4}\\)\n\n\n9 = 4 + 5\n\\(\\frac{1}{4} = 2\\cdot \\frac{1}{4} \\cdot \\frac{1}{2}\\)\n\n\n10 = 5 + 5¬†\n\\(\\frac{1}{4} = \\frac{1}{2} \\cdot \\frac{1}{2}\\)\n\n\n14 = 4 + 10\n\\(\\frac{1}{8} = 2\\cdot \\frac{1}{4} \\cdot \\frac{1}{4}\\)\n\n\n15 = 5 + 10\n\\(\\frac{1}{4} = 2\\cdot \\frac{1}{2} \\cdot \\frac{1}{4}\\)\n\n\n20 = 10 + 10\n\\(\\frac{1}{16} = \\frac{1}{4} \\cdot \\frac{1}{4}\\)\n\n\n\nSer at summen av sannsyna her vert 1, som tyder p√• at fordelinga er rett.\n\n\nc) P(Y &gt; 10)\nBruker sannsynsfordelinga over.\n\\[ \\begin{align*}\nP(Y&gt;10) &= P(Y=14) + P(Y=15) + P(Y=20) \\\\\n&= \\frac{1}{8} + \\frac{1}{4} + \\frac{1}{16} \\\\\n&= \\frac{2 + 4 + 1}{16} \\\\\n&= \\frac{7}{16}\n\\end{align*} \\]"
  },
  {
    "objectID": "lf/S2-H23/index.html#oppg√•ve-1",
    "href": "lf/S2-H23/index.html#oppg√•ve-1",
    "title": "Eksamen H23 S2",
    "section": "Oppg√•ve 1",
    "text": "Oppg√•ve 1\n\n\n\nPris (kr)\nEtterspurnad\n\n\n\n\n10\n237\n\n\n20\n111\n\n\n30\n49\n\n\n40\n22\n\n\n50\n12\n\n\n\n\na) Lag ein modell\nLag ein modell \\(q\\) som kan brukast for √• beskriva samanhengen mellom pris i kroner \\(p\\) og dagleg etterspurnad.\nSer at n√•r ein aukar prisen med 10 kroner vert etterspurnaden omlag halvert. Det kan tyda p√• at ein eksponentiell modell kan passa her. Plottar datapunkta og ser korleis dei ser ut:\n\nimport matplotlib.pyplot as plt\n\npris = [10, 20, 30, 40, 50]\netterspurnad = [237, 111, 49, 22, 12]\n\nplt.plot(pris, etterspurnad, \"o\")\nplt.show()\n\n\n\n\n\n\n\n\nDet ser framleis ut som ein eksponentiell funksjon er ein veg √• g√• her. Den er p√• forma \\[q(p)= a \\cdot b^p\\] Bruker regresjon i python for √• finna ein passande modell.\n\nfrom scipy.optimize import curve_fit\nimport numpy as np\n\ndef q(p, a, b):\n    return a * b**p\n\n# gjetter ca koeffverdi\n#gjett = [650, 25, 1]\n\n# finn funksjonen\nK, E = curve_fit(q, xdata=pris, ydata=etterspurnad)\n\n# hentar ut koeff.\na, b = K\n\nx_verdiar = np.linspace(0, 60, 1000)\ny_verdiar = q(x_verdiar, a, b)\n\n# plottar modell og datapunkt\nplt.plot(x_verdiar, y_verdiar)\nplt.plot(pris, etterspurnad, \"o\")\n\n# x- og y-akse\nplt.axhline(y=0, c=\"black\")\nplt.axvline(x=0, c=\"black\")\n\n# skriv ut koeff.\nprint(f\"a = {a:.0f} \\nb = {b:.4f}\")\n\na = 515 \nb = 0.9255\n\n\n\n\n\n\n\n\n\nF√•r at \\(q(p)= 515\\cdot 0,926^p\\)\nDenne modellen vil ikkje vera gyldig for veldig l√•ge verdiar av \\(p\\) sidan det ikkje er realistisk at dei sel vara til feks. 1 kr. Samstundes vil nok ikkje modellen vera gyldig for veldig store verdiar av \\(p\\) heller, sidan prisen p√• eitt tidspunkt vert for h√∏g til at nokon vil kj√∏pa vara. Pr√∏ver modellen for ulike verdiar for \\(p\\).\n\nfor i in range(5):\n    pris = 50 + 10*i\n    print(f\"pris: {pris}, etterspurnad: {q(pris, a, b):.2f}\")\n\npris: 50, etterspurnad: 10.71\npris: 60, etterspurnad: 4.94\npris: 70, etterspurnad: 2.28\npris: 80, etterspurnad: 1.05\npris: 90, etterspurnad: 0.48\n\n\nSer at etterspurnaden er ca. ei vare n√•r prisen er 80. Etter dette vil ein ikkje f√• solgt varer.\nModellen kan vera gyldig n√•r \\(p\\in[1, 80]\\) (gitt at dei kan selja vara for mindre enn 10 kr.)\n\n\nb) 70 einingar pr dag\nL√∏yser likninga \\(q(p)= 70\\)\n\nfrom sympy import Symbol, Eq, solveset, Reals\n\np = Symbol(\"p\")\n\nvs = 515 * 0.926**p\nhs = 70\n\nlikning = Eq(vs, hs)\nl√∏ysing = solveset(likning, p, Reals)\nl√∏ysing.evalf(4)\n\n\\(\\displaystyle \\left\\{25.96\\right\\}\\)\n\n\nPrisen b√∏r i f√∏lge modellen vera 26 jr for at bedrifta skal selja 70 einingar per dag.\n\n\nc) st√∏rst mogleg inntekt\nFor ei anna vare gjeld modellen \\[p=79-12,2 \\ln(x)\\] der \\(x\\) er den daglege etterspurnaden n√•r vara kostar \\(p\\) kr.\nInntektene finn me ved √• ganga prisen med tal solgte eininigar.\n\\[\\begin{align*}\nI(x) &= p(x) \\cdot x \\\\\n&= (79-12.2\\ln(x))\\cdot x\n\\end{align*}\\]\n\nPythonGeoGebra\n\n\nL√∏yser i Python med SymPy\n\nfrom sympy import diff, ln\nx = Symbol(\"x\")\n\n# definerer og deriverer I\nI = (79 - 12.2 * ln(x)) * x \ndI = I.diff()\n\n# finn nullpunkt\nvs = dI\nhs = 0\nlikning = Eq(vs, hs)\nl√∏ysing = solveset(likning, x, Reals)\n\n# skriv ut svaret\nl√∏ysing.evalf(3)\n\n\\(\\displaystyle \\left\\{239.0\\right\\}\\)\n\n\nSer at produksjonsmengd p√• 239 gir st√∏rst inntekt. Finn prisen n√•r \\(x=239\\).\n\np = 79 - 12.2*ln(x)\np.subs(x, 239).evalf(2)\n\n\\(\\displaystyle 12.0\\)\n\n\n\n\nL√∏yser i GeoGebra\n\n\n\n\nPris p√• 12 kroner gir st√∏rst inntekt.\n\n\nd) Grensekostnad og grenseinntekt\nKostnadsfunksjon gitt ved \\[K(x)=0,21x^2 + 10x + 910\\]\nVil finna \\(x\\) som gjer at grensekostnad og grenseinntekt blir like.\n\nfrom sympy import nsolve\n\n# definerer og deriverer I\nI = (79 - 12.2 * ln(x)) * x \ndI = I.diff()\n\n# definerer og deriverer K\nK = 0.021*x**2 + 10*x + 910\ndK = K.diff()\n\n# set opp og l√∏yser likninga\nvs = dI \nhs = dK\n\n# l√∏yser numerisk, nsolve treng startverdi\n# ber han starta p√• 1\ngjett = 1\n\nlikning = Eq(vs, hs)\nl√∏ysing = nsolve(likning, x, gjett)\nl√∏ysing.evalf(2)\n\n\\(\\displaystyle 80.0\\)\n\n\nGrensekostnadene og grenseinntektene er like n√•r det vert solgt 80 einingar.\nDette er vinningsoptimal produksjonsmengde, sidan det er her overskotsfunksjonen har sitt ekstremalpunkt.\n\\[\\begin{align*}\nO(x) &= I(x) - K(x) \\\\\nO'(x) &= I'(x) - K'(x) \\\\ \\\\\nO'(x) &= 0 \\\\ &\\Updownarrow \\\\ I'(x)&=K'(x)\n\\end{align*}\\]"
  },
  {
    "objectID": "lf/S2-H23/index.html#oppg√•ve-2",
    "href": "lf/S2-H23/index.html#oppg√•ve-2",
    "title": "Eksamen H23 S2",
    "section": "Oppg√•ve 2",
    "text": "Oppg√•ve 2\nMiriam set inn 20 000 kr i byrjinga av kvart √•r. F√∏rste innskot i starten av 2024, andre innskot i starten av 2025 osb. Fast √•rleg rentesats p√• 3,5 %.\n\na) etter 20 innskot\nBruker python for √• finna ut av dette. Like etter at ho har sett inn innskot 20 betyr at dette ikkje har forrenta seg. Innskot 19 vil ha forrenta seg ein gong, nr. 18 to gongar osb.\n\ninnskot = 20000\n\nkonto = 0\nrente = 1.035\n\nfor √•r in range(20):\n    konto = konto + innskot\n    innskot = innskot * 1.035\n\nprint(f\"P√• konto rett etter innskot nr 20: {konto:.0f} kr\")\n\nP√• konto rett etter innskot 20: 565594\n\n\n\n\nb) Hermod sitt sparebel√∏p\nPr√∏ver meg fram med utgangskpunkt i koden fr√• (a)\n\n# metoden fr√• (a) som funksjon\ndef etter20√•r(innskot):\n    innskot = innskot\n\n    konto = 0 \n    rente = 1.035\n\n    for √•r in range(20):\n        konto = konto + innskot\n        innskot = innskot * 1.035\n\n    return konto\n\n# veit fr√• (a) at innskotet er st√∏rre enn 20000\ninnskot = 20000\n\n# pr√∏ver meg fram til eg finn innskotet\nwhile etter20√•r(innskot) &lt;= 692852:\n    innskot = innskot + 1 \n\nprint(innskot)\n\n24500\n\n\nHan m√• setje inn 24 500 kr kvart √•r for √• f√• 692 852 kr etter det 20. innskotet.\n\n\nc) Variabelt innskot\nF√∏rste innskot blir \\(20000 + 0x\\). Andre innskot blir \\(20000+x\\), tredje \\(20000+2x\\) osv.\nF√∏rste innskot forrentar seg 19 gongar, til \\((20000+0x)\\cdot 1,035^{19}\\). Andre innskot blir til \\((20000 + x)\\cdot 1,035^{18}\\) osv.\nDermed f√•r me \\[(20000 + (1-1)x)\\cdot 1,035^{20-1} + (20000 + (2-1)x)\\cdot 1,035^{20-2} + \\ldots (20000 + (20-1)x)\\cdot 1,035^{20-20} \\]\nSer at denne summen kan delast inn i to summar \\[\\begin{align*}\ns_1 &= 20000 + 20000\\cdot 1,035 + 20000\\cdot 1,035^2 + \\ldots 20000\\cdot 1,035^{19} \\\\\ns_2 &= (1-1)x\\cdot 1,035^{20-1} + (2-1)x\\cdot 1,035^{20-2} + \\ldots (20-1)x\\cdot 1,035^{20-20}\n\\end{align*}\\]\nFr√• (a) veit me at \\(s_1 = 565594\\). Dermed m√• me finna \\(x\\) slik at \\(s_2 = 1000000-565594\\).\n\ndef sum_auke(x):\n    total = 0\n\n    for i in range(1, 21):\n        ledd = (i-1)*x * 1.035**(20-i)\n        total = total + ledd\n\n    return total\n\n# det variable sparebel√∏pet m√• \n# voksa til \"m√•l\"\nm√•l = 1000000 - 565594\n\n# startverdi\nx = 0\n\n# finn auken \nwhile sum_auke(x) &lt; m√•l:\n    x = x + 0.5\n\nprint(f\"Sparebel√∏pet m√• aukast med {x} kr pr. √•r\")\nprint(f\"D√• har ho {sum_auke(x) + 565594:.2f} kr p√• konto rett etter innskot nr. 20\")\n\nSparebel√∏pet m√• aukast med 1836.5 kr pr. √•r\nD√• har ho 1000040.73 kr p√• konto rett etter innskot nr. 20"
  },
  {
    "objectID": "lf/S2-H23/index.html#oppg√•ve-3-1",
    "href": "lf/S2-H23/index.html#oppg√•ve-3-1",
    "title": "Eksamen H23 S2",
    "section": "Oppg√•ve 3",
    "text": "Oppg√•ve 3\nVinterdekk med bremselengd 83 meter under bestemte forhold.\n\\(X\\): bremselengda ved eit tilfeldig m√•ling under dei bestemte forholda.\n\\(X\\) er normalfordelt med \\(\\mu = 83\\,m\\) og \\(\\sigma = 3,0\\, m\\)\nMykje her kan l√∏ysast i sannsynskalkulatoren til GeoGebra. Eg vel √• nytta simuleringar for √• finna svara her.\n\n# importerer numpy og lagar tilfeldighetsgenerator\nimport numpy as np\nrng = np.random.default_rng()\n\n\na) Bremselengd over 87 meter\nSimulerer mange tilfeldige m√•lingar og ser kor mange som er over 87 meter.\n\nN = 100000000\n\nbremselengd = rng.normal(83, 3.0, size=N)\n\ngunstige = sum(bremselengd &gt; 87)\n\nsannsyn = gunstige / N\n\nprint(f\"P(X &gt; 87) = {sannsyn:.4f}\")\n\nP(X &gt; 87) = 0.0912\n\n\nK√∏yrer simuleringa med 100 000 000 fors√∏k fleire gongar og ser at \\(P(X&gt;87)=0,0912\\).\n\nVed rekning\nBruker scipy.stats sin norm.cdf(x, forventningsverdi, standardavvik) for √• bestemma sannsynet. Den returnerer \\(P(X\\leq x)\\), s√• for √• finna \\(P(X&gt;x)\\) trekk eg resultatet fr√• 1.\n\nfrom scipy.stats import norm\n\nmu = 83          # gjennomsnitt\nsigma = 3        # standardavvik\nx = 87  \n\nsannsyn = 1 - norm.cdf(x, mu, sigma)\n\nprint(f\"P(X &gt; 87) = {sannsyn:.4f}\")\n\nP(X &gt; 87) = 0.0912\n\n\n\n\n\nb) Bestemme k\nBestem \\(k\\) slik at \\(P(X &lt; k)=0,9\\). Gje ei praktisk tolking av svaret\n\nVed rekning (i SciPy)\nFinn \\(k\\) med scipy.stats sin norm.ppf som finn kva \\(k\\) som gjer at \\(P(X\\leq k) = p\\). Oppg√•va sp√∏r etter \\(P(X&lt;k)\\) men antar at sannsynet for akkurat \\(P(X=k)\\) er s√• lite at denne skilnaden ikkje er relevant.\n\nfrom scipy.stats import norm\n\nmu = 83          # gjennomsnitt\nsigma = 3        # standardavvik\nsannsyn = 0.9  \n\n\n# Finn k-verdien for det gjevne sannsynet\nk = norm.ppf(sannsyn, mu, sigma)\nprint(f\"k = {k:.2f}\")\n\nk = 86.84\n\n\n\n\nVed simulering\nTek utgangspunkt i koden fr√• a), men minkar gradvis bremselengda (k) til sannsynet vert 0,9.\n\nN = 10000000\n\n# startverdiar\nk = 85   \nsannsyn = 0 \n\n# held p√• til sannsynet passerer 0.9\nwhile sannsyn &lt; 0.9:\n    bremselengd = rng.normal(83, 3.0, size=N)\n    gunstige = sum(bremselengd &lt;= k)\n    sannsyn = gunstige / N\n    k = k + 0.01\n\nprint(f\"k = {k:.2f}\")\n\nk = 86.86\n\n\nSer at \\(k\\) m√• vera omtrent 86,8 m.\nDette betyr at det er 90 prosent sannsynleg at bremselengda ved ei tilfeldig m√•ling er kortare enn 86,8 meter under dei bestemte forholda.\n\n\n\nc) Bestemme sannsyn for gjennomsnitt av 15 m√•lingar\nL√∏yser denne og med simulering, men p√• ein litt annan m√•te. Simulerer 15 m√•lingar N gongar i ein tabell som er N brei og 15 h√∏g. Finn vidare gjennomsnittet kolonnevis (dermed snittet av 15 tilfeldige m√•lingar).\n\n# tal simuleringar\nN = 10000000\n\n# simulerer 15 tilfeldige m√•lingar N gongar\nsimulert = rng.normal(83, 3.0, size=(15, N))\n\n# axis=0 -&gt; finn snitt av kolonner\nsnitt = np.average(simulert, axis=0)\n\n# tel opp gunstige og finn sannsynet\ngunstige = sum(snitt &lt; 84)\nsannsyn = gunstige / N\n\nprint(f\"P(snitt 15 m√•lingar &lt; 84 m) = {sannsyn:.4f}\")\n\nP(snitt 15 m√•lingar &lt; 84 m) = 0.9018\n\n\n\nVed rekning\nVeit \\(\\mu\\) og \\(\\sigma\\) for ei tilfeldig m√•ling. Finn \\(E(15X)\\) og \\(SD(15X)\\). \\[\\begin{align*}\nE(15X)&= 15\\cdot E(X) = 15\\cdot 83 m = 1245 m \\\\\nSD(15X) &= SD(X)\\cdot \\sqrt{15} = 3.0m \\cdot \\sqrt{15} \\approx 11,6 m\n\\end{align*}\\] Bruker scipy.stats for √• rekna ut sannsynet for at 15 m√•lingar er mindre enn \\(15\\cdot84m\\).\n\nfrom scipy.stats import norm\n\nmu = 1245\nsigma = 11.6\nx = 15*84\n\nsannsyn = norm.cdf(x, mu, sigma)\n\nprint(f\"P(snitt 15 m√•lingar &lt; 84 m) = {sannsyn:.4f}\")\n\nP(snitt 15 m√•lingar &lt; 84 m) = 0.9020\n\n\nBegge metodane viser at sannsynet for at snittet av 15 m√•lingar er under 84m er 0.902.\n\n\n\nd) Hypotesetest\nDet blir p√•st√•tt at bremselengda er lenger enn 83 meter.\nGjennomf√∏rt 15 m√•lingar.\n\nm√•lingar =  np.array([\n    86.4, 85.5, 82.9, 81.9, 84.0,\n    86.4, 82.3, 85.9, 77.7, 83.0, \n    86.9, 88.3, 86.2, 80.5, 84.8\n    ])\n\nHypoteser\n\\(H_0\\): Bremselengda er 83 meter (under bestemte forhold) \\(\\mu = 83\\)\n\\(H_1\\): Bremselengda er meir enn 83 meter (under bestemte forhold) \\(\\mu &gt; 83\\)\nFinn gjennomsnittet av m√•lingane v√•re.\n\nmu_1 = np.average(m√•lingar)\nprint(mu_1)\n\n84.18\n\n\nReknar ut forventningsverdien og standardavviket til 15 m√•lingar ut fr√• nullpypotesa sine verdiar (samme logikk og utrekning som i c):\nLar \\(X\\) vera bremselengda ved ei tilfeldig m√•ling slik at: \\[X = X_1 + X_2 + \\ldots + X_{15}\\] Sidan alle m√•lingane har samme forventningsverdi og standardavvik f√•r me d√• at \\[E(X)=15\\cdot 83 = 1245\\] og \\[SD(X)=3.0 \\cdot \\sqrt{15} \\approx 11,6\\]\nSamla resutat fr√• m√•lingane ut fr√• snittet v√•rt finn me ved\n\nmu_1 * 15\n\n1262.7\n\n\nSjekkar sannsynet for at \\(P(X\\geq 1262.7)\\) n√•r \\(\\mu=1245\\) og \\(\\sigma=11.6\\)\n\nfrom scipy.stats import norm\n\nmu = 1245           # gjennomsnitt\nsigma = 11.6        # standardavvik\nx = 1262.7          # samla resultat fr√• datamaterialet  \n\nsannsyn = 1 - norm.cdf(x, mu, sigma)\n\nprint(f\"P(X &gt; {x}) = {sannsyn:.4f}\")\n\nP(X &gt; 1262.7) = 0.0635\n\n\nDette tilsvarar ca 6,4 %. Sidan me gjennomf√∏rer testen med signifikansniv√• p√• 5% er det ikkje grunnlag for √• forkaste \\(H_0\\).\nDet er ikkje hold i mistanken."
  },
  {
    "objectID": "lf/S2-H23/index.html#oppg√•ve-4-1",
    "href": "lf/S2-H23/index.html#oppg√•ve-4-1",
    "title": "Eksamen H23 S2",
    "section": "Oppg√•ve 4",
    "text": "Oppg√•ve 4\nFigurtal, pentagonar.\n\\[\\begin{align*}\nP_1 &= 1 \\\\\nP_2 &= 6 \\\\\nP_3 &= 16 \\\\\nP_4 &= 31 \\\\\nP_5 &= 51 \\\\\n\\end{align*}\\]\n\na) Rekursiv samanheng\nSer at \\(P_2-P_1=5\\), \\(P_3-P_2=10\\), \\(P_4-P_3=15\\) osb.\nDermed er ein rekursiv formel som passar \\[P_n = P_{n-1} + 5\\cdot (n-1)\\]\n\n\nb) Programmere rekursiv samanheng\nLagar ein python-kode for √• finna \\(P_{100}\\)\n\n# figurtall 1\nP = 1\n\n# figurtall 2 til og med 100\nfor n in range(2, 101):\n    P = P + 5*(n-1)\n\n# skriv ut P_100\nprint(P)\n\n24751"
  },
  {
    "objectID": "lf/S2-H23/index.html#oppg√•ve-5-1",
    "href": "lf/S2-H23/index.html#oppg√•ve-5-1",
    "title": "Eksamen H23 S2",
    "section": "Oppg√•ve 5",
    "text": "Oppg√•ve 5\n\\(X\\): H√∏gda til tilfeldig vald jente p√• 24 m√•nader.\n\\(E(X)=87\\, cm\\), \\(SD(X)=3,3\\, cm\\)\n\\(Y\\): H√∏gda til tilfeldig vald gut p√• 24 m√•nader.\n\\(E(X)=88\\, cm\\), \\(SD(X)=3,1\\, cm\\)\nLagar eit program for √• ansl√• sannsynet for at h√∏gda til eit tilfeldig valt barn p√• 24 m√•nader er mindre enn 84 cm. Antar at det er like mange jenter som gutar i populasjonen.\n\nimport numpy as np\nrng = np.random.default_rng()\n\n# tal simuleringar \nN = 100000000\n\n# trekk tilfeldige barn og tel opp antal gutar (0) og jenter (1)\nbarn = rng.integers(0, 2, size=N)\nj = sum(barn)\ng = N - j\n\n# finn h√∏gda p√• jenter og gutar for seg\nhj = rng.normal(87, 3.3, size=j)\nhg = rng.normal(88, 3.1, size=g)\n\n# tel opp gunstige utfall\ngunstige = sum(hj &lt; 84) + sum(hg &lt; 84)\n\n# reknar ut sannsynet\nsannsyn = gunstige / N\nprint(f\"P(h√∏gde &lt; 84 cm) = {sannsyn:.4f}\")\n\nP(h√∏gde &lt; 84 cm) = 0.1400\n\n\nK√∏yrer koden med simulert trekk av 100 000 000 barn fleire gongar og ser at sannsynet for at eit barn p√• 24 mnd er mindre enn 84 cm er 0,14."
  },
  {
    "objectID": "lf/2PY-V24/index.html",
    "href": "lf/2PY-V24/index.html",
    "title": "Eksamen V24 2P-Y",
    "section": "",
    "text": "L√∏ysingsforslag eksamen 2P-Y - V24\nHar laga eit forslag til l√∏ysing av v√•reksamen i 2P-Y 2024.\nForslaget til l√∏ysing (pdf) finn du her: V24-2PY-loysingsforslag.pdf\nEg kan ikkje lova at l√∏ysinga er feilfri‚Ä¶ üòä Gje meg gjerne ein lyd om du ser feil.\n\nEksamenssettet finn du hos UDIR: Finn eksamensoppgaver\n\n\n\n\nGjenbrukCC BY 4.0"
  },
  {
    "objectID": "lf/S2-V23/index.html",
    "href": "lf/S2-V23/index.html",
    "title": "Eksamen V23 S2",
    "section": "",
    "text": "Her er eit forslag til l√∏ysing av v√•reksamen i S2 2023. I del 2 er oppg√•vene stort sett Python brukt som hjelpemiddel.\nEg kan ikkje lova at l√∏ysinga er feilfri‚Ä¶ üòä Gje meg gjerne ein lyd i kommentarfeltet eller her om du ser feil üîç\nSist oppdatert: 29.04.2024\n\nEksamenssettet finn du hos UDIR: Finn eksamensoppgaver"
  },
  {
    "objectID": "lf/S2-V23/index.html#oppg√•ve-1---bestemt-integral",
    "href": "lf/S2-V23/index.html#oppg√•ve-1---bestemt-integral",
    "title": "Eksamen V23 S2",
    "section": "Oppg√•ve 1 - bestemt integral",
    "text": "Oppg√•ve 1 - bestemt integral\nRekn ut integralet\n\\[\n\\begin{align*}\n\\int_0^1 \\left(e^x + 3x^2 \\right) dx &= \\left[ e^x + x^3 \\right]_0^1 \\\\\n&= \\left( e^1 + 1^3 \\right) - \\left(e^0 - 0^3\\right) \\\\\n&= e + 1 - (1-0) = e + 1 - 1 \\\\\n&= e\n\\end{align*}\n\\]"
  },
  {
    "objectID": "lf/S2-V23/index.html#oppg√•ve-2---kostnads--og-inntektsfunksjon",
    "href": "lf/S2-V23/index.html#oppg√•ve-2---kostnads--og-inntektsfunksjon",
    "title": "Eksamen V23 S2",
    "section": "Oppg√•ve 2 - kostnads- og inntektsfunksjon",
    "text": "Oppg√•ve 2 - kostnads- og inntektsfunksjon\nBruker figuren fr√• oppg√•vesettet med inntekst- og kostnadsfunksjonane sine respektive grafar\n\na) - grensekostnad\nGrensekostnaden n√•r det blir produsert 40 einingar er eit omtrentleg m√•l p√• kor mykje meir det vil kosta oss √• produsera ei eining til (dvs. 41). Grensekostnaden finn me ved √• sj√• p√• den deriverte til kostnadsfunksjonen. For √• finna den fr√• grafen kan me teikna ein tangent til kostnadsfunksjonen som tangerer n√•r \\(x=40\\). Deretter finn me stigningstalet til denne tangenten.\nDen aktuelle tangenten vil g√• gjennom tangeringspunktet \\((40, 3000)\\) og punktet \\((80, 6000)\\).\nDermed er grensekostnaden n√•r det blir produsert 40 einingar: \\[ K'(40) \\approx \\frac{\\Delta y}{\\Delta x} = \\frac{6000-3000}{80-40} = \\frac{3000}{40} = 75 \\]\n\n\nb) - st√∏rst overskot\nOverskotet er st√∏rst der overskotsfunksjonen har sitt ekstremalpunkt.\nOverskotssfunksjonen finn me ved √• trekka kostnadene fr√• inntektene. Dermed har me at \\[ \\begin{align*}\nO(x) &= I(x) - K(x) \\\\\nO'(x) &= I'(x) - K'(x)\n\\end{align*} \\]\nSom betyr at \\[O'(x) = 0 \\Leftrightarrow I'(x) = K'(x)\\]\nMe kan alts√• sj√• p√• grafen kva \\(x\\)-verdi som gjer at tangenten til inntektsfunksjonen og tangenten til kostnadsfunksjonen har samme stigningstal.\nI dette tilfellet ser det ut til √• vera for \\(x\\approx 55\\), dvs. 55 einingar."
  },
  {
    "objectID": "lf/S2-V23/index.html#oppg√•ve-3",
    "href": "lf/S2-V23/index.html#oppg√•ve-3",
    "title": "Eksamen V23 S2",
    "section": "Oppg√•ve 3",
    "text": "Oppg√•ve 3\n\na) totalt sannsyn\nDet totale sannsynet, summen av sannsyna i sannsynsfordelinga, m√• vera 1. Dermed har me at\n\\[\\begin{align*}\nk + 0.3 + (k-0.2) + 0.1 &= 1  \\\\\n2k + 0.2 &= 1 \\\\\n2k &= 0.8 \\\\\nk &= 0.4\n\\end{align*}\\]\nOg d√• blir \\[\\begin{align*}\nP(X&gt;1) &= P(X=2)+P(X=3) \\\\\n&=(k-0.2) + 0,1 \\\\\n&= (0,4-0.2)+0.1 \\\\\n&= 0.3\n\\end{align*}\n\\]\n\n\nb) - forventningsverdi og varians\nSkriv om tabellen med \\(k=0.4\\)\n\n\n\n\\(x\\)\n\\(P(X=x)\\)\n\n\n\n\n0\n0.4\n\n\n1\n0.3\n\n\n2\n0.2\n\n\n3\n0.1\n\n\n\n\nForventningsverdi, E(X)\nVeit at\n\\[E(X) = \\sum x_i \\cdot P(X=x_i)\\]\nBruker dette og finn forvetningsverdien:\n\\[\\begin{align*}\nE(X) &= \\sum x_i \\cdot P(X=x_i) \\\\\n&= 0\\cdot 0.4 + 1 \\cdot 0.3 + 2 \\cdot 0.2 + 3 \\cdot 0.1 \\\\\n&= 0 + 0.3 + 0.4 + 0.3 \\\\\n&= 1\n\\end{align*}\\]\n\n\nVarians, Var(X)\nVeit no at \\(\\mu = E(X) = 1\\). Variansen er det gjennomsnittlege kvadratavviket mellom observasjonane og \\(\\mu\\). Dermed er\n\\[\\begin{align*}\nVar(X) &= \\sum (x_i-\\mu)^2\\cdot P(X=x_i) \\\\\n&= (0-1)^2\\cdot 0.4 + (1-1)^2 \\cdot 0.3 + (2-1)^2 \\cdot 0.2 + (3-1)^2 \\cdot 0.1 \\\\\n&= 1\\cdot 0.4 + 0\\cdot 0.3 + 1\\cdot 0.2 + 4\\cdot 0.1 \\\\\n&= 0.4 + 0.2 + 0.4 \\\\\n&= 1\n\\end{align*}\\]\nDermed har me funne at \\(E(X)=Var(X)=1\\)"
  },
  {
    "objectID": "lf/S2-V23/index.html#oppg√•ve-4",
    "href": "lf/S2-V23/index.html#oppg√•ve-4",
    "title": "Eksamen V23 S2",
    "section": "Oppg√•ve 4",
    "text": "Oppg√•ve 4\n\na = 3\nd = 4\n\nN = 10\nS = 0\n\nfor i in range(N):\n    S = S + a\n    a = a + d\n\nprint(S)\n\n\na) - forklar koden\nI forl√∏kka ser me at storleikane S og a vert endra N gongar.\na vert lagt til S medan d vert lagt til a.\nF√∏rst i programmet definerer ein a=3 og d=4. Me ser √≤g at S=0.\nDesse opplysningane kombinert samsvarar godt med aritmetiske f√∏lger og summen av dei.\nEleven her vil alts√• rekne ut summen av ei aritmetisk f√∏lge der \\(a_1 = 3\\) og differansen mellom ledda er 4. N=10 betyr at eleven finn summen av dei 10 f√∏rste ledda av denne f√∏lga.\n\n\nb) - resultat n√•r N=100\nUt fr√• forklaringa i (a) vil dette seie at programmet reknar ut summen av dei 100 f√∏rste ledda i \\(a_n = 3 + (n-1)4 = 4n - 1\\)\nFor √• finna summen av dei 100 f√∏rste ledda treng me \\(a_1\\) og \\(a_{100}\\). Bruker den eksplisitte formelen.\n\\[\\begin{align*}\na_1 &= 4\\cdot 1 - 1 = 3 \\\\\na_{100} &= 4\\cdot 100 - 1 = 399\n\\end{align*}\\]\n\\[\\begin{align*}\nS_{100} &= \\frac{a_1 + a_{100}}{2} \\cdot 100 \\\\\n&= \\frac{3 + 399}{2} \\cdot 100 \\\\\n&= 201\\cdot 100 \\\\\n&= 20100\n\\end{align*}\\]\nN√•r me endrar til N=100 i linje fire skriv programmet ut 20100."
  },
  {
    "objectID": "lf/S2-V23/index.html#oppg√•ve-5",
    "href": "lf/S2-V23/index.html#oppg√•ve-5",
    "title": "Eksamen V23 S2",
    "section": "Oppg√•ve 5",
    "text": "Oppg√•ve 5\nSer om me finn eit system her.\n\nDag 1: 7 mg i kroppen\nDag 2: 7 mg + \\(0.9 \\cdot 7\\) mg i kroppen (ny tabelett + 90% av tab. dagen f√∏r)\nDag 3: 7 mg + \\(0.9 \\cdot 7\\) mg + \\(0.9(0.9 \\cdot 7)\\) mg i kroppen.\n\nSer at dette dannar ei geometrisk rekke med \\(a_1 = 7\\) og \\(k=0.9\\).\nSidan \\(-1&lt;k&lt;1\\) er den uendelege geometriske rekka konvergent, og me kan finna ein sum:\n\\[\\begin{align*}\nS &= \\frac{a_1}{1-k} \\\\\n&= \\frac{7}{1-0.9} \\\\\n&= \\frac{7}{0.1} \\\\\n&= 70\n\\end{align*}\\]\nOm Knut tar ein tablett kvar dag til evig tid vil han aldri overstiga 70 mg verkestoff i kroppen. Legen har rett."
  },
  {
    "objectID": "lf/S2-V23/index.html#oppg√•ve-6",
    "href": "lf/S2-V23/index.html#oppg√•ve-6",
    "title": "Eksamen V23 S2",
    "section": "oppg√•ve 6",
    "text": "oppg√•ve 6\n\na) finn sannsynet\nF√•r oppgitt at \\(\\mu = 500\\) og \\(\\sigma = 50\\).\nVil finna \\(P(X &gt; 600)\\). Gjer om til standard normalfordeling, slik at me kan nytta tabellen i vedlegget.\n\\[z = \\frac{x-\\mu}{\\sigma} = \\frac{600-500}{50} = 2 \\]\nDermed veit me at \\[P(X&gt;600) = P(Z &gt; 2)\\]\nLes av tabellen og ser at \\(P(Z\\leq 2) = 0.9772\\)\nDermed er \\(P(Z&gt;2)=1-P(Z\\leq2)=1-0.9772 = 0.0228\\)\nAlts√• er \\(P(X &gt; 600) = 0.0228\\)\n\n\nb) bestem t\nF√•r oppgitt at \\(P(X &gt; t) = 0.758\\). Det vil seie at \\(P(Z\\leq z) = 1 - 0.758 = 0.242\\)\nVil finna ein \\(z\\) som tilfredsstiller dette. Ser i tabellen i vedlegget at \\(z=-0.7\\) er rett verdi.\nG√•r fr√• standard normalfordeling til v√•r normalfordeling ved √• g√• motsett veg enn i oppg√•ve (a).\n\\[\\begin{align*}\nz &= \\frac{x-\\mu}{\\sigma} \\\\\n-0.7 &= \\frac{x-500}{50} \\\\\n-35 &= x - 500 \\\\\nx &= 465\n\\end{align*}\\]\nDermed m√• \\(t=465\\).\nDet er 75,8% sannsynleg at eit tilfeldig trekt batteri har levetid p√• meir enn 465 timar.\n\n\nc) grafisk framstilling\nSidan \\(\\mu = 500\\) m√• toppunktet til grafen vera i \\(x=500\\). Dette ekskluderer B og C.\nI tillegg veit me at \\(\\sigma = 50\\) betyr at ca. 95% av observasjonane, eller arealet under grafen i denne framstillinga, skal vera mindre enn 2 standardavvik fr√• forvetningsverdien. Dvs. \\(500 \\pm 2\\cdot 50 = 500 \\pm 100\\). Dette eksluderer D som har ein st√∏rre del av arealet sitt utanfor intevallet mellom \\(x=400\\) og \\(x=600\\).\nFigur A illustrerer \\(X\\)."
  },
  {
    "objectID": "lf/S2-V23/index.html#oppg√•ve-1",
    "href": "lf/S2-V23/index.html#oppg√•ve-1",
    "title": "Eksamen V23 S2",
    "section": "Oppg√•ve 1",
    "text": "Oppg√•ve 1\nL√•n\n\na) terminbel√∏p\nI eit annuitetsl√•n skal summen av noverdiane av annuitetane (terminbel√∏pa) vera likt l√•nebel√∏pet. G√•r ut fr√• at f√∏rste innbetaling er om ein m√•nad. Om me kallar annuiteten \\(x\\), vil noverdien av f√∏rste innbetaling vera \\(\\frac{x}{1.0049}\\), noverdien av andre innbetaling vera \\(\\frac{x}{1.0049^2}\\) osb.\nDette er ei geometrisk rekke med \\(a_1 = \\frac{x}{1.0049}\\) og \\(k= \\frac{1}{1.0049}\\). Summen av dei 36 f√∏rste ledda skal bli 150000.\nL√∏yser i CAS:\n\n\n\nb) dekke restl√•n?\nLagar eit python-skript for √• finne restl√•net etter 24 innbetalingar.\n\nrestl√•n = 150000\nrentefot = 0.0049\nterminbel = 4555.14\n\nN = 24\n\nfor i in range(N):\n    renter = restl√•n*rentefot\n    avdrag = terminbel - renter\n\n    restl√•n = restl√•n - avdrag\n\nprint(f\"Restl√•n etter {N} terminar er ca {restl√•n:.0f} kr\")\n\nRestl√•n etter 24 terminar er ca 52960 kr\n\n\nDei 55000 kr vil vera nok til √• dekka restl√•net."
  },
  {
    "objectID": "lf/S2-V23/index.html#oppg√•ve-2",
    "href": "lf/S2-V23/index.html#oppg√•ve-2",
    "title": "Eksamen V23 S2",
    "section": "Oppg√•ve 2",
    "text": "Oppg√•ve 2\nTabellen viser kor mange millionar kroner brukt p√• str√∏yming av musikk i nokre √•r i perioden 2008 til 2018\n\n\n\n√Ör\nStr√∏yming\n\n\n\n\n2008\n2\n\n\n2010\n70\n\n\n2012\n246\n\n\n2014\n456\n\n\n2016\n582\n\n\n2018\n655\n\n\n\n\na) Lag ein modell\nMe startar med √• lage to arrays med \\(x\\) og \\(y\\)-verdiar. Sidan \\(F(0)\\) skal tilsvare talet p√• str√∏ymingar i 2008 let me \\(x\\) vera √•r etter 2008.\n\n# importerer aktuelle pakkar\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\n# data fr√• tabellen\nx = np.array([0, 2, 4, 6, 8, 10])\ny = np.array([2, 70, 246, 456, 582, 655])\n\nPlottar datapunkta for √• f√• ei oversikt over korleis dei ser ut.\n\nplt.plot(x, y, \"o:\")\nplt.show()\n\n\n\n\n\n\n\n\nDet kan sj√• ut som om punkta ligg p√• ei S-kurve, slak stigning i starten og slutten, med bratt stigning p√• midten. Pr√∏ver difor √• laga ein logistisk modell.\nEin logistisk funksjon er gitt p√• forma \\[ f(x) = \\frac{B}{1+a\\cdot e^{-k\\cdot x}}\\]\n\n# generell logistisk funksjon\ndef F(x, B, a, k):\n    return B / (1 + a * np.exp(-k*x))\n\n\nx_verdiar = np.linspace(0, 10, 1000)\n\n\n# gjetter ca koeffverdi\ngjett = [650, 25, 1]\n\n# finn funksjonen\nK, E = curve_fit(F, x, y, p0=gjett)\n\n# hentar ut koeff.\nB, a, k = K\n\n# rekna ut y-verdiar\ny_verdiar = F(x_verdiar, B, a, k)\n\n# plottar grafen\nplt.plot(x_verdiar, y_verdiar)\nplt.plot(x, y, \"o\")\nplt.show()\n\n\n\n\n\n\n\n\n\nprint(f\"Koeffisientane er ca.: B={B:.0f}, a={a:.0f}, k={k:.2f}\")\n\nKoeffisientane er ca.: B=660, a=31, k=0.71\n\n\n\n\nb) Bestemme verdiar\nBestem \\(I\\), \\(G\\), \\(S\\) og \\(D\\):\n\\[ \\begin{align*}\n    I &= \\int_{-0.5}^{10.5} F(x)  dx \\\\\n    G &= \\frac{1}{5} \\int_{2.5}^{7.5} F(x) dx \\\\\n    S &= \\sum_{i=0}^{10} F(i) \\\\\n    D &= \\frac{F(5.001) - F(5)}{0.001}\n\\end{align*}\n\\]\nBruker CAS: Sj√• radene i skjermbiletet for verdiane til \\(I\\), \\(G\\), \\(S\\) og \\(D\\)\n\n\n\nc) Praktisk tolking\nAt \\(I\\approx 3734\\) betyr at det har blitt str√∏yma om lag 3734 millionar songar i perioden 2008 til 2018. Reknar med at 2008 er mellom \\(x=-0.5\\) og \\(x=0.5\\) og 2018 er mellom \\(x=9.5\\) og \\(x=10.5\\).\nAt \\(G\\approx 345\\) betyr at det har blitt str√∏yma om lag 345 millionar songar i gjennomsnitt per √•r i perioden 2010 til 2015.\nAt \\(S\\approx 3734\\) betyr at det har blitt str√∏yma om lag 3734 millionar songar i perioden 2008 til 2018. Forskjellen p√• \\(I\\) og \\(G\\) er at \\(I\\) reknar med \\(F(x)\\) som ein kontinuerleg funksjon, medan \\(S\\) reknar med diskrete verdiar (√•r for √•r).\nAt \\(D\\approx 117\\) betyr at vekstfarten (den deriverte) n√•r \\(x=5\\) er 117 millionar songar per √•r. Alts√• kan ein tenka at det vil bli str√∏yma 117 millionar fleire songar i 2014 enn i 2013. (\\(x=5\\) svarar til 2013)"
  },
  {
    "objectID": "lf/S2-V23/index.html#oppg√•ve-3-1",
    "href": "lf/S2-V23/index.html#oppg√•ve-3-1",
    "title": "Eksamen V23 S2",
    "section": "Oppg√•ve 3",
    "text": "Oppg√•ve 3\nBlindtest av Coca-Cola og Pepsi-Cola.\n\na) Berre tipping\n\\(X\\) er rette svar n√•r ho smakar p√• 10 glas. Dermed er\n\\[X = X_1+X_2+\\ldots+X_{10}\\]\nDersom Marte berre skal tippa p√• dei ti glasa kan me g√• ut fr√• at \\(P(X_i) = 0.5\\) for alle \\(i\\). Dvs. at det er 50% sjanse for at ho tippar rett p√• kvart glas.\nMe skal finna \\(P(X=6)\\). Dette er binomisk sannsyn viss me g√•r ut fr√• at\n\nresultatet av tippinga p√• kvart glas er uavhengig av kva ho har tippa p√• tidlegare\nsannsynet for √• tippa rett er konstant for kvart glas (\\(p=0.5\\))\ndet er berre to utfall, rett eller feil\n\n\nPythonGeoGebra\n\n\nL√∏yser i Python med NumPy.\n\nimport numpy as np\nrng = np.random.default_rng()\n\n# tal simuleringar\nN = 100000\n\n# tal glas\nn = 10\n# sannsynet for √• tippa rett\np = 0.5\n\n# simulerer\nx = rng.binomial(n, p, N)\n\n# tel opp\ngunstige = np.sum(x == 6)\n\n# finn og skriv ut sannsynet\nsannsyn = gunstige / N\nprint(f\"Sannsynet for √• tippa 6 rett er ca {sannsyn:.4f}\")\n\nSannsynet for √• tippa 6 rett er ca 0.2031\n\n\n\n\nBruker sannsynskalkulatoren i GeoGebra. Legg inn n=10 og p=0.5.\nLes av tabellen at sannsynet for √• tippa rett p√• 6 glas er 0.2051.\n\n\n\n\n\n\nb) Hypotesetesting\nMarte svarar rett p√• 8 av 10 n√•r ho gjer s√• godt ho kan.\nMe skal avgjera ved hypotesetesting om det er grunnlag for √• seie at Marte kan kjenna att dei to Colatypane med eit signifikansniv√• p√• 5%.\nNullhypotesa er at Marte ikkje kan skilja mellom dei to, dvs. \\(p=0.5\\). Alternativhypotesa er at ho kan skilja mellom dei to, dvs. \\(p&gt;0.5\\). Dermed f√•r me \\[ \\begin{align*}\nH_0 &: p=0.5 \\\\\nH_1 &: p&gt;0.5\n\\end{align*}\\]\nDermed m√• me sjekka om \\(P(X\\geq 8)\\) er mindre enn 0.05. Gjer dette med simulering p√• same m√•te som i oppg√•ve (a).\n\nimport numpy as np\nrng = np.random.default_rng()\n\n# tal simuleringar\nN = 100000\n\n# tal glas\nn = 10\n# sannsynet for √• tippa rett\np = 0.5\n\n# simulerer\nx = rng.binomial(n, p, N)\n\n# tel opp\ngunstige = np.sum(x &gt;= 8)\n\n# finn og skriv ut sannsynet\nsannsyn = gunstige / N\nprint(f\"Sannsynet for √• tippa 8 eller fleire rett er ca {sannsyn:.4f}\")\n\nSannsynet for √• tippa 8 eller fleire rett er ca 0.0556\n\n\nSidan svaret her er st√∏rre enn 0.05 kan me ikkje forkasta nullhypotesa. Me kan alts√• ikkje sl√• fast at Marte ikkje berre tippar tilfeldig.\n\n\nc) overbevise Birger\nBirger syns 10 glas er lite og vil auka til 30 glas. Kor mange rette m√• Marte svara for at Birger skal bli overbevist om at ho kan skilja mellom dei to Cola-typene med eit signifikansniv√• p√• 5%?\nLagar eit tilsvarande program, men endrar til 30 glas. Lar ei while-l√∏kke sjekka om kor mange rette som trengs for at \\(P(X\\geq x) &lt; 0.05\\).\n\nimport numpy as np\nrng = np.random.default_rng()\n\n# tal simuleringar\nN = 1000000\n\n# tal glas\nn = 30\n# sannsynet for √• tippa rett\np = 0.5\n\n# simulerer\nx = rng.binomial(n, p, N)\n\n# variabel for rette. Startar med halvparten. \nrette = 15\n\n# og startverdi for sannsynet \ngunstige = np.sum(x &gt;= rette)\nsannsyn = gunstige / N\n\n# sjekkar kor mange rette som trengs\nwhile sannsyn &gt; 0.05:\n    rette += 1\n    gunstige = np.sum(x &gt;= rette)\n    sannsyn = gunstige / N\n\nprint(f\"Det trengs minst {rette} rette for at sannsynet \\nfor √• tippa s√• mange eller fleire rett er under 0.05\")\n\nDet trengs minst 20 rette for at sannsynet \nfor √• tippa s√• mange eller fleire rett er under 0.05\n\n\nHo m√• tippa minst 20 av 30 rette for at Birger skal bli overbevist om at ho smakar forskjell."
  },
  {
    "objectID": "lf/S2-V23/index.html#oppg√•ve-4-1",
    "href": "lf/S2-V23/index.html#oppg√•ve-4-1",
    "title": "Eksamen V23 S2",
    "section": "Oppg√•ve 4",
    "text": "Oppg√•ve 4\nTilbod 1: 100 kr f√∏rste veka. Bel√∏pet \\(a_n\\) ho f√•r utbetalt i veke \\(n\\) er gitt ved \\[ a_n = a_{n-1} + 10 \\]\nTilbod 2: 100 kr f√∏rste veka. Bel√∏pet \\(b_n\\) ho f√•r utbetalt i veke \\(n\\) er gitt ved \\[ b_n = b_{n-1}\\cdot 1.05 \\]\n\na) dei fire f√∏rste vekene\nTilbod 1 Lagar python-skript for √• finna dei fire f√∏rste vekene.\n\ndef a(n):\n    if n == 1:\n        return 100\n    else:\n        return a(n-1) + 10\n\nfor i in range(1, 5):\n    print(f\"a({i}) = {a(i)}\")\n\na(1) = 100\na(2) = 110\na(3) = 120\na(4) = 130\n\n\nTilbod 2 Lagar python-skript for √• finna dei fire f√∏rste vekene.\n\ndef b(n):\n    if n == 1:\n        return 100\n    else:\n        return b(n-1)*1.05\n\nfor i in range(1, 5):\n    print(f\"b({i}) = {b(i):.2f}\")\n\nb(1) = 100.00\nb(2) = 105.00\nb(3) = 110.25\nb(4) = 115.76\n\n\n\n\nb) samalikne vekel√∏n\nSjekkar kor mange veker det tar f√∏r tilbod 2 gir h√∏gare l√∏n enn tilbod 1.\n\n# startar i veke 2 sidan tilboda er like i veke 1\nveke = 2\n\n# finn f√∏rste veke der tilbod 2 er st√∏rre enn tilbod 1\nwhile b(veke) &lt; a(veke):\n    veke += 1\n\nprint(f\"Etter {veke} veker er tilbod 2 &gt; tilbod 1\")\nprint(f\"tilbod 1: {a(veke):.2f}\")\nprint(f\"tilbod 2: {b(veke):.2f}\")\n\nEtter 28 veker er tilbod 2 &gt; tilbod 1\ntilbod 1: 370.00\ntilbod 2: 373.35\n\n\n\n\nc) samanlikne total√∏n\nGjer tilsvarande som i oppg√•ve b men finn totalen. Sjekkar kor mange veker det tek f√∏r tilbod 2 til saman gjev meir l√∏n enn tilbod 1.\n\ntot_a = a(1) + a(2)\ntot_b = b(1) + b(2)\n\nveke = 2\n\nwhile tot_b &lt; tot_a:\n    veke += 1\n    tot_a += a(veke)\n    tot_b += b(veke)\n\nprint(f\"Etter {veke} veker er tilbod 2 &gt; tilbod 1\")\nprint(f\"tilbod 1: {tot_a:.2f}\")\nprint(f\"tilbod 2: {tot_b:.2f}\")\n\n\nEtter 39 veker er tilbod 2 &gt; tilbod 1\ntilbod 1: 11310.00\ntilbod 2: 11409.50"
  },
  {
    "objectID": "lf/S2-V23/index.html#oppg√•ve-5-1",
    "href": "lf/S2-V23/index.html#oppg√•ve-5-1",
    "title": "Eksamen V23 S2",
    "section": "Oppg√•ve 5",
    "text": "Oppg√•ve 5\n\na) simulerer 20 elevar\nProgrammet skal trekkja ut 20 elevar. For kvar elev dei skal trekkja, trekk dei f√∏rst ein tilfeldig skule og deretter ein tilfeldig elev fr√• den skulen.\n\nimport numpy as np\nrng = np.random.default_rng()\n\n# tal elevar\nN = 20\n\n# trekk tilfeldig skule (A-&gt;0, B-&gt;1, C-&gt;2)\nskule = rng.integers(0, 3, N)\n\n# tel opp kor mange av kvar skule\nA = np.sum(skule == 0)\nB = np.sum(skule == 1)\nC = np.sum(skule == 2)\n\n# trekk karakterar (elevar)\nA_kar = sum(rng.normal(3.8, 1.2, A))\nB_kar = sum(rng.normal(3.4, 1.4, B))\nC_kar = sum(rng.normal(4.1, 1.1, C))\n\n# snittkarakter\nsnitt = (A_kar + B_kar + C_kar) / N\n\nprint(f\"Snittkarakteren er ca {snitt:.2f}\")\n\nSnittkarakteren er ca 3.37\n\n\n\n\nb) finne sannsyn ved simulering\nGjer om koden fr√• a) til ein funksjon. K√∏yrer denne simuleringa mange gongar for √• finna sannsynet for at snittkarakteren til dei 20 elevane er over 4.\n\ndef snitt20elevar():\n    N = 20\n\n    skule = rng.integers(0, 3, N)\n\n    A = np.sum(skule == 0)\n    B = np.sum(skule == 1)\n    C = np.sum(skule == 2)\n\n    A_kar = sum(rng.normal(3.8, 1.2, A))\n    B_kar = sum(rng.normal(3.4, 1.4, B))\n    C_kar = sum(rng.normal(4.1, 1.1, C))\n\n    snitt = (A_kar + B_kar + C_kar) / N\n\n    return snitt\n\n# simulerer 100000 gonger\nsimlueringar = 100000\n\n# tom liste til karakterar\nkarakterar = np.array([])\n\n# legg til snittkarakter for 20 elevar i lista 100000 gonger\nfor i in range(simlueringar):\n    karakterar = np.append(karakterar, snitt20elevar())\n\n# tel opp kor mange som er over 4\nover4 = np.sum(karakterar &gt; 4)\n\n# reknar ut sannsynet\nsannsyn = over4 / simlueringar\n\n# skriv ut resultatet\nprint(f\"Sannsynet for at snittkarakteren er over 4 er ca {sannsyn:.2f}\")\n\nSannsynet for at snittkarakteren er over 4 er ca 0.21\n\n\n\n\n\n\n\n\nTips\n\n\n\n\n\nkarakterar = np.array([])\n\nfor i in range(simlueringar):\n    karakterar = np.append(karakterar, snitt20elevar())\nkan forenklast til\nkarakterar = np.array([snitt20elevar() for i in range(simlueringar)])\n\n\n\nK√∏yrer koden fleire gongar med same resultat. Sannsynet for at snittkarakteren til dei 20 elevane er over 4 er ca. 0.21."
  }
]